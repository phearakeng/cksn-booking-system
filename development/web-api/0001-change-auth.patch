From 501395e701dede8b05877d5dc274d76c7323388d Mon Sep 17 00:00:00 2001
From: Chhen Rina <chhenrina@gmail.com>
Date: Thu, 23 Dec 2021 22:29:38 +0700
Subject: [PATCH] change auth

---
 0001-update-container-filter.patch         | 126 +++
 auth_store.js                              |  10 +
 lib/app.ts                                 |  36 +-
 lib/authorization/AuthenticationHandler.ts | 106 +++
 lib/authorization/AuthorizationServer.ts   | 101 +++
 lib/authorization/JWTGenerator.ts          | 127 +++
 lib/authorization/auth.ts                  | 111 ---
 lib/authorization/errorToken.txt           |  16 -
 lib/authorization/oauth2.ts                | 321 -------
 lib/authorization/token.ts                 | 108 ---
 lib/authorization/utils.ts                 | 117 ---
 lib/authorization/validate.ts              | 334 --------
 lib/controller/base.controller.ts          |   8 +
 lib/controller/booking.controller.ts       | 337 ++++----
 lib/controller/broker.controller.ts        |  43 +-
 lib/controller/business.controller.ts      | 185 +++--
 lib/controller/carrier.controller.ts       |   6 +-
 lib/controller/container.controller.ts     | 318 +++----
 lib/controller/country.controller.ts       |  30 +-
 lib/controller/customer.controller.ts      | 192 +++--
 lib/controller/dashboard.controller.ts     |  83 +-
 lib/controller/department.controler.ts     | 179 ++--
 lib/controller/document.controller.ts      |  13 +-
 lib/controller/group.controller.ts         | 139 ++--
 lib/controller/mail.cotroller.ts           |   9 +-
 lib/controller/page.controller.ts          |   6 +-
 lib/controller/port.controller.ts          |  23 +-
 lib/controller/pre_defined.controller.ts   | 164 ++--
 lib/controller/report.controller.ts        |   9 +-
 lib/controller/truck.controller.ts         |  24 +-
 lib/controller/user.controller.ts          | 411 ++++-----
 lib/helper/crypto.helper.ts                |  48 ++
 lib/helper/private.pem                     |  28 +
 lib/helper/public.pem                      |   9 +
 lib/orm/entity/token.entity.ts             |  25 +
 lib/orm/repository/oauth2Repository.ts     | 505 ++++++-----
 lib/orm/repository/token.repository.ts     |  74 ++
 lib/orm/repository/user.repository.ts      | 500 +++++------
 package-lock.json                          | 921 ++++++---------------
 package.json                               |  19 +-
 40 files changed, 2612 insertions(+), 3209 deletions(-)
 create mode 100644 0001-update-container-filter.patch
 create mode 100644 auth_store.js
 create mode 100644 lib/authorization/AuthenticationHandler.ts
 create mode 100644 lib/authorization/AuthorizationServer.ts
 create mode 100644 lib/authorization/JWTGenerator.ts
 delete mode 100644 lib/authorization/auth.ts
 delete mode 100644 lib/authorization/errorToken.txt
 delete mode 100644 lib/authorization/oauth2.ts
 delete mode 100644 lib/authorization/token.ts
 delete mode 100644 lib/authorization/utils.ts
 delete mode 100644 lib/authorization/validate.ts
 create mode 100644 lib/helper/crypto.helper.ts
 create mode 100644 lib/helper/private.pem
 create mode 100644 lib/helper/public.pem
 create mode 100644 lib/orm/entity/token.entity.ts
 create mode 100644 lib/orm/repository/token.repository.ts

diff --git a/0001-update-container-filter.patch b/0001-update-container-filter.patch
new file mode 100644
index 0000000..c1c62dd
--- /dev/null
+++ b/0001-update-container-filter.patch
@@ -0,0 +1,126 @@
+From 96732090bd515e4a2455b06f524281455fee111f Mon Sep 17 00:00:00 2001
+From: Chhen Rina <chhenrina@gmail.com>
+Date: Sun, 19 Dec 2021 12:38:52 +0700
+Subject: [PATCH] update container filter
+
+---
+ lib/controller/container.controller.ts     |  8 ++--
+ lib/orm/repository/container.repository.ts | 48 ++++++++++++++--------
+ 2 files changed, 35 insertions(+), 21 deletions(-)
+
+diff --git a/lib/controller/container.controller.ts b/lib/controller/container.controller.ts
+index 83b9a36..fb0d9a7 100644
+--- a/lib/controller/container.controller.ts
++++ b/lib/controller/container.controller.ts
+@@ -78,8 +78,8 @@ export class ContainerController extends baseController{
+         let toDate = req.body.toDate
+         let groupID = req.body.groupID
+         let userID = req.body.userID
+-          console.log(req.body)
+-        getCustomRepository(ContainerRepository).getListCotainters(pageIndex,pageSize,containerStatusID,fromDate,toDate,userID,groupID).then(
++        let isViewAll = req.body.isViewAll
++        getCustomRepository(ContainerRepository).getListCotainters(pageIndex,pageSize,containerStatusID,fromDate,toDate,userID,groupID,isViewAll).then(
+             qb =>{res.send(qb)}
+         ) 
+      })
+@@ -133,7 +133,9 @@ export class ContainerController extends baseController{
+         let userID = req.body.userID
+         let fromDate = req.body.fromDate
+         let toDate = req.body.toDate
+-        getCustomRepository(ContainerRepository).getCountContainers(containerStatusID,userID,groupID,fromDate,toDate).then(
++        let isViewAll = req.body.isViewAll
++        console.log(req.body)
++        getCustomRepository(ContainerRepository).getCountContainers(containerStatusID,userID,groupID,fromDate,toDate,isViewAll).then(
+             qb =>{res.send(qb)}
+         ) 
+      })
+diff --git a/lib/orm/repository/container.repository.ts b/lib/orm/repository/container.repository.ts
+index b9a0aa1..4d1d4b8 100644
+--- a/lib/orm/repository/container.repository.ts
++++ b/lib/orm/repository/container.repository.ts
+@@ -123,7 +123,7 @@ export class ContainerRepository extends Repository<Container>
+     * @param pageSize 
+     * @param bookingStatusID
+     */
+-    getListCotainters(pageIndex, pageSize, containerStatusID, fromDate, toDate, userID, groupID): Promise<any> {
++    getListCotainters(pageIndex, pageSize, containerStatusID, fromDate, toDate, userID, groupID,isViewAll): Promise<any> {
+         let resBody: ResponseBody<any> = new ResponseBody()
+         try {
+ 
+@@ -141,17 +141,23 @@ export class ContainerRepository extends Repository<Container>
+                 .orderBy("booking.ID", "DESC")
+                 .skip(pageIndex)
+                 .take(pageSize)
+-                .where("((container.pickUpDate is not null and container.deliveryDate is not null) and container.containerStatusID = :containerStatusID and container.isActive=1 and booking.isActive=1 and booking.operationID = :userID and (date(container.pickUpDate) >= :fromDate and date(container.pickUpDate) <= :toDate) and 3 <> :groupID)",
+-                    { "containerStatusID": containerStatusID, "fromDate": fromDate, "toDate": toDate, "userID": userID, "groupID": groupID })
++                .where("((container.pickUpDate is not null and container.deliveryDate is not null) and container.containerStatusID = :containerStatusID and container.isActive=1 and booking.isActive=1 and booking.operationID = :userID and (date(container.pickUpDate) >= :fromDate and date(container.pickUpDate) <= :toDate) and :isViewAll = false)",
++                    { "containerStatusID": containerStatusID, "fromDate": fromDate, "toDate": toDate, "userID": userID, "isViewAll": isViewAll })
+ 
+-                .orWhere("((container.pickUpDate is not null and  container.deliveryDate is not null)  and  :containerStatusID = 0 and container.isActive=1 and booking.isActive=1 and booking.operationID = :userID and (container.pickUpDate >= :fromDate and date(container.pickUpDate) <= :toDate) and 3 <> :groupID)  ",
+-                    { "containerStatusID": containerStatusID, "fromDate": fromDate, "toDate": toDate, "userID": userID, "groupID": groupID })
++                .orWhere("((container.pickUpDate is not null and  container.deliveryDate is not null)  and  :containerStatusID = 0 and container.isActive=1 and booking.isActive=1 and (container.pickUpDate >= :fromDate and date(container.pickUpDate) <= :toDate) and :isViewAll=true)  ",
++                    { "containerStatusID": containerStatusID, "fromDate": fromDate, "toDate": toDate, "isViewAll": isViewAll })
++               
++                // .where("((container.pickUpDate is not null and container.deliveryDate is not null) and container.containerStatusID = :containerStatusID and container.isActive=1 and booking.isActive=1 and booking.operationID = :userID and (date(container.pickUpDate) >= :fromDate and date(container.pickUpDate) <= :toDate) and 3 <> :groupID)",
++                //     { "containerStatusID": containerStatusID, "fromDate": fromDate, "toDate": toDate, "userID": userID, "groupID": groupID })
+ 
+-                .orWhere("(container.pickUpDate is not null and container.deliveryDate is not null and container.containerStatusID = :containerStatusID and container.isActive=1 and booking.isActive=1 and container.isActive=1 and booking.isActive=1 and (date(container.pickUpDate) >= :fromDate and date(container.pickUpDate) <= :toDate) and 3=:groupID)",
+-                    { "containerStatusID": containerStatusID, "fromDate": fromDate, "toDate": toDate, "groupID": groupID })
++                // .orWhere("((container.pickUpDate is not null and  container.deliveryDate is not null)  and  :containerStatusID = 0 and container.isActive=1 and booking.isActive=1 and booking.operationID = :userID and (container.pickUpDate >= :fromDate and date(container.pickUpDate) <= :toDate) and 3 <> :groupID)  ",
++                //     { "containerStatusID": containerStatusID, "fromDate": fromDate, "toDate": toDate, "userID": userID, "groupID": groupID })
+ 
+-                .orWhere("(container.pickUpDate is not null and container.deliveryDate is not null and :containerStatusID = 0 and container.isActive=1 and booking.isActive=1 and  (date(container.pickUpDate)  >= :fromDate and date(container.pickUpDate) <= :toDate) and 3=:groupID)",
+-                    { "containerStatusID": containerStatusID, "fromDate": fromDate, "toDate": toDate, "groupID": groupID })
++                // .orWhere("(container.pickUpDate is not null and container.deliveryDate is not null and container.containerStatusID = :containerStatusID and container.isActive=1 and booking.isActive=1 and container.isActive=1 and booking.isActive=1 and (date(container.pickUpDate) >= :fromDate and date(container.pickUpDate) <= :toDate) and 3=:groupID)",
++                //     { "containerStatusID": containerStatusID, "fromDate": fromDate, "toDate": toDate, "groupID": groupID })
++
++                // .orWhere("(container.pickUpDate is not null and container.deliveryDate is not null and :containerStatusID = 0 and container.isActive=1 and booking.isActive=1 and  (date(container.pickUpDate)  >= :fromDate and date(container.pickUpDate) <= :toDate) and 3=:groupID)",
++                //     { "containerStatusID": containerStatusID, "fromDate": fromDate, "toDate": toDate, "groupID": groupID })
+ 
+                 .getMany()
+                 .then(x => {
+@@ -179,7 +185,7 @@ export class ContainerRepository extends Repository<Container>
+     /**
+     * @@method getCountContainers
+     */
+-    getCountContainers(containerStatusID, userID, groupID, fromDate, toDate): Promise<any> {
++    getCountContainers(containerStatusID, userID, groupID, fromDate, toDate,isViewAll): Promise<any> {
+ 
+         try {
+             //  if(containerStatusID!=0){
+@@ -189,18 +195,24 @@ export class ContainerRepository extends Repository<Container>
+                 //    .orWhere("(container.pickUpDate is not null and container.deliveryDate is not null and container.isActive=1 and booking.isActive=1 and 0 = :containerStatusID  and booking.operationID = :userID and (container.pickUpDate >= :fromDate and container.pickUpDate <= :toDate)  and 3 <> :groupID)",{containerStatusID:containerStatusID,userID:userID,"fromDate":fromDate,"toDate":toDate,"groupID":groupID})
+                 //   .orWhere("(container.pickUpDate is not null and container.deliveryDate is not null and container.isActive=1 and booking.isActive=1 and container.containerStatusID = :containerStatusID and :groupID=3 and (container.pickUpDate >= :fromDate and container.pickUpDate <= :toDate))",{containerStatusID:containerStatusID,groupID:groupID,"fromDate":fromDate,"toDate":toDate})
+                 //   .orWhere("(container.pickUpDate is not null and container.deliveryDate is not null and container.isActive=1 and booking.isActive=1 and 0 = :containerStatusID and :groupID=3 and (container.pickUpDate >= :fromDate and container.pickUpDate <= :toDate)) ",{containerStatusID:containerStatusID,groupID:groupID,"fromDate":fromDate,"toDate":toDate})
++             .where("((container.pickUpDate is not null and container.deliveryDate is not null) and container.containerStatusID = :containerStatusID and container.isActive=1 and booking.isActive=1 and booking.operationID = :userID and (date(container.pickUpDate) >= :fromDate and date(container.pickUpDate) <= :toDate) and :isViewAll = false)",
++                    { "containerStatusID": containerStatusID, "fromDate": fromDate, "toDate": toDate, "userID": userID, "isViewAll": isViewAll })
+ 
+-                .where("((container.pickUpDate is not null and container.deliveryDate is not null) and container.containerStatusID = :containerStatusID and container.isActive=1 and booking.isActive=1 and booking.operationID = :userID and (date(container.pickUpDate) >= :fromDate and date(container.pickUpDate) <= :toDate) and 3 <> :groupID)",
+-                    { "containerStatusID": containerStatusID, "fromDate": fromDate, "toDate": toDate, "userID": userID, "groupID": groupID })
++                .orWhere("((container.pickUpDate is not null and  container.deliveryDate is not null)  and  :containerStatusID = 0 and container.isActive=1 and booking.isActive=1 and (container.pickUpDate >= :fromDate and date(container.pickUpDate) <= :toDate) and :isViewAll=true)  ",
++                    { "containerStatusID": containerStatusID, "fromDate": fromDate, "toDate": toDate, "isViewAll": isViewAll })
++                
++                    // .where("((container.pickUpDate is not null and container.deliveryDate is not null) and container.containerStatusID = :containerStatusID and container.isActive=1 and booking.isActive=1 and booking.operationID = :userID and (date(container.pickUpDate) >= :fromDate and date(container.pickUpDate) <= :toDate) and 3 <> :groupID)",
++                //     { "containerStatusID": containerStatusID, "fromDate": fromDate, "toDate": toDate, "userID": userID, "groupID": groupID })
+ 
+-                .orWhere("((container.pickUpDate is not null and  container.deliveryDate is not null)  and  :containerStatusID = 0 and container.isActive=1 and booking.isActive=1 and booking.operationID = :userID and (container.pickUpDate >= :fromDate and date(container.pickUpDate) <= :toDate) and 3 <> :groupID)  ",
+-                    { "containerStatusID": containerStatusID, "fromDate": fromDate, "toDate": toDate, "userID": userID, "groupID": groupID })
++                // .orWhere("((container.pickUpDate is not null and  container.deliveryDate is not null)  and  :containerStatusID = 0 and container.isActive=1 and booking.isActive=1 and booking.operationID = :userID and (container.pickUpDate >= :fromDate and date(container.pickUpDate) <= :toDate) and 3 <> :groupID)  ",
++                //     { "containerStatusID": containerStatusID, "fromDate": fromDate, "toDate": toDate, "userID": userID, "groupID": groupID })
+ 
+-                .orWhere("(container.pickUpDate is not null and container.deliveryDate is not null and container.containerStatusID = :containerStatusID and container.isActive=1 and booking.isActive=1 and container.isActive=1 and booking.isActive=1 and (date(container.pickUpDate) >= :fromDate and date(container.pickUpDate) <= :toDate) and 3=:groupID)",
+-                    { "containerStatusID": containerStatusID, "fromDate": fromDate, "toDate": toDate, "groupID": groupID })
++                // .orWhere("(container.pickUpDate is not null and container.deliveryDate is not null and container.containerStatusID = :containerStatusID and container.isActive=1 and booking.isActive=1 and container.isActive=1 and booking.isActive=1 and (date(container.pickUpDate) >= :fromDate and date(container.pickUpDate) <= :toDate) and 3=:groupID)",
++                //     { "containerStatusID": containerStatusID, "fromDate": fromDate, "toDate": toDate, "groupID": groupID })
+ 
+-                .orWhere("(container.pickUpDate is not null and container.deliveryDate is not null and :containerStatusID = 0 and container.isActive=1 and booking.isActive=1 and  (date(container.pickUpDate)  >= :fromDate and date(container.pickUpDate) <= :toDate) and 3=:groupID)",
+-                    { "containerStatusID": containerStatusID, "fromDate": fromDate, "toDate": toDate, "groupID": groupID })
++                // .orWhere("(container.pickUpDate is not null and container.deliveryDate is not null and :containerStatusID = 0 and container.isActive=1 and booking.isActive=1 and  (date(container.pickUpDate)  >= :fromDate and date(container.pickUpDate) <= :toDate) and 3=:groupID)",
++                //     { "containerStatusID": containerStatusID, "fromDate": fromDate, "toDate": toDate, "groupID": groupID })
++                
+                 .getCount().then(
+                     x => {
+                         let res: ResponseBody<any> = new ResponseBody()
+-- 
+2.24.2 (Apple Git-127)
+
diff --git a/auth_store.js b/auth_store.js
new file mode 100644
index 0000000..a5e04de
--- /dev/null
+++ b/auth_store.js
@@ -0,0 +1,10 @@
+
+
+module.exports = {
+    clients:[
+        {
+            "client_id": "CK9999",
+            "key": "99596168-f64f-489a-8679-c02eaf7b3d49"
+        }
+    ]
+}
\ No newline at end of file
diff --git a/lib/app.ts b/lib/app.ts
index 74ffe20..cd0114e 100755
--- a/lib/app.ts
+++ b/lib/app.ts
@@ -1,13 +1,10 @@
 import * as express from "express";
 import * as bodyParser from "body-parser";
 import { createConnection, getCustomRepository, getRepository } from 'typeorm';
-import { Token } from './authorization/token';
 import { UserController } from './controller/user.controller';
 import { GroupController } from './controller/group.controller';
 import { DepartmentController } from './controller/department.controler';
 import { PreDefinedFieldController } from './controller/pre_defined.controller';
-import passport = require('passport');
-import auth = require("./authorization/auth")
 import { CustomerController } from "./controller/customer.controller";
 import { BusinessPartnerController } from "./controller/business.controller";
 import { CarrierController } from "./controller/carrier.controller";
@@ -20,12 +17,9 @@ import { BrokerController } from "./controller/broker.controller";
 import { PageController } from "./controller/page.controller";
 import { MailController } from "./controller/mail.cotroller";
 import { CountryController } from './controller/country.controller';
-import * as oauth2 from './authorization/oauth2';
 import { DashboardController } from './controller/dashboard.controller';
 import { ReportController } from "./controller/report.controller";
-import { CustomerRepository } from './orm/repository/customer.repository';
-import { Customer } from "./orm/entity/customer.entity";
-
+import { CryptoHelper } from "./helper/crypto.helper";
 var path = require('path')
 
 /**
@@ -34,7 +28,7 @@ var path = require('path')
 class App {
 
     public app: express.Application
-    public token=new Token()
+   // public token=new Token()
 
     public userController:UserController = new UserController()
     public truckController:TruckController = new TruckController()
@@ -56,13 +50,11 @@ class App {
     public dasbaordControler = new DashboardController();
 
     constructor() {
+
         this.app = express();
         this.initDatabase()
         this.config();    
         // inititalize database
-       
-        // API 
-               this.authorizationServer()
             //1/ USE
                 this.getUserController()
             //2/ Permission
@@ -126,30 +118,12 @@ class App {
         this.app.use(function(req, res, next) {
                 res.header("Access-Control-Allow-Origin", "*");
                 res.header("Access-Control-Allow-Methods", "GET,HEAD,OPTIONS,POST,PUT");
-                res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, Authorization");
+                res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, Authorization,client_id,key");
             next();
           });
       //  this.sessionManager()
     }
 
-    authorizationServer(){
-        auth
-        this.app.use(passport.initialize());
-        this.app.use(passport.session());
-       // this.app.get('/dialog/authorize',           oauth2.authorization);
-        //this.app.post('/dialog/authorize/decision', oauth2.decision);
-      this.app.post('/oauth/token',               oauth2.token);
-       //this.app.post('/user/login',               oauth2.token);
-       // this.app.post('/oauth/token',oauth2.token);
-     //   this.app.post('/api/revoke', this.token.revoke);
-        // this.app.post("/", (req,res) => {   
-        //     res.status(200).send(
-        //         'Hello world'
-        //     )
-        //   });
-    }
-    
-
 
      /**
      * @method init Database
@@ -179,7 +153,7 @@ class App {
         this.userController.removeUserByID(this.app)
         this.userController.getUserByGroups(this.app)
         //authorization setting
-        this.userController.addClientAuhtorization(this.app)
+        // this.userController.addClientAuhtorization(this.app)
         this.userController.getListUserByPosition(this.app)
         this.userController.getListUserOperation(this.app)
 
diff --git a/lib/authorization/AuthenticationHandler.ts b/lib/authorization/AuthenticationHandler.ts
new file mode 100644
index 0000000..ce60b89
--- /dev/null
+++ b/lib/authorization/AuthenticationHandler.ts
@@ -0,0 +1,106 @@
+import { JWTUtil } from './JWTGenerator';
+import { getCustomRepository } from 'typeorm';
+import { UserRepository } from '../orm/repository/user.repository';
+import * as jwt_decode from "jwt-decode";
+import { User } from '../orm/entity/user';
+import { Status } from '../controller/base.controller';
+import { ResponseBody } from '../orm/repository/responseBody';
+import { CryptoHelper } from '../helper/crypto.helper';
+import { TokenRepository } from '../orm/repository/token.repository';
+import * as clientStore from '../../auth_store';
+import { Token } from '../orm/entity/token.entity';
+
+/**
+ * @author <auth>RINA </auth>
+ */
+export class AuthenticationHandler {
+    async token(req, res) {
+        let response: ResponseBody<any> = new ResponseBody()
+        var client_id = req.headers.client_id
+        var key = req.headers.key
+        let status: boolean = false;
+        let tokenData = "";
+        if (client_id != null && key != null) {
+            let cStore = clientStore.clients
+            for (let cl of cStore) {
+                if (cl.client_id == client_id && cl.key == key) {
+                    status = true
+                    break;
+                }
+            }
+        }
+
+        if (status == true) {
+            status = false;// reset status
+            let userRepo = getCustomRepository(UserRepository)
+            let username = req.body.username;
+            let password = CryptoHelper.decrypt_req(req.body.password);
+            
+            //   console.log(CryptoHelper.descrypt("516clZJAUErXWL/bJtl2rw=="))
+            console.log("Password",password)
+            let userRes = await userRepo.findUser(username, password);
+            if (userRes.status == Status.success && userRes.body.length > 0) {
+                let user = userRes.body[0] as User
+                if (user != null) {
+                    console.log(user.password)
+               //     CryptoHelper.decrypt_db(user.password)
+                    if ( user.password == password) {
+                        // add more condition
+                        let jwtUtil = new JWTUtil();
+                        tokenData = jwtUtil.creatToken(3600, "" + user.ID, "" + user.group.group);
+                        let decode = jwt_decode(tokenData)
+                        // save token
+                        let tokenModel = new Token()
+                        tokenModel.jti = decode.jti
+                        tokenModel.expirationDate = "" + decode.exp
+                        tokenModel.userId = "" + user.ID
+                        tokenModel.token = tokenData
+
+                        let tokenRepo = getCustomRepository(TokenRepository)
+                        let tokenRes = await tokenRepo.saveToken(tokenModel);
+                        console.log(tokenRes)
+                        if (tokenRes.status == Status.success) {
+                            status = true
+                        }
+                    }
+                }
+            }
+            else {
+
+                status = false
+            }
+        }
+        // response
+        if (status == true) {
+            response.body = [{
+                "type": "bearer",
+                "access_token": tokenData
+            }];
+            response.status = Status.success
+        }
+        else {
+            res.status(401)
+            response.body = [{
+                "erro_description": "Authorization is denied"
+            }];
+            response.status = Status.logic_error
+        }
+        res.json(response)
+    }
+
+    // check header
+    async checkHeader(headers: any): Promise<any> {
+        return new Promise(resolve => {
+            try {
+                return resolve(status)
+            }
+            catch (err) {
+                console.log('error ')
+                console.log(err);
+                resolve(status)
+            }
+        })
+
+    }
+
+}
diff --git a/lib/authorization/AuthorizationServer.ts b/lib/authorization/AuthorizationServer.ts
new file mode 100644
index 0000000..f03d11f
--- /dev/null
+++ b/lib/authorization/AuthorizationServer.ts
@@ -0,0 +1,101 @@
+import { JWTUtil } from './JWTGenerator';
+import { getCustomRepository } from 'typeorm';
+import { Status } from '../controller/base.controller';
+import { TokenRepository } from '../orm/repository/token.repository';
+
+
+
+/**
+ * @author <auth>RINA </auth>
+ */
+
+/**
+ * @param  req : Resquest,
+ * @param  res : Response,
+ * @param  role: array of string ,contain role
+ * 
+ * */
+let authori_attr = async (req, res, next,roles:string[]) => {
+
+  let token = req.headers['x-access-token'] || req.headers['authorization'] || ''; // Express headers are auto converted to lowercase
+
+  if (token) {
+    if (token.startsWith('Bearer ')) {
+      token = token.slice(7, token.length);
+    }
+    else {
+      res.status(401)
+      return res.json({
+        status: 401,
+        message: 'Auth token is not valid.'
+      });
+    }
+ 
+
+    let jwtUtil = new JWTUtil();
+    let result = jwtUtil.verifyToken(token);
+    var tokenRepo = getCustomRepository(TokenRepository);
+    if (result != null) {
+      // check with db
+      var jti = result.jti
+      var role = result.role; 
+
+      // check role 
+      let isGranted = false;
+      if(roles!=null || roles.length>0){
+        isGranted = roles.filter(r=>(r.toLowerCase()=="all") || r.toLowerCase()==role).length>0?true:false;
+      }
+     
+
+    if(isGranted==true){
+      var tokenReult = await tokenRepo.findToken(jti);
+      if (tokenReult.status == Status.success && tokenReult.body.length > 0) {
+        next();
+      }
+      else {
+        res.status(401)
+        return res.json({
+          status: 401,
+          message: 'Auth token is expires.'
+        });
+      }
+    }
+    else {
+      res.status(401)
+      return res.json({
+        status: 401,
+        message: 'Request is not granted!'
+      });
+    }
+     
+    }
+    else {
+      try {
+        var decode = jwtUtil.decode(token);
+        await tokenRepo.deleteToken(decode.jti);
+      }
+      catch (err) {
+        console.error(err)
+      }
+
+      res.status(401)
+      return res.json({
+        status: 401,
+        message: 'Auth token is not valid.'
+      });
+    }
+
+  } else {
+    res.status(401)
+    return res.json({
+      status: 401,
+      message: 'Auth token is not supplied'
+    });
+  }
+}
+
+
+
+module.exports = {
+  authori_attr: authori_attr
+}
diff --git a/lib/authorization/JWTGenerator.ts b/lib/authorization/JWTGenerator.ts
new file mode 100644
index 0000000..d9b1a2d
--- /dev/null
+++ b/lib/authorization/JWTGenerator.ts
@@ -0,0 +1,127 @@
+import *  as uuid from 'uuid/v4';
+import * as jwt from 'jsonwebtoken'
+import fs = require('fs');
+import * as jwt_decode from "jwt-decode";
+import { Token } from '../orm/entity/token.entity';
+/** Private certificate used for signing JSON WebTokens */
+// const privateKey = fs.readFileSync(path.join(__dirname, 'certs/privatekey.pem'));
+
+/** Public certificate used for verification.  Note: you could also use the private key */
+// const publicKey = fs.readFileSync(path.join(__dirname, 'certs/certificate.pem'));
+
+/** Private certificate used for signing JSON WebTokens */
+// const privateKey = fs.readFileSync('certs/privatekey.pem');
+
+// /** Public certificate used for verification.  Note: you could also use the private key */
+// const publicKey = fs.readFileSync('certs/publicKey.pem');
+
+const privateKey = fs.readFileSync(__dirname + '/certs/privateKey.pem');
+const publicKey = fs.readFileSync(__dirname + '/certs/publicKey.pem');
+
+export class JWTUtil {
+
+  /**
+   * Creates a signed JSON WebToken and returns it.  Utilizes the private certificate to create
+   * the signed JWT.  For more options and other things you can change this to, please see:
+   * https://github.com/auth0/node-jsonwebtoken
+   *
+   * @param  {Number} exp - The number of seconds for this token to expire.  By default it will be 60
+   *                        minutes (3600 seconds) if nothing is passed in.
+   * @param  {String} sub - The subject or identity of the token. //userID
+   * @return {String} The JWT Token
+   */
+
+  creatToken(exp: number = 3600, userID: String, role: String): any {
+    // console.log("create Token 1"+exp+" "+sub)
+    try {
+
+      const newJWT = jwt.sign({
+        jti: uuid(),
+        id: userID,
+        role: role,
+        exp: Math.floor(Date.now() / 1000) + exp,
+      }, privateKey, {
+        algorithm: 'RS256',
+      });
+
+      // console.log("create Token 2 "+newJWT)
+      return newJWT
+    } catch (error) {
+      console.log(error)
+    }
+
+
+
+    return null
+
+  }
+
+
+
+  /**
+ * Verifies the token through the jwt library using the public certificate.
+ * @param   {String} token - The token to verify
+ * @throws  {Error} Error if the token could not be verified
+ * @returns {Object} The token decoded and verified
+ */
+  // exports.verifyToken = token => jwt.verify(token, publicKey);
+  verifyToken(token: any): any {
+    try {
+      return jwt.verify(token, publicKey)
+    }
+    catch (error) {
+      return null;
+    }
+  }
+
+  decode(token){
+    return jwt_decode(token)
+ }
+  
+
+  /**
+ * Configuration of access tokens.
+ *
+ * expiresIn               - The time in minutes before the access token expires. Default is 1 mn
+ * calculateExpirationDate - A simple function to calculate the absolute time that the token is
+ *                           going to expire in.
+ */
+  token = {
+    expiresIn: 60,// 5 second  // 60 second
+    calculateExpirationDate: () => new Date(Date.now() + (this.token.expiresIn * 1000)),
+  };
+
+  /**
+  * Configuration of code token.
+  * expiresIn - The time in minutes before the code token expires.  Default is 5 minutes.
+  */
+  codeToken = {
+    expiresIn: 5 * 60,
+  };
+
+  /**
+   * Configuration of refresh token.
+   * expiresIn - The time in minutes before the code token expires.  Default is 8 (28800Sec) hour.  Most if
+   *             all refresh tokens are expected to not expire.  However, I give it a very long shelf
+   *             life instead.
+   * expiresIn as second
+   */
+
+  refreshToken = {
+    expiresIn: 3600 * 8,
+  };
+
+
+  db = {
+    timeToCheckExpiredTokens: 3600,
+  };
+
+  session = {
+    maxAge: 3600000 * 24 * 7 * 52,
+    secret: 'A Secret That Should Be Changed', // TODO: You need to change this secret to something that you choose for your secret
+  };
+
+
+
+
+}
\ No newline at end of file
diff --git a/lib/authorization/auth.ts b/lib/authorization/auth.ts
deleted file mode 100644
index e0147e9..0000000
--- a/lib/authorization/auth.ts
+++ /dev/null
@@ -1,111 +0,0 @@
-'use strict';
-
-
-
-
-import passport = require('passport');
-import  LocalStrategy  = require('passport-local');
-import  BasicStrategy  = require('passport-http');
-import  ClientPasswordStrategy  = require('passport-oauth2-client-password');
-import  BearerStrategy  = require('passport-http-bearer');
-import { getCustomRepository } from 'typeorm';
-import { UserRepository } from '../orm/repository/user.repository';
-import Validate from './validate';
-import { ClientOAuth2Repository } from '../orm/repository/Oauth2Repository';
-import { AccessTokenOauth2Repository } from '../orm/repository/Oauth2Repository';
-
-/**
- * LocalStrategy
- *
- * This strategy is used to authenticate users based on a username and password.
- * Anytime a request is made to authorize an application, we must ensure that
- * a user is logged in before asking them to approve the request.
- */
-const validate=new Validate()
-
-passport.use(new LocalStrategy.Strategy((username, password, done) => {
-  const userRepo=getCustomRepository(UserRepository);
-  userRepo.findByUsername(username)
-  .then(user => validate.user(user, password))
-  .then(user => done(null, user))
-  .catch(() => done(null, false));
-}));
-
-/**
- * BasicStrategy & ClientPasswordStrategy
- *
- * These strategies are used to authenticate registered OAuth clients.  They are
- * employed to protect the `token` endpoint, which consumers use to obtain
- * access tokens.  The OAuth 2.0 specification suggests that clients use the
- * HTTP Basic scheme to authenticate.  Use of the client password strategy
- * allows clients to send the same credentials in the request body (as opposed
- * to the `Authorization` header).  While this approach is not recommended by
- * the specification, in practice it is quite common.
- */
-passport.use(new BasicStrategy.BasicStrategy((clientId, clientSecret, done) => {
-  //console.log("Basic Strategy")
-  const clientRepo=getCustomRepository(ClientOAuth2Repository);
-  clientRepo.findOneByClientId(clientId)
-  .then(client => validate.client(client, clientSecret))
-  .then(client => done(null, client))
-  .catch(() => done(null, false));
-}));
-
-/**
- * Client Password strategy
- *
- * The OAuth 2.0 client password authentication strategy authenticates clients
- * using a client ID and client secret. The strategy requires a verify callback,
- * which accepts those credentials and calls done providing a client.
- */
-passport.use(new ClientPasswordStrategy.Strategy((clientId, clientSecret, done) => {
-  const clientRepo=getCustomRepository(ClientOAuth2Repository);
-  clientRepo.findOneByClientId(clientId)
-  .then(client => validate.client(client, clientSecret))
-  .then(client => done(null, client))
-  .catch(() => done(null, false));
-}));
-
-/**
- * BearerStrategy
- *
- * This strategy is used to authenticate either users or clients based on an access token
- * (aka a bearer token).  If a user, they must have previously authorized a client
- * application, which is issued an access token to make requests on behalf of
- * the authorizing user.
- *
- * To keep this example simple, restricted scopes are not implemented, and this is just for
- * illustrative purposes
- */
-passport.use(new BearerStrategy.Strategy((accessToken, done) => {
- // console.log("Bearer Strategy")
-  const accessTokenRepo=getCustomRepository(AccessTokenOauth2Repository);
-  accessTokenRepo.findByToken(accessToken)
-  .then(token => validate.token(token, accessToken))
-  .then(token => done(null, token,"*"))
-  .catch(() => done(null, false));
-}));
-
-// Register serialialization and deserialization functions.
-//
-// When a client redirects a user to user authorization endpoint, an
-// authorization transaction is initiated.  To complete the transaction, the
-// user must authenticate and approve the authorization request.  Because this
-// may involve multiple HTTPS request/response exchanges, the transaction is
-// stored in the session.
-//
-// An application must supply serialization functions, which determine how the
-// client object is serialized into the session.  Typically this will be a
-// simple matter of serializing the client's ID, and deserializing by finding
-// the client by ID from the database.
-
-passport.serializeUser((user:any, done) => {
-  done(null, user.id);
-});
-
-passport.deserializeUser((id:any, done) => {
-  const userRepo=getCustomRepository(UserRepository);
-  userRepo.findUserByID(id)
-  .then(user => done(null, user))
-  .catch(err => done(err));
-});
diff --git a/lib/authorization/errorToken.txt b/lib/authorization/errorToken.txt
deleted file mode 100644
index 1bf012d..0000000
--- a/lib/authorization/errorToken.txt
+++ /dev/null
@@ -1,16 +0,0 @@
-{
-    "error": "invalid_grant",
-    "error_description": "Invalid refresh token"
-}
-
-
-// access token error
-// when token is not available
-{
-    "error": "invalid_token"
-}
-
-
-
-// accessn token expire message. It's will reponse message 
-Unauthorized
\ No newline at end of file
diff --git a/lib/authorization/oauth2.ts b/lib/authorization/oauth2.ts
deleted file mode 100644
index bf42714..0000000
--- a/lib/authorization/oauth2.ts
+++ /dev/null
@@ -1,321 +0,0 @@
-//'use strict';
-/**
- * @Autor Rina Chen trusted developer :)
- */
-// Register supported grant types.
-//
-// OAuth 2.0 specifies a framework that allows users to grant client
-// applications limited access to their protected resources.  It does this
-// through a process of the user granting access, and the client exchanging
-// the grant for an access token.
-
-//import { token as _token, codeToken } from './config';
-//import { authorizationCodes, accessTokens, users, refreshTokens, clients } from './db';
-//import { ensureLoggedIn } from 'connect-ensure-login';
-import { getCustomRepository, getRepository } from 'typeorm';
-import { Utils } from './utils';
-import { UserRepository } from '../orm/repository/user.repository';
-import { ClientOAuth2Repository, RefreshTokenOauth2Repository, AccessTokenOauth2Repository, AuthorizationCodeOauth2Repository } from '../orm/repository/Oauth2Repository';
-import Validate from './validate';
-import { createServer, grant, exchange } from 'oauth2orize';
-import { authenticate } from 'passport';
-import { ensureLoggedIn } from 'connect-ensure-login';
-
-// create OAuth 2.0 server
-const server = createServer();
-const util=new Utils()
- const validate=new Validate()
-
-// Configured expiresIn
-const expiresIn = { expires_in : util.token.expiresIn };
-
-// Repository
-
-
-
-
-/**
- * Grant authorization codes
- *
- * The callback takes the `client` requesting authorization, the `redirectURI`
- * (which is used as a verifier in the subsequent exchange), the authenticated
- * `user` granting access, and their response, which contains approved scope,
- * duration, etc. as parsed by the application.  The application issues a code,
- * which is bound to these values, and will be exchanged for an access token.
- */
-server.grant(grant.code((client, redirectURI, user, ares, done) => {
-  // const code = createToken({ sub : user.id, exp : codeToken.expiresIn });
-  // authorizationCodes.save(code, client.id, redirectURI, user.id, client.scope)
-  // .then(() => done(null, code))
-  // .catch(err => done(err));
-  try{
-  //  console.log("object 1")
-const authorizationRepository=getCustomRepository(AuthorizationCodeOauth2Repository)
-  const code=util.creatToken(util.codeToken.expiresIn,user.ID)
-  const authorizationObject=authorizationRepository.create();
-        authorizationObject.code=code
-        authorizationObject.clientID=client.clientID
-        authorizationObject.redirectUri=redirectURI
-        authorizationObject.userId=user.ID
-        authorizationObject.scope=client.scope
-
-        authorizationRepository.save(authorizationObject)
-
-        return done (null,code)
-  }
-  catch(err){
-      return done(err)
-  }
-  
-
-
-}));
-
-/**
- * Grant implicit authorization.
- *
- * The callback takes the `client` requesting authorization, the authenticated
- * `user` granting access, and their response, which contains approved scope,
- * duration, etc. as parsed by the application.  The application issues a token,
- * which is bound to these values.
- */
-server.grant(grant.token(async (client, user, ares, done) => {
-  // const token      = createToken({ sub : user.id, exp : _token.expiresIn });
-  // const expiration = _token.calculateExpirationDate();
-
-  // accessTokens.save(token, expiration, user.id, client.id, client.scope)
-  // .then(() => done(null, token, expiresIn))
-  // .catch(err => done(err));
-
-  try {
-//console.log("object 2")
-     const accessTokenRepository=getCustomRepository(AccessTokenOauth2Repository)
-    const token = util.creatToken(util.token.expiresIn,user.ID)
-    const expiration = util.token.calculateExpirationDate()
- //   console.log("calculateExpirationDate token => "+expiration)
-    const accessTokenObject = accessTokenRepository.create();
-          accessTokenObject.token = token
-          accessTokenObject.expirationDate = expiration
-          accessTokenObject.userId = user.ID
-          accessTokenObject.clientID = client.clientID
-          accessTokenObject.scope = client.scope
-
-    await accessTokenRepository.save(accessTokenObject)
-   
-    return done(null,token,expiration)
-
-  } catch (error) {
-    console.log(error)
-    return done(error)
-  }
-
-
-}));
-
-/**
- * Exchange authorization codes for access tokens.
- *
- * The callback accepts the `client`, which is exchanging `code` and any
- * `redirectURI` from the authorization request for verification.  If these values
- * are validated, the application issues an access token on behalf of the user who
- * authorized the code.
- */
-server.exchange(exchange.code(async (client, code, redirectURI, done) => {
-  // authorizationCodes.delete(code)
-  // .then(authCode => _authCode(code, authCode, client, redirectURI))
-  // .then(authCode => generateTokens(authCode))
-  // .then((tokens) => {
-  //   if (tokens.length === 1) {
-  //     return done(null, tokens[0], null, expiresIn);
-  //   }
-  //   if (tokens.length === 2) {
-  //     return done(null, tokens[0], tokens[1], expiresIn);
-  //   }
-  //   throw new Error('Error exchanging auth code for tokens');
-  // })
-  // .catch(() => done(null, false));
-
-  try{
-    
-    const authorizationRepository=getCustomRepository(AuthorizationCodeOauth2Repository)
-    const authoCode=await authorizationRepository.removeByCode(code)
-    console.log("objects 3 "+authoCode)
-    validate.
-             generateToken(validate.authCode(code, authoCode, client, redirectURI))
-             .then((tokens)=>{
-                  if(tokens.length===1){
-                    return done(null,tokens[0],null,expiresIn)
-                  }
-                  if(tokens.length===2){
-                    return done(null,tokens[0],tokens[1],expiresIn)
-                  }
-                  throw new Error("Error exchanging auth code for tokens'")
-                  
-             })
-  }
-  catch(err){
-    return done(null,false)
-  }
-
-}));
-
-/**
- * Exchange user id and password for access tokens.
- *
- * The callback accepts the `client`, which is exchanging the user's name and password
- * from the token request for verification. If these values are validated, the
- * application issues an access token on behalf of the user who authorized the code.
- */
-server.exchange(exchange.password((client, username, password, scope, done) => {
-  console.log("object 4")
-  console.log(client)
-  const userRepository=getCustomRepository(UserRepository)
-  userRepository.findByUsername(username)
-  .then(user => validate.user(user, password))
-  .then(user => validate.generateTokens({ scope, userID: user.ID, clientID: client.clientID }))
-  .then((tokens) => {
-    if (tokens === false) {
-      return done(null, false);
-    }
-    if (tokens.length === 1) {
-      return done(null, tokens[0], null, expiresIn);
-    }
-    if (tokens.length === 2) {
-      return done(null, tokens[0], tokens[1], expiresIn);
-    }
-    throw new Error('Error exchanging password for tokens');
-  })
-  .catch(() => done(null, false));
-}));
-
-/**
- * Exchange the client id and password/secret for an access token.
- *
- * The callback accepts the `client`, which is exchanging the client's id and
- * password/secret from the token request for verification. If these values are validated, the
- * application issues an access token on behalf of the client who authorized the code.
- */
-server.exchange(exchange.clientCredentials((client, scope, done) => {
-  console.log("object 6")
-  const token      =util.creatToken (util.token.expiresIn,client.id);
-  const expiration = util.token.calculateExpirationDate();
- // console.log(client)
-  // Pass in a null for user id since there is no user when using this grant type
-  // acce.save(token, expiration, null, client.id, scope)
-  // .then(() => done(null, token, null, expiresIn))
-  // .catch(err => done(err));
-
-try {
-
-  const accessTokenRepository=getCustomRepository(AccessTokenOauth2Repository)
-  const accessTokenObject=accessTokenRepository.create()
-        accessTokenObject.token=token
-        accessTokenObject.expirationDate=expiration
-        accessTokenObject.userId=null,
-        accessTokenObject.clientID=client.clientID
-        accessTokenObject.scope=scope[0]
-
-        accessTokenRepository.save(accessTokenObject)
-
-        return done(null,token,null,expiresIn)
-} catch (error) {
-  return done(error)
-}
-
-
-}));
-
-/**
- * Exchange the refresh token for an access token.
- *
- * The callback accepts the `client`, which is exchanging the client's id from the token
- * request for verification.  If this value is validated, the application issues an access
- * token on behalf of the client who authorized the code
- */
-server.exchange(exchange.refreshToken((client, refreshToken, scope, done) => {
- // console.log("server exchange refresh token")
-  const refreshTokenRepository=getCustomRepository(RefreshTokenOauth2Repository)
-  refreshTokenRepository.findByToken(refreshToken)
-  .then(foundRefreshToken => validate.refreshToken(foundRefreshToken, refreshToken, client))
-  .then(foundRefreshToken => validate.generateToken(foundRefreshToken))
-  .then(token => done(null, token, null, expiresIn))
-  .catch(() => done(null, false));          
-}));
-
-export const authorization = [
-  ensureLoggedIn(),
-  server.authorization(
-    (clientID, redirectURI, done) => {
-  //    console.log("authorization")
-   const clientRepository=getCustomRepository(ClientOAuth2Repository)
-    clientRepository.findOneByClientId(clientID)
-    .then((client) => {
-      // if (client) {
-      //   client.scope = scope; // eslint-disable-line no-param-reassign
-      // }
-      // WARNING: For security purposes, it is highly advisable to check that
-      //          redirectURI provided by the client matches one registered with
-      //          the server.  For simplicity, this example does not.  You have
-      //          been warned.
-      return done(null, client, redirectURI);
-    })
-    .catch(err => done(err));
-  }
-  ), (req, res, next) => {
-    // Render the decision dialog if the client isn't a trusted client
-    // TODO:  Make a mechanism so that if this isn't a trusted client, the user can record that
-    // they have consented but also make a mechanism so that if the user revokes access to any of
-    // the clients then they will have to re-consent.
-    const clientRepository=getCustomRepository(ClientOAuth2Repository)
-    clientRepository.findOneByClientId(req.query.client_id)
-    .then((client) => {
-      if (client != null && client.trustedClient && client.trustedClient === true) {
-        // This is how we short call the decision like the dialog below does
-        server.decision((serverReq, callback) => {
-          callback(null, { allow: true });
-        })(req, res, next);
-      } else {
-        res.render('dialog', { transactionID: req.oauth2.transactionID, user: req.user, client: req.oauth2.client });
-      }
-    })
-    .catch(() =>
-      res.render('dialog', { transactionID: req.oauth2.transactionID, user: req.user, client: req.oauth2.client }));
-
-    }
-  ];
-
-export const decision = [
-  ensureLoggedIn(),
-  server.decision(),
-];
-
-
-
-export const token = [
-  authenticate(['basic', 'oauth2-client-password'], { session: false }),
-  server.token(),
-  server.errorHandler(),
-];
-
-// Register serialialization and deserialization functions.
-//
-// When a client redirects a user to user authorization endpoint, an
-// authorization transaction is initiated.  To complete the transaction, the
-// user must authenticate and approve the authorization request.  Because this
-// may involve multiple HTTPS request/response exchanges, the transaction is
-// stored in the session.
-//
-// An application must supply serialization functions, which determine how the
-// client object is serialized into the session.  Typically this will be a
-// simple matter of serializing the client's ID, and deserializing by finding
-// the client by ID from the database.
-
-server.serializeClient((client, done) => done(null, client.id));
-
-server.deserializeClient((id, done) => {
-  const clientRepository=getCustomRepository(ClientOAuth2Repository)
-  clientRepository.findOneByClientId(id)
-  .then(client => done(null, client))
-  .catch(err => done(err));
-});
-
diff --git a/lib/authorization/token.ts b/lib/authorization/token.ts
deleted file mode 100644
index 1ec8ffc..0000000
--- a/lib/authorization/token.ts
+++ /dev/null
@@ -1,108 +0,0 @@
-/**
- * @author Rina Chen
- */
-import Validate from './validate';
-import { getCustomRepository } from 'typeorm';
-import { AccessTokenOauth2Repository, ClientOAuth2Repository, RefreshTokenOauth2Repository } from '../orm/repository/Oauth2Repository';
-'use strict';
-
-const validate=new Validate()
-export class Token{
-
-  /**
- * This endpoint is for verifying a token.  This has the same signature to
- * Google's token verification system from:
- * https://developers.google.com/accounts/docs/OAuth2UserAgent#validatetoken
- *
- * You call it like so
- * https://localhost:3000/api/tokeninfo?access_token=someToken
- *
- * If the token is valid you get returned
- * {
- *   "audience": someClientId
- * }
- *
- * If the token is not valid you get a 400 Status and this returned
- * {
- *   "error": "invalid_token"
- * }
- * @param   {Object}  req - The request
- * @param   {Object}  res - The response
- * @returns {Promise} Returns the promise for testing only
- */
-info(req: any, res: any): Promise<any>{
-
-  const accessTokenRepo=getCustomRepository(AccessTokenOauth2Repository)
-  const clientRepo=getCustomRepository(ClientOAuth2Repository)
-  return  validate.tokenForHttp(req.query.access_token)
-  .then(() => accessTokenRepo.findByToken(req.query.access_token))
-  .then(token => validate.tokenExistsForHttp(token))
-  .then(token =>clientRepo.findOneByClientId(token.clientId)
-  .then(client => validate.clientExistsForHttp(client))
-  .then(client => ({ client, token })))
-  .then(({ client, token }) => {
-    const expirationLeft = Math.floor((token.expirationDate.getTime() - Date.now()) / 1000);
-    res.json({ audience : client.clientId, expires_in : expirationLeft });
-  })
-  .catch((err) => {
-    res.status(err.status);
-    res.json({ error: err.message });
-  });
-
-}
- 
-
-/**
- * This endpoint is for revoking a token.  This has the same signature to
- * Google's token revocation system from:
- * https://developers.google.com/identity/protocols/OAuth2WebServer
- *
- * You call it like so
- * https://localhost:3000/api/revoke?token=someToken
- *
- * If the token is valid you get returned a 200 and an empty object
- * {}
- *
- * If the token is not valid you get a 400 Status and this returned
- * {
- *   "error": "invalid_token"
- * }
- * This will first try to delete the token as an access token.  If one is not found it will try and
- * delete the token as a refresh token.  If both fail then an error is returned.
- * @param   {Object}  req - The request
- * @param   {Object}  res - The response
- * @returns {Promise} Returns the promise for testing
- */
-revoke (req: any, res: any): Promise<any>{
-  
-  const accessTokenRepo=getCustomRepository(AccessTokenOauth2Repository)
-  const refreshTokenRepo=getCustomRepository(RefreshTokenOauth2Repository)
-try {
-  const tokenForHttp=validate.tokenForHttp(req.query.token)
-        .then(() => accessTokenRepo.deleteByToken(req.query.token))
-        .then((token) => {
-              if (token == null) {
-                   return refreshTokenRepo.deleteByToken(req.query.token);
-              }
-             return token;
-          })
-        .then(tokenDeleted => validate.tokenExistsForHttp(tokenDeleted))
-        .then(() => {
-              res.json({token:"you called invoke token method"});
-        })
-        .catch((err) => {
-            res.status(err.status);
-            res.json({ error: err.message });
-        });
-  return tokenForHttp
-
-} catch (error) {
-  console.log(""+error)
-}
-   
-
-}
-
-}
-
- 
\ No newline at end of file
diff --git a/lib/authorization/utils.ts b/lib/authorization/utils.ts
deleted file mode 100644
index 4f30342..0000000
--- a/lib/authorization/utils.ts
+++ /dev/null
@@ -1,117 +0,0 @@
-import *  as uuid from 'uuid/v4';
-import jwt = require('jsonwebtoken');
-import fs = require('fs');
-/** Private certificate used for signing JSON WebTokens */
-// const privateKey = fs.readFileSync(path.join(__dirname, 'certs/privatekey.pem'));
-
-/** Public certificate used for verification.  Note: you could also use the private key */
-// const publicKey = fs.readFileSync(path.join(__dirname, 'certs/certificate.pem'));
-
-/** Private certificate used for signing JSON WebTokens */
-// const privateKey = fs.readFileSync('certs/privatekey.pem');
-
-// /** Public certificate used for verification.  Note: you could also use the private key */
-// const publicKey = fs.readFileSync('certs/publicKey.pem');
-
-const privateKey = fs.readFileSync(__dirname+'/certs/privateKey.pem');
-const publicKey = fs.readFileSync(__dirname+'/certs/publicKey.pem');
-
-export class Utils{
-
-/**
- * Creates a signed JSON WebToken and returns it.  Utilizes the private certificate to create
- * the signed JWT.  For more options and other things you can change this to, please see:
- * https://github.com/auth0/node-jsonwebtoken
- *
- * @param  {Number} exp - The number of seconds for this token to expire.  By default it will be 60
- *                        minutes (3600 seconds) if nothing is passed in.
- * @param  {String} sub - The subject or identity of the token. //userID
- * @return {String} The JWT Token
- */
-
-  creatToken(exp:number=3600,sub:String=""):any{
-   // console.log("create Token 1"+exp+" "+sub)
-    try {
-      const newJWT=jwt.sign({
-        jti : uuid(),
-        sub,
-        exp : Math.floor(Date.now() / 1000) + exp,
-      }, privateKey, {
-        algorithm: 'RS256',
-      });
-
-     // console.log("create Token 2 "+newJWT)
-      return newJWT
-    } catch (error) {
-      console.log(error)
-    }
-
-    
-    return null
-    
-  }
-
-  /**
- * Verifies the token through the jwt library using the public certificate.
- * @param   {String} token - The token to verify
- * @throws  {Error} Error if the token could not be verified
- * @returns {Object} The token decoded and verified
- */
-// exports.verifyToken = token => jwt.verify(token, publicKey);
-  verifyToken(token: any): any{
-    //console.log("verify_token");
-   // console.log(token)
-
-    return jwt.verify(token,publicKey)
-  }
- 
-  /**
- * Configuration of access tokens.
- *
- * expiresIn               - The time in minutes before the access token expires. Default is 1 mn
- * calculateExpirationDate - A simple function to calculate the absolute time that the token is
- *                           going to expire in.
- */
- token = {
-     expiresIn               : 60,// 5 second  // 60 second
-    calculateExpirationDate : () => new Date(Date.now() + (this.token.expiresIn * 1000)),
- };
-
- /**
- * Configuration of code token.
- * expiresIn - The time in minutes before the code token expires.  Default is 5 minutes.
- */
-codeToken = {
-  expiresIn : 5 * 60,
-};
-
-/**
- * Configuration of refresh token.
- * expiresIn - The time in minutes before the code token expires.  Default is 8 (28800Sec) hour.  Most if
- *             all refresh tokens are expected to not expire.  However, I give it a very long shelf
- *             life instead.
- * expiresIn as second
- */
- 
-  refreshToken = {
-    expiresIn : 3600 * 8,
-  };
-  
-//  refreshToken = {
-//   expiresIn : 60 ,
-// };
-
-  db = {
-    timeToCheckExpiredTokens : 3600,
-  };
-
-session = {
-  maxAge : 3600000 * 24 * 7 * 52,
-  secret : 'A Secret That Should Be Changed', // TODO: You need to change this secret to something that you choose for your secret
-};
-
-
-
-
-}
-
diff --git a/lib/authorization/validate.ts b/lib/authorization/validate.ts
deleted file mode 100644
index 3f63946..0000000
--- a/lib/authorization/validate.ts
+++ /dev/null
@@ -1,334 +0,0 @@
-'use strict';
-
-
-import { env } from 'process';
-import { getCustomRepository } from 'typeorm';
-import { User } from '../orm/entity/user';
-import { ClietnOuath2 } from '../orm/entity/client.oauth2.entity';
-import { Utils } from './utils';
-import { UserRepository } from '../orm/repository/user.repository';
-import { RefreshTokenOauth2Repository, ClientOAuth2Repository } from '../orm/repository/Oauth2Repository';
-import { AccessTokenOauth2Repository } from '../orm/repository/Oauth2Repository';
-import { RefreshTokenOauth2 } from '../orm/entity/RefreshTokens.oauth2.entity';
-
-/** Validate object to attach all functions to  */
-// const validate = Object.create(null);
-
-/** Suppress tracing for things like unit testing */
-const suppressTrace = env.OAUTHRECIPES_SURPRESS_TRACE === 'true';
-
-const util=new Utils();
-//(())
-
-export default class Validate{
-/**
- * Log the message and throw it as an Error
- * @param   {String} msg - Message to log and throw
- * @throws  {Error}  The given message as an error
- * @returns {undefined}
- */
-  logAndThrow(msg: string):void{
-      if (!suppressTrace) {
-      console.trace(msg);
-    }
-      throw new Error(msg);
-    };
-
-    /**
- * Given a user and a password this will return the user if it exists and the password matches,
- * otherwise this will throw an error
- * @param   {Object} user     - The user profile
- * @param   {String} password - The user's password
- * @throws  {Error}  If the user does not exist or the password does not match
- * @returns {Object} The user if valid
- */
-user(user: User, password: string): User{
- // console.log(" "+user.userName)
-  this.userExists(user);
-//  console.log(user.password)
-//  console.log(password)
-  if (user.password !== password) {
-    this.logAndThrow('User password does not match');
-  }
-    return user;
-  };
-
-/**
- * Given a user this will return the user if it exists otherwise this will throw an error
- * @param   {Object} user - The user profile
- * @throws  {Error}  If the user does not exist or the password does not match
- * @returns {Object} The user if valid
- */
-userExists(user: object): object {
-  if (user == null) {
-    this.logAndThrow('User does not exist');
-  }
-  return user;
-};
-
-/**
- * Given a client and a client secret this return the client if it exists and its clientSecret
- * matches, otherwise this will throw an error
- * @param   {Object} client       - The client profile
- * @param   {String} clientSecret - The client's secret
- * @throws  {Error}  If the client or the client secret does not match
- * @returns {Object} The client if valid
- */
-client(client: ClietnOuath2, clientSecret: string): object{
-  this.clientExists(client);
-  if (client.clientSecret !== clientSecret) {
-    this.logAndThrow('Client secret does not match');
-  }
-  return client;
-};
-
-/**
- * Given a client this will return the client if it exists , otherwise this will throw an error
- * @param   {Object} client - The client profile
- * @throws  {Error}  If the client does not exist
- * @returns {Object} The client if valid
- */
-clientExists(client: ClietnOuath2): ClietnOuath2 {
-  if (client == null) {
-    this.logAndThrow('Client does not exist');
-  }
-  return client;
-};
-
-/**
- * 
- * Given a token and accessToken this will return either the user or the client associated with
- * the token if valid.  Otherwise this will throw.
- * @param   {Object}  token       - The token
- * @param   {O bject}  accessToken - The access token
- * @throws  {Error}   If the token is not valid
- * @returns {Promise} Resolved with the user or client associated with the token if valid
- * @Sample http://localhost:3002/User/getListUsers?access_token=
- */
-async  token(token: any, accessToken: any): Promise<any> {
-  //console.log("validate_access_token")
- // console.log(accessToken)
-  util.verifyToken(accessToken);
-  // token is a user token
-  // token is a client token
-
-  // return clients.find(token.clientID)
-  // .then(client => validate.clientExists(client))
-  // .then(client => client);
-
-   if(token.userID != null){
-    const userRepository=getCustomRepository(UserRepository)
-        //const userObject= await userRepository.findById(token.userID );
-      return userRepository.findUserByID(token.userID)
-             .then(userObject=>this.userExists(userObject.body[0]))
-             .then(userObjectExist=>userObjectExist)
-   }
-
-   return getCustomRepository(ClientOAuth2Repository).findOneByClientId(token.clientID)
-          .then(clientObject=>this.clientExists(clientObject))
-          .then(clientExist=>clientExist)
-
-
-};
-
-  /**
- * Given a refresh token and client this will return the refresh token if it exists and the client
- * id's match otherwise this will throw an error
- * throw an error
- * @param   {Object} token        - The token record from the DB
- * @param   {Object} refreshToken - The raw refresh token
- * @param   {Object} client       - The client profile
- * @throws  {Error}  If the refresh token does not exist or the client id's don't match
- * @returns {Object} The refresh token if valid
- */
- refreshToken(token: any, refreshToken: String, client: ClietnOuath2): object {
-   //console.log("Refresh_Token")
-   //console.log(token)
-   //console.log(token.userID)
-   getCustomRepository(AccessTokenOauth2Repository).updateActiveTokenByUserID(token.userID)
-  util.verifyToken(refreshToken);
-  
-  if (client.clientID !== token.clientID) {
-    this.logAndThrow('RefreshToken clientID does not match client id given');
-  }
-  return token;
-};
-
-/**
- * Given a auth code, client, and redirectURI this will return the auth code if it exists and is
- * not 0, the client id matches it, and the redirectURI matches it, otherwise this will throw an
- * error.
- * @param  {Object}  code        - The auth code record from the DB
- * @param  {Object}  authCode    - The raw auth code
- * @param  {Object}  client      - The client profile
- * @param  {Object}  redirectURI - The redirectURI to check against
- * @throws {Error}   If the auth code does not exist or is zero or does not match the client or
- *                   the redirectURI
- * @returns {Object} The auth code token if valid
- */
-authCode(code: any, authCode: any, client: ClietnOuath2, redirectURI: any): any {
-  util.verifyToken(code);
-  if (client.clientID !== authCode.clientID) {
-    this.logAndThrow('AuthCode clientID does not match client id given');
-  }
-  if (redirectURI !== authCode.redirectURI) {
-    this.logAndThrow('AuthCode redirectURI does not match redirectURI given');
-  }
-  return authCode;
-};
-
-/**
- * I mimic openid connect's offline scope to determine if we send a refresh token or not
- * @param   {Array}   scope - The scope to check if is a refresh token if it has 'offline_access'
- * @returns {Boolean} true If the scope is offline_access, otherwise false
- */
- isRefreshToken = (scope : Array<any>): boolean => scope != null && scope.indexOf('offline_access') === 0;
-
- /**
- * Given a userId, clientID, and scope this will generate a refresh token, save it, and return it
- * @param   {Object}  userId   - The user profile
- * @throws  {Object}  clientID - the client profile
- * @throws  {Object}  scope    - the scope
- * @returns {Promise} The resolved refresh token after saved
- */
-async generateRefreshToken(refreshToken:RefreshTokenOauth2): Promise<any> {
-  // const refreshToken = util.createToken({ sub : userId, exp : _refreshToken.expiresIn });
-  // return refreshTokens.save(refreshToken, userId, clientID, scope)
-  // .then(() => refreshToken);
-
-//console.log("genertateRefreshToken 1")
-//console.log(util.refreshToken.expiresIn)
- try {
-    
-    const createRefreshToken= util.creatToken(
-          util.refreshToken.expiresIn,
-          ""+refreshToken.userID);
-
-    const refreshTokenRepository=getCustomRepository(RefreshTokenOauth2Repository)
-    const refreshObject = refreshTokenRepository.create()
-          refreshObject.clientID=refreshToken.clientID,
-          refreshObject.userID=refreshToken.userID,
-          refreshObject.scope=refreshToken.scope
-          refreshObject.token=createRefreshToken
-
-    await refreshTokenRepository.saveToken(refreshObject);
-    return createRefreshToken               
- } catch (error) {
-   console.log(error)
-
- }                    
-};
-
-/**
- * Given an auth code this will generate a access token, save that token and then return it.
- * @param   {userID}   userID   - The user profile
- * @param   {clientID} clientID - The client profile
- * @param   {scope}    scope    - The scope
- * @returns {Promise}  The resolved refresh token after saved
- */
-async generateToken ({ userID, clientID, scope }:any): Promise<any> {
-  // const token      = createToken({ sub : userID, exp : _token.expiresIn });
-  // const expiration = _token.calculateExpirationDate();
-  // return accessTokens.save(token, expiration, userID, clientID, scope)
-  // .then(() => token);
-
-  //console.log("generate_access_token_in_validate")
-  //console.log(userID)
-   try {
-    const accessTokenRepository=getCustomRepository(AccessTokenOauth2Repository)
-    const expiration= util.token.calculateExpirationDate()
-    const token=util.creatToken(util.token.expiresIn,userID)
-  //  console.log("generateAccessToken "+token)
-
-    const accessObject=accessTokenRepository.create()
-          accessObject.token=token;
-          accessObject.expirationDate=expiration
-          accessObject.userId=userID
-          accessObject.clientID=clientID
-          accessObject.scope=scope
-
-
-    
-       await   accessTokenRepository.saveToken(accessObject)
-       return token;
-   } catch (error) {
-     console.log(error)
-      return null; 
-   }
-
-};
-
-/**
- * Given an auth code this will generate a access and refresh token, save both of those and return
- * them if the auth code indicates to return both.  Otherwise only an access token will be returned.
- * @param   {Object}  authCode - The auth code
- * @throws  {Error}   If the auth code does not exist or is zero
- * @returns {Promise} The resolved refresh and access tokens as an array
- */
-generateTokens(authCode: any): Promise<any> {
-// console.log(authCode)
-  if (this.isRefreshToken(authCode.scope)) {
-    
-    return Promise.all([
-      this.generateToken(authCode),
-      this.generateRefreshToken(authCode),
-    ]);
-  }
-  return Promise.all([this.generateToken(authCode)]);
-};
-
-/**
- * Given a token this will resolve a promise with the token if it is not null and the expiration
- * date has not been exceeded.  Otherwise this will throw a HTTP error.
- * @param   {Object}  token - The token to check
- * @returns {Promise} Resolved with the token if it is a valid token otherwise rejected with error
- */
-tokenForHttp = (token: any): Promise<any> =>
-  new Promise((resolve, reject) => {
-    try {
-      util.verifyToken(token);
-    } catch (err) {
-      const error:any  = new Error('invalid_token');
-      error.status = 400;
-      reject(error);
-      console.log("tokenForHttp")
-      console.log(err)
-    }
-    resolve(token);
-  });
-
-  /**
- * Given a token this will return the token if it is not null. Otherwise this will throw a
- * HTTP error.
- * @param   {Object} token - The token to check
- * @throws  {Error}  If the client is null
- * @returns {Object} The client if it is a valid client
- */
-tokenExistsForHttp(token: any): any {
-  if (token == null) {
-    let error:any;
-    error= new Error('invalid_token');
-    error.status = 400;
-    throw error;
-  }
-  return token;
-};
-
-/**
- * Given a client this will return the client if it is not null. Otherwise this will throw a
- * HTTP error.
- * @param   {Object} client - The client to check
- * @throws  {Error}  If the client is null
- * @returns {Object} The client if it is a valid client
- */
-clientExistsForHttp(client: any): any{
-  if (client == null) {
-    let error:any  = new Error('invalid_token');
-    error.status = 400;
-    throw error;
-  }
-  return client;
-};
-
-}
-
diff --git a/lib/controller/base.controller.ts b/lib/controller/base.controller.ts
index 9103ee9..15b24fd 100644
--- a/lib/controller/base.controller.ts
+++ b/lib/controller/base.controller.ts
@@ -1,8 +1,16 @@
+let middleware = require('../authorization/AuthorizationServer');
 export class baseController{
+    mddileWare = middleware
    bearer="bearer"
    controllerName
    public status_code:Status   
    public data:any
+
+    // role 
+    roles_all = "all"
+    role_admin="admin"  
+    role_operation = "operation"
+
 }
 
 export enum Status {
diff --git a/lib/controller/booking.controller.ts b/lib/controller/booking.controller.ts
index 794dc03..772679d 100644
--- a/lib/controller/booking.controller.ts
+++ b/lib/controller/booking.controller.ts
@@ -1,179 +1,194 @@
-import { Request, Response} from "express";
+import { Request, Response } from "express";
 import { baseController } from './base.controller';
 import { getCustomRepository } from 'typeorm';
-import passport = require('passport');
-import * as oauth2 from 'authorization/oauth2';
 import { BookingRepository } from '../orm/repository/booking.repository';
 import { Port } from '../orm/entity/port.entity';
 
 
 
-export class BookingController extends baseController{
-  
-    constructor(){
-        super()
-        this.controllerName="/Booking/"
-    }
+export class BookingController extends baseController {
 
+  constructor() {
+    super()
+    this.controllerName = "/Booking/"
+  }
 
-    /**
-    * @method saveBooking
-    * @param app 
-    */
-   public saveBooking(app):void{
+
+  /**
+  * @method saveBooking
+  * @param app 
+  */
+  public saveBooking(app): void {
+    app
+      .post(this.controllerName + "saveBooking",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let booking = req.body
+          getCustomRepository(BookingRepository).saveBooking(booking).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
+
+  /**
+   * @method updateBookingStatus
+   * @param app 
+   */
+  public updateBookingStatus(app): void {
     app
-    .post(this.controllerName+"saveBooking",
-     //   passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        let booking = req.body
-        getCustomRepository(BookingRepository).saveBooking(booking).then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
-
-   /**
-    * @method updateBookingStatus
-    * @param app 
-    */
-   public updateBookingStatus(app):void{
+      .post(this.controllerName + "updateBookingStatus",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let bookingID = req.body.bookingID
+          let statusID = req.body.statusID
+          getCustomRepository(BookingRepository).updateBookingStatus(bookingID, statusID).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
+
+  /**
+  * @method getListBookings
+  * @param app 
+  */
+  public getListBookings(app): void {
     app
-    .post(this.controllerName+"updateBookingStatus",
-     //   passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        let bookingID = req.body.bookingID
-        let statusID = req.body.statusID
-        getCustomRepository(BookingRepository).updateBookingStatus(bookingID,statusID).then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
-
-    /**
-    * @method getListBookings
-    * @param app 
-    */
-   public getListBookings(app):void{
+      .post(this.controllerName + "getListBookings",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let pageIndex = req.body.pageIndex
+          let pageSize = req.body.pageSize
+          let bookingStatusID = req.body.bookingStatusID
+          let fromDate = req.body.fromDate
+          let toDate = req.body.toDate
+          let userID = req.body.userID
+          let groupID = req.body.groupID
+          let isViewAll = req.body.isViewAll
+          getCustomRepository(BookingRepository).getListBookings(pageIndex, pageSize, bookingStatusID, fromDate, toDate, userID, groupID, isViewAll)
+            .then(
+              qb => { res.send(qb) }
+            )
+        })
+  }
+
+  getBookingByCKSNNo(app): void {
     app
-    .post(this.controllerName+"getListBookings",
-      //   passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-              let pageIndex = req.body.pageIndex
-              let pageSize = req.body.pageSize
-              let bookingStatusID = req.body.bookingStatusID
-              let fromDate = req.body.fromDate
-              let toDate = req.body.toDate
-              let userID = req.body.userID
-              let groupID = req.body.groupID
-              let isViewAll = req.body.isViewAll
-              getCustomRepository(BookingRepository).getListBookings(pageIndex,pageSize,bookingStatusID,fromDate,toDate,userID,groupID,isViewAll)
-                .then(
-                     qb =>{res.send(qb)}
-                ) 
-     })
-   }
-
-   getBookingByCKSNNo(app):void{
+      .post(this.controllerName + "getBookingByCKSNNo",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let CKSNFile = req.body.CKSNFile
+          let operationID = req.body.userID
+          let groupID = req.body.groupID
+          getCustomRepository(BookingRepository).getBookingByCKSNNo(CKSNFile, operationID, groupID)
+            .then(
+              qb => { res.send(qb) }
+            )
+        })
+  }
+
+  /**
+   * @method getCountBookings
+   * @param app 
+   */
+  public getCountBookings(app): void {
     app
-    .post(this.controllerName+"getBookingByCKSNNo",
-      //   passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-              let CKSNFile = req.body.CKSNFile
-              let operationID = req.body.userID
-              let groupID = req.body.groupID
-             getCustomRepository(BookingRepository).getBookingByCKSNNo(CKSNFile, operationID, groupID)
-                .then(
-                     qb =>{res.send(qb)}
-                ) 
-     })
-   }
-
-   /**
-    * @method getCountBookings
-    * @param app 
-    */
-   public getCountBookings(app):void{
+      .post(this.controllerName + "getCountBookings",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let bookingStatusID = req.body.bookingStatusID
+          let userID = req.body.userID
+          let groupID = req.body.groupID
+          let fromDate = req.body.fromDate
+          let toDate = req.body.toDate
+          let isViewAll = req.body.isViewAll
+          getCustomRepository(BookingRepository).getCountBookings(bookingStatusID, userID, groupID, fromDate, toDate, isViewAll).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
+
+  //    /**
+  //     * @method getGenerateCKSNCode
+  //     * @param app 
+  //     */
+  //    public getGenerateCKSNCode(app):void{
+  //     app
+  //     .post(this.controllerName+"getGenerateCKSNCode",
+  //         (req: Request, res: Response) => {  
+
+  //         let   ext = req.body.ext
+
+  //         getCustomRepository(BookingRepository).getGenerateCKSNCode(ext).then(
+  //             qb =>{res.send(qb)}
+  //         ) 
+  //      })
+  //    }
+
+
+  /**
+   * @method remove booking
+   */
+  removeBooking(app): void {
     app
-    .post(this.controllerName+"getCountBookings",
-     //   passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        let bookingStatusID = req.body.bookingStatusID
-        let userID = req.body.userID
-        let groupID = req.body.groupID
-        let fromDate = req.body.fromDate
-        let toDate = req.body.toDate
-        let isViewAll = req.body.isViewAll
-        getCustomRepository(BookingRepository).getCountBookings(bookingStatusID,userID,groupID,fromDate,toDate,isViewAll).then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
-
-//    /**
-//     * @method getGenerateCKSNCode
-//     * @param app 
-//     */
-//    public getGenerateCKSNCode(app):void{
-//     app
-//     .post(this.controllerName+"getGenerateCKSNCode",
-//         (req: Request, res: Response) => {  
-         
-//         let   ext = req.body.ext
-
-//         getCustomRepository(BookingRepository).getGenerateCKSNCode(ext).then(
-//             qb =>{res.send(qb)}
-//         ) 
-//      })
-//    }
-
-
-    /**
-     * @method remove booking
-     */
-    removeBooking(app):void{
-        app
-        .post(this.controllerName+"removeBooking",
-          //  passport.authenticate('bearer', { session: false }),
-            (req: Request, res: Response) => {  
-          
-            let bookingID = req.body.bookingID
-            let userID = req.body.userID
-            getCustomRepository(BookingRepository).removeBooking(bookingID).then(
-                qb =>{res.send(qb)}
-            ) 
-         })
-    }
-
-
-    /**
-    * @method getBookingsByID
-    * @param app 
-    */
-   public getBookingByID(app):void{
+      .post(this.controllerName + "removeBooking",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+
+          let bookingID = req.body.bookingID
+          let userID = req.body.userID
+          getCustomRepository(BookingRepository).removeBooking(bookingID).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
+
+
+  /**
+  * @method getBookingsByID
+  * @param app 
+  */
+  public getBookingByID(app): void {
     app
-    .post(this.controllerName+"getBookingByID",
-   //    passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        let bookingID = req.body.bookingID
-        getCustomRepository(BookingRepository).getBookingByID(bookingID).then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
-
-     /**
-    * @method getBookingsByID
-    * @param app 
-    */
-   public getBookingsReport(app):void{
+      .post(this.controllerName + "getBookingByID",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let bookingID = req.body.bookingID
+          getCustomRepository(BookingRepository).getBookingByID(bookingID).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
+
+  /**
+ * @method getBookingsByID
+ * @param app 
+ */
+  public getBookingsReport(app): void {
     app
-    .post(this.controllerName+"getBookingsReport",
-        (req: Request, res: Response) => {  
-        let filterModel = req.body as FilterReportModel
-        getCustomRepository(BookingRepository).getBookingsReport(filterModel).then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
+      .post(this.controllerName + "getBookingsReport",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let filterModel = req.body as FilterReportModel
+          getCustomRepository(BookingRepository).getBookingsReport(filterModel).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
 
 }
\ No newline at end of file
diff --git a/lib/controller/broker.controller.ts b/lib/controller/broker.controller.ts
index 314d400..d452946 100644
--- a/lib/controller/broker.controller.ts
+++ b/lib/controller/broker.controller.ts
@@ -1,29 +1,30 @@
-import { Request, Response} from "express";
+import { Request, Response } from "express";
 import { baseController } from './base.controller';
 import { getCustomRepository } from 'typeorm';
-import passport = require('passport');
 import { BrokerRepository } from '../orm/repository/broker.repostiory';
 
-export class BrokerController extends baseController{
-  
-    constructor(){
-        super()
-        this.controllerName="/Broker/"
-    }
+export class BrokerController extends baseController {
 
-   /**
-    * @method getListBroker
-    * @param app 
-    */
-   public getAllBrokers(app):void{
+  constructor() {
+    super()
+    this.controllerName = "/Broker/"
+  }
+
+  /**
+   * @method getListBroker
+   * @param app 
+   */
+  public getAllBrokers(app): void {
     app
-    .post(this.controllerName+"getAllBrokers",
-      //   passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        getCustomRepository(BrokerRepository).getAllBrokers().then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
+      .post(this.controllerName + "getAllBrokers",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          getCustomRepository(BrokerRepository).getAllBrokers().then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
 
 }
\ No newline at end of file
diff --git a/lib/controller/business.controller.ts b/lib/controller/business.controller.ts
index 1f7673d..c375ca7 100644
--- a/lib/controller/business.controller.ts
+++ b/lib/controller/business.controller.ts
@@ -1,105 +1,116 @@
 import { baseController } from './base.controller';
-import { Request, Response} from "express";
+import { Request, Response } from "express";
 import { getCustomRepository } from 'typeorm';
-import passport = require('passport');
 import { BusinessPartnerRepository } from '../orm/repository/business.repository';
 
-export class BusinessPartnerController extends baseController{
+export class BusinessPartnerController extends baseController {
 
-    constructor(){
-        super()
-        this.controllerName="/Business/"
-    }
-   /**
-    * @method getAllBusinessPartners
-    * @param app s
-    */
-   public getAllBusinessPartners(app):void{
+  constructor() {
+    super()
+    this.controllerName = "/Business/"
+  }
+  /**
+   * @method getAllBusinessPartners
+   * @param app s
+   */
+  public getAllBusinessPartners(app): void {
     app
-    .post(this.controllerName+"getAllBusinessPartners",
-      // passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        getCustomRepository(BusinessPartnerRepository).getAllBusinessPartners().then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
+      .post(this.controllerName + "getAllBusinessPartners",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          getCustomRepository(BusinessPartnerRepository).getAllBusinessPartners().then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
 
 
-   /**
-    * 
-    */
-   getCountBusinessPartner(app){
+  /**
+   * 
+   */
+  getCountBusinessPartner(app) {
     app
-    .post(this.controllerName+"getCountBusinessPartner",
-       // passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        getCustomRepository(BusinessPartnerRepository).getCountBusinessPartner().then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
+      .post(this.controllerName + "getCountBusinessPartner",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          getCustomRepository(BusinessPartnerRepository).getCountBusinessPartner().then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
 
-   /**
-    * 
-    */
-   getListBusinessPartner(app){
+  /**
+   * 
+   */
+  getListBusinessPartner(app) {
     app
-    .post(this.controllerName+"getListBusinessPartner",
-      //  passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-            let pageIndex = req.body.pageIndex
-            let pageSize = req.body.pageSize
-        getCustomRepository(BusinessPartnerRepository).getListBusinessPartner(pageIndex,pageSize).then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
-   
-   /**
-    * 
-    */
-   getBusinessPartnerByID(app){
+      .post(this.controllerName + "getListBusinessPartner",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let pageIndex = req.body.pageIndex
+          let pageSize = req.body.pageSize
+          getCustomRepository(BusinessPartnerRepository).getListBusinessPartner(pageIndex, pageSize).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
+
+  /**
+   * 
+   */
+  getBusinessPartnerByID(app) {
     app
-    .post(this.controllerName+"getBusinessPartnerByID",
-      //  passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-            let ID = req.body.ID
-            console.log(ID)
-        getCustomRepository(BusinessPartnerRepository).getBusinessPartnerByID(ID).then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
+      .post(this.controllerName + "getBusinessPartnerByID",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let ID = req.body.ID
+          console.log(ID)
+          getCustomRepository(BusinessPartnerRepository).getBusinessPartnerByID(ID).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
 
-    /**
-    * 
-    */
-   removeBusinessPartnerByID(app){
+  /**
+  * 
+  */
+  removeBusinessPartnerByID(app) {
     app
-    .post(this.controllerName+"removeBusinessPartnerByID",
-     //   passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-            let ID = req.body.ID
-        getCustomRepository(BusinessPartnerRepository).removeBusinessPartnerByID(ID).then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
+      .post(this.controllerName + "removeBusinessPartnerByID",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let ID = req.body.ID
+          getCustomRepository(BusinessPartnerRepository).removeBusinessPartnerByID(ID).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
 
-   /**
-    * 
-    */
-   saveBusinessPartner(app){
+  /**
+   * 
+   */
+  saveBusinessPartner(app) {
     app
-    .post(this.controllerName+"saveBusinessPartner",
-     //   passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-            let biz = req.body
-        getCustomRepository(BusinessPartnerRepository).saveBusinessPartner(biz).then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
+      .post(this.controllerName + "saveBusinessPartner",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let biz = req.body
+          getCustomRepository(BusinessPartnerRepository).saveBusinessPartner(biz).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
 
 }
\ No newline at end of file
diff --git a/lib/controller/carrier.controller.ts b/lib/controller/carrier.controller.ts
index 7b97fbe..52108ef 100644
--- a/lib/controller/carrier.controller.ts
+++ b/lib/controller/carrier.controller.ts
@@ -1,8 +1,6 @@
 import { baseController } from './base.controller';
 import { Request, Response} from "express";
 import { getCustomRepository } from 'typeorm';
-import passport = require('passport');
-import * as oauth2 from 'authorization/oauth2';
 import { CarrierRepository } from '../orm/repository/carrier.repository';
 
 export class CarrierController extends baseController{
@@ -18,7 +16,9 @@ export class CarrierController extends baseController{
    public getAllCarriers(app):void{
     app
     .post(this.controllerName+"getAllCarriers",
-       // passport.authenticate('bearer', { session: false }),
+    (req, res, next) => {
+        this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+    },
         (req: Request, res: Response) => {  
         getCustomRepository(CarrierRepository).getAllCarriers().then(
             qb =>{res.send(qb)}
diff --git a/lib/controller/container.controller.ts b/lib/controller/container.controller.ts
index fb0d9a7..d7803b6 100644
--- a/lib/controller/container.controller.ts
+++ b/lib/controller/container.controller.ts
@@ -1,178 +1,194 @@
-import { Request, Response} from "express";
+import { Request, Response } from "express";
 import { baseController } from './base.controller';
 import { getCustomRepository } from 'typeorm';
-import passport = require('passport');
-import * as oauth2 from 'authorization/oauth2';
 import { ContainerRepository } from '../orm/repository/container.repository';
 import { EWOULDBLOCK } from "constants";
 
-export class ContainerController extends baseController{
-  
-    constructor(){
-        super()
-        this.controllerName="/Container/"
-    }
+export class ContainerController extends baseController {
 
+  constructor() {
+    super()
+    this.controllerName = "/Container/"
+  }
 
-    /**
-    * @method saveContainer
-    * @param app 
-    */
-   public saveContainer(app):void{
+
+  /**
+  * @method saveContainer
+  * @param app 
+  */
+  public saveContainer(app): void {
     app
-    .post(this.controllerName+"saveContainer",
-     //   passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        let container = req.body
-        getCustomRepository(ContainerRepository).saveContainer(container).then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
+      .post(this.controllerName + "saveContainer",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let container = req.body
+          getCustomRepository(ContainerRepository).saveContainer(container).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
 
-   /**
-    * @method saveTheContainer
-    * @param app 
-    */
-   public saveDataImport(app):void{
+  /**
+   * @method saveTheContainer
+   * @param app 
+   */
+  public saveDataImport(app): void {
     app
-    .post(this.controllerName+"saveDataImport",
-     //   passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        let container = req.body
-        getCustomRepository(ContainerRepository).saveDataImport(container).then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
+      .post(this.controllerName + "saveDataImport",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let container = req.body
+          getCustomRepository(ContainerRepository).saveDataImport(container).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
 
-     /**
-    * @method saveTheContainer
-    * @param app 
-    */
-      public saveTheContainer(app):void{
-        app
-        .post(this.controllerName+"saveTheContainer",
-         //   passport.authenticate('bearer', { session: false }),
-            (req: Request, res: Response) => {  
-            let container = req.body
-            getCustomRepository(ContainerRepository).saveTheContainer(container).then(
-                qb =>{res.send(qb)}
-            ) 
-         })
-       }
+  /**
+ * @method saveTheContainer
+ * @param app 
+ */
+  public saveTheContainer(app): void {
+    app
+      .post(this.controllerName + "saveTheContainer",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let container = req.body
+          getCustomRepository(ContainerRepository).saveTheContainer(container).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
 
-    /**
-    * @method getListCotainters
-    * @param app 
-    */
-   public getListCotainters(app):void{
+  /**
+  * @method getListCotainters
+  * @param app 
+  */
+  public getListCotainters(app): void {
     app
-    .post(this.controllerName+"getListCotainters",
-   //     passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        let pageIndex = req.body.pageIndex
-        let pageSize = req.body.pageSize
-        let containerStatusID = req.body.containerStatusID
-        let fromDate = req.body.fromDate
-        let toDate = req.body.toDate
-        let groupID = req.body.groupID
-        let userID = req.body.userID
-        let isViewAll = req.body.isViewAll
-        getCustomRepository(ContainerRepository).getListCotainters(pageIndex,pageSize,containerStatusID,fromDate,toDate,userID,groupID,isViewAll).then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
+      .post(this.controllerName + "getListCotainters",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let pageIndex = req.body.pageIndex
+          let pageSize = req.body.pageSize
+          let containerStatusID = req.body.containerStatusID
+          let fromDate = req.body.fromDate
+          let toDate = req.body.toDate
+          let groupID = req.body.groupID
+          let userID = req.body.userID
+          let isViewAll = req.body.isViewAll
+          getCustomRepository(ContainerRepository).getListCotainters(pageIndex, pageSize, containerStatusID, fromDate, toDate, userID, groupID, isViewAll).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
 
-   /**
-    * 
-    * @param app 
-    * @method removeContainerByID
-    */
-   removeContainerByID(app):void{
-       app
-       .post(this.controllerName+"removeContainerByID"
-       //,passport.authenticate('bearer', { session: false })
-       ,(req: Request, res: Response) => {  
-                 let containerID = req.body.containerID
-                getCustomRepository(ContainerRepository).removeContainerByID(containerID).then(
-                    qb =>{res.send(qb)}
-                 ) 
+  /**
+   * 
+   * @param app 
+   * @method removeContainerByID
+   */
+  removeContainerByID(app): void {
+    app
+      .post(this.controllerName + "removeContainerByID",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let containerID = req.body.containerID
+          getCustomRepository(ContainerRepository).removeContainerByID(containerID).then(
+            qb => { res.send(qb) }
+          )
         })
 
-   }
+  }
 
-   /**
-    * @method getContainerByID
-    * @param app 
-    */
-   public getContainerByID(app):void{
+  /**
+   * @method getContainerByID
+   * @param app 
+   */
+  public getContainerByID(app): void {
     app
-    .post(this.controllerName+"getContainerByID",
-      // passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        let containerID = req.body.containerID
-        getCustomRepository(ContainerRepository).getContainerByID(containerID).then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
+      .post(this.controllerName + "getContainerByID",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let containerID = req.body.containerID
+          getCustomRepository(ContainerRepository).getContainerByID(containerID).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
 
-   /**
-    * @method getCountBookings
-    * @param app 
-    */
-   public getCountContainers(app):void{
+  /**
+   * @method getCountBookings
+   * @param app 
+   */
+  public getCountContainers(app): void {
     app
-    .post(this.controllerName+"getCountContainers",
-      //  passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        let containerStatusID = req.body.containerStatusID
-        let groupID = req.body.groupID
-        let userID = req.body.userID
-        let fromDate = req.body.fromDate
-        let toDate = req.body.toDate
-        let isViewAll = req.body.isViewAll
-        console.log(req.body)
-        getCustomRepository(ContainerRepository).getCountContainers(containerStatusID,userID,groupID,fromDate,toDate,isViewAll).then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
+      .post(this.controllerName + "getCountContainers",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let containerStatusID = req.body.containerStatusID
+          let groupID = req.body.groupID
+          let userID = req.body.userID
+          let fromDate = req.body.fromDate
+          let toDate = req.body.toDate
+          let isViewAll = req.body.isViewAll
+          console.log(req.body)
+          getCustomRepository(ContainerRepository).getCountContainers(containerStatusID, userID, groupID, fromDate, toDate, isViewAll).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
 
-   /**
-    * @method getMultiDropByContainers
-    * @param app 
-    */
-   public getMultiDropByContainers(app):void{
+  /**
+   * @method getMultiDropByContainers
+   * @param app 
+   */
+  public getMultiDropByContainers(app): void {
     app
-    .post(this.controllerName+"getMultiDropByContainers",
-      //  passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        let containerID = req.body.containerID
-        let isActive = req.body.isActive
-        getCustomRepository(ContainerRepository).getMultiDropByContainers(containerID,isActive).then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
+      .post(this.controllerName + "getMultiDropByContainers",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let containerID = req.body.containerID
+          let isActive = req.body.isActive
+          getCustomRepository(ContainerRepository).getMultiDropByContainers(containerID, isActive).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
 
 
-    /**
-    * @method saveMultiDelivery
-    * @param app 
-    */
-   public saveMultiDelivery(app):void{
+  /**
+  * @method saveMultiDelivery
+  * @param app 
+  */
+  public saveMultiDelivery(app): void {
     app
-    .post(this.controllerName+"saveMultiDelivery",
-      //  passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        let multiDelivery = req.body
-        getCustomRepository(ContainerRepository).saveMultiDelivery(multiDelivery).then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
+      .post(this.controllerName + "saveMultiDelivery",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let multiDelivery = req.body
+          getCustomRepository(ContainerRepository).saveMultiDelivery(multiDelivery).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
 
 }
\ No newline at end of file
diff --git a/lib/controller/country.controller.ts b/lib/controller/country.controller.ts
index 6804fea..648cf91 100644
--- a/lib/controller/country.controller.ts
+++ b/lib/controller/country.controller.ts
@@ -1,29 +1,31 @@
 import { baseController } from './base.controller';
-import { Request, Response} from "express";
+import { Request, Response } from "express";
 import { getCustomRepository } from 'typeorm';
-import passport = require('passport');
 import { CountryRepository } from '../orm/repository/country.repository';
 
-export class CountryController extends baseController{
+export class CountryController extends baseController {
 
-    constructor(){
+    constructor() {
         super()
-        this.controllerName="/Country/"
+        this.controllerName = "/Country/"
     }
 
     /**
     * @method getListCountrys
     * @param app 
     */
-   public getListCountrys(app):void{
-    app
-    .get(this.controllerName+"getListCountrys",
-        (req: Request, res: Response) => {  
-        getCustomRepository(CountryRepository).getListCountry().then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
+    public getListCountrys(app): void {
+        app
+            .get(this.controllerName + "getListCountrys",
+                (req, res, next) => {
+                    this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+                },
+                (req: Request, res: Response) => {
+                    getCustomRepository(CountryRepository).getListCountry().then(
+                        qb => { res.send(qb) }
+                    )
+                })
+    }
 
 
 }
\ No newline at end of file
diff --git a/lib/controller/customer.controller.ts b/lib/controller/customer.controller.ts
index 6ce3813..2cede5f 100644
--- a/lib/controller/customer.controller.ts
+++ b/lib/controller/customer.controller.ts
@@ -1,113 +1,123 @@
 import { baseController } from './base.controller';
-import { Request, Response} from "express";
+import { Request, Response } from "express";
 import { getCustomRepository } from 'typeorm';
-import passport = require('passport');
-import * as oauth2 from 'authorization/oauth2';
 import { CustomerRepository } from '../orm/repository/customer.repository';
 
-export class CustomerController extends baseController{
+export class CustomerController extends baseController {
 
-    constructor(){
-        super()
-        this.controllerName="/Customer/"
-    }
+  constructor() {
+    super()
+    this.controllerName = "/Customer/"
+  }
 
-      /**
-    * @method addCustomers
-    * @param app 
-    */
-   public addCustomers(app):void{
+  /**
+* @method addCustomers
+* @param app 
+*/
+  public addCustomers(app): void {
     app
-    .post(this.controllerName+"addCustomers",
-      //  passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        let customer = req.body
-        getCustomRepository(CustomerRepository).addCustomers(customer).then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
+      .post(this.controllerName + "addCustomers",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let customer = req.body
+          getCustomRepository(CustomerRepository).addCustomers(customer).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
 
 
-    /**
-    * @method getCountCustomers
-    * @param app 
-    */
-   public getCountCustomers(app):void{
+  /**
+  * @method getCountCustomers
+  * @param app 
+  */
+  public getCountCustomers(app): void {
     app
-    .post(this.controllerName+"getCountCustomers",
-    //   passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        getCustomRepository(CustomerRepository).getCountCustomers()
-        .then(
-            qb =>{ res.send(qb)}
-        ) 
-     })
-   }
+      .post(this.controllerName + "getCountCustomers",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          getCustomRepository(CustomerRepository).getCountCustomers()
+            .then(
+              qb => { res.send(qb) }
+            )
+        })
+  }
 
 
-    /**
-    * @method getListCustomers
-    * @param app 
-    */
-   public getListCustomers(app):void{
+  /**
+  * @method getListCustomers
+  * @param app 
+  */
+  public getListCustomers(app): void {
     app
-    .post(this.controllerName+"getListCustomers",
-    //    passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        let pageIndex = req.body.pageIndex
-        let pageSize = req.body.pageSize
-        getCustomRepository(CustomerRepository).getListCustomers(pageIndex,pageSize).then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
+      .post(this.controllerName + "getListCustomers",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let pageIndex = req.body.pageIndex
+          let pageSize = req.body.pageSize
+          getCustomRepository(CustomerRepository).getListCustomers(pageIndex, pageSize).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
 
 
-   removeCustomer(app):void{
+  removeCustomer(app): void {
     app
-    .post(this.controllerName+"removeCustomer",
-     //   passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        let customerID = req.body.customerID
-        let userID = req.body.userID
-        getCustomRepository(CustomerRepository).removeCustomer(customerID).then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
+      .post(this.controllerName + "removeCustomer",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let customerID = req.body.customerID
+          let userID = req.body.userID
+          getCustomRepository(CustomerRepository).removeCustomer(customerID).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
 
 
-   /**
-    * @method getCustomerByType
-    * @param app 
-    */
-   public getCustomerByType(app):void{
+  /**
+   * @method getCustomerByType
+   * @param app 
+   */
+  public getCustomerByType(app): void {
     app
-    .post(this.controllerName+"getCustomerByType",
-     //   passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-            let customerType = req.body.customerType
-        getCustomRepository(CustomerRepository).getCustomerByType(customerType).then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
+      .post(this.controllerName + "getCustomerByType",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let customerType = req.body.customerType
+          getCustomRepository(CustomerRepository).getCustomerByType(customerType).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
 
-   
- /**
-    * @method findCustomerByID
-    * @param app 
-    */
-   public findCustomerByID(app):void{
+
+  /**
+     * @method findCustomerByID
+     * @param app 
+     */
+  public findCustomerByID(app): void {
     app
-    .post(this.controllerName+"findCustomerByID",
-      //  passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        let customerID = req.body.customerID
-        getCustomRepository(CustomerRepository).findCustomerByID(customerID).then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
+      .post(this.controllerName + "findCustomerByID",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let customerID = req.body.customerID
+          getCustomRepository(CustomerRepository).findCustomerByID(customerID).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
 }
\ No newline at end of file
diff --git a/lib/controller/dashboard.controller.ts b/lib/controller/dashboard.controller.ts
index 0fa70b4..245fe7e 100644
--- a/lib/controller/dashboard.controller.ts
+++ b/lib/controller/dashboard.controller.ts
@@ -1,55 +1,58 @@
 import { baseController } from './base.controller';
 import { Request, Response } from "express";
 import { getCustomRepository } from 'typeorm';
-import passport = require('passport');
-import * as oauth2 from 'authorization/oauth2';
-import { CustomerRepository } from '../orm/repository/customer.repository';
 import { BookingRepository } from '../orm/repository/booking.repository';
 
 export class DashboardController extends baseController {
 
-    constructor() {
-        super()
-        this.controllerName = "/Dashboard/"
-    }
+  constructor() {
+    super()
+    this.controllerName = "/Dashboard/"
+  }
 
 
-       /**
-    * @method getCountBookingStatusInMonth
-    * @param app 
-    */
-   public getCountBookingStatusInMonth(app):void{
+  /**
+* @method getCountBookingStatusInMonth
+* @param app 
+*/
+  public getCountBookingStatusInMonth(app): void {
     app
-    .post(this.controllerName+"getCountBookingStatusInMonth",
-      //  passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        getCustomRepository(BookingRepository).getCountBookingStatusInMonth().then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
-
-   public getCountDataInMonth(app):void{
+      .post(this.controllerName + "getCountBookingStatusInMonth",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          getCustomRepository(BookingRepository).getCountBookingStatusInMonth().then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
+
+  public getCountDataInMonth(app): void {
     app
-    .post(this.controllerName+"getCountDataInMonth",
-      //  passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        getCustomRepository(BookingRepository).getCountDataInMonth().then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
-
-   public getCountMonthlyBooking(app):void{
+      .post(this.controllerName + "getCountDataInMonth",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          getCustomRepository(BookingRepository).getCountDataInMonth().then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
+
+  public getCountMonthlyBooking(app): void {
     app
-    .post(this.controllerName+"getCountMonthlyBooking",
-      //  passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        getCustomRepository(BookingRepository).getCountMonthlyBooking().then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
+      .post(this.controllerName + "getCountMonthlyBooking",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          getCustomRepository(BookingRepository).getCountMonthlyBooking().then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
 
 
 }
\ No newline at end of file
diff --git a/lib/controller/department.controler.ts b/lib/controller/department.controler.ts
index 7f9200f..98458f0 100644
--- a/lib/controller/department.controler.ts
+++ b/lib/controller/department.controler.ts
@@ -2,11 +2,10 @@ import { baseController } from './base.controller';
 import { getCustomRepository } from 'typeorm';
 import { Request, Response } from 'express';
 import { DepartmentRepository } from '../orm/repository/department.repository';
-import passport = require('passport');
 export class DepartmentController extends baseController {
-    constructor(){
+    constructor() {
         super()
-        this.controllerName="/Department/"
+        this.controllerName = "/Department/"
     }
 
 
@@ -15,16 +14,18 @@ export class DepartmentController extends baseController {
      * @param app 
      * 
      */
-    getDepartmentByID(app){
+    getDepartmentByID(app) {
         app
-        .post(this.controllerName+"getDepartmentByID",
-       //   passport.authenticate('bearer', { session: false }),
-            (req: Request, res: Response) => {  
-            let departmentID = req.body.departmentID
-            getCustomRepository(DepartmentRepository).getDepartmentByID(departmentID).then(
-                qb =>{res.send(qb)}
-            ) 
-         })  
+            .post(this.controllerName + "getDepartmentByID",
+                (req, res, next) => {
+                    this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+                },
+                (req: Request, res: Response) => {
+                    let departmentID = req.body.departmentID
+                    getCustomRepository(DepartmentRepository).getDepartmentByID(departmentID).then(
+                        qb => { res.send(qb) }
+                    )
+                })
     }
 
 
@@ -33,37 +34,43 @@ export class DepartmentController extends baseController {
      * @param app 
      * 
      */
-    addDepartment(app){
+    addDepartment(app) {
         app
-        .post(this.controllerName+"addDepartment",
-     //      passport.authenticate('bearer', { session: false }),
-            (req: Request, res: Response) => {  
-            let department = req.body
-            getCustomRepository(DepartmentRepository).addDepartment(department).then(
-                qb =>{
-                    console.log(qb)
-                    res.send(qb)}
-            ) 
-         })  
+            .post(this.controllerName + "addDepartment",
+                (req, res, next) => {
+                    this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+                },
+                (req: Request, res: Response) => {
+                    let department = req.body
+                    getCustomRepository(DepartmentRepository).addDepartment(department).then(
+                        qb => {
+                            console.log(qb)
+                            res.send(qb)
+                        }
+                    )
+                })
     }
-    
+
 
     /**
      * @method addNewGroupPermission
      * @param app 
      * 
      */
-    getListDepartments(app){
+    getListDepartments(app) {
         app
-        .post(this.controllerName+"getListDepartments",
-         //  passport.authenticate('bearer', { session: false }),
-            (req: Request, res: Response) => {  
-            getCustomRepository(DepartmentRepository).getListDepartments().then(
-                qb =>{
-                    console.log(qb)
-                    res.send(qb)}
-            ) 
-         })  
+            .post(this.controllerName + "getListDepartments",
+                (req, res, next) => {
+                    this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+                },
+                (req: Request, res: Response) => {
+                    getCustomRepository(DepartmentRepository).getListDepartments().then(
+                        qb => {
+                            console.log(qb)
+                            res.send(qb)
+                        }
+                    )
+                })
     }
 
     /**
@@ -71,66 +78,74 @@ export class DepartmentController extends baseController {
      * @param app 
      * 
      */
-    getListDepartmentsPagin(app){
+    getListDepartmentsPagin(app) {
         app
-        .post(this.controllerName+"getListDepartmentsPagin",
-        //   passport.authenticate('bearer', { session: false }),
-            (req: Request, res: Response) => {  
-                let pageIndex = req.body.pageIndex
-                let pageSize = req.body.pageSize
-            getCustomRepository(DepartmentRepository).getListDepartmentsPagin(pageIndex,pageSize).then(
-                qb =>{
-                    console.log(qb)
-                    res.send(qb)}
-            ) 
-         })  
+            .post(this.controllerName + "getListDepartmentsPagin",
+                (req, res, next) => {
+                    this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+                },
+                (req: Request, res: Response) => {
+                    let pageIndex = req.body.pageIndex
+                    let pageSize = req.body.pageSize
+                    getCustomRepository(DepartmentRepository).getListDepartmentsPagin(pageIndex, pageSize).then(
+                        qb => {
+                            console.log(qb)
+                            res.send(qb)
+                        }
+                    )
+                })
     }
 
-     /**
-     * @method getCountDepartments
-     * @param app 
-     * 
-     */
-    getCountDepartments(app){
+    /**
+    * @method getCountDepartments
+    * @param app 
+    * 
+    */
+    getCountDepartments(app) {
         app
-        .post(this.controllerName+"getCountDepartments",
-            (req: Request, res: Response) => {  
-            getCustomRepository(DepartmentRepository).getCountDepartments().then(
-                qb =>{
-                    res.send(qb)}
-            ) 
-         })  
+            .post(this.controllerName + "getCountDepartments",
+                (req, res, next) => {
+                    this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+                },
+                (req: Request, res: Response) => {
+                    getCustomRepository(DepartmentRepository).getCountDepartments().then(
+                        qb => {
+                            res.send(qb)
+                        }
+                    )
+                })
     }
-    
 
 
 
-      /**
-     * @method addNewGroupPermission
-     * @param app 
-     * 
-     */
-    updateDepartment(app){
+
+    /**
+   * @method addNewGroupPermission
+   * @param app 
+   * 
+   */
+    updateDepartment(app) {
         app
-        .post(this.controllerName+"updateDepartment",
-       //     passport.authenticate('bearer', { session: false }),
-            (req: Request, res: Response) => {  
-            let department = req.body
-            getCustomRepository(DepartmentRepository).updateDepartment(department).then(
-                qb =>{
-                    console.log(qb)
-                    res.send(qb)}
-            ) 
-         })  
+            .post(this.controllerName + "updateDepartment",
+                //     passport.authenticate('bearer', { session: false }),
+                (req: Request, res: Response) => {
+                    let department = req.body
+                    getCustomRepository(DepartmentRepository).updateDepartment(department).then(
+                        qb => {
+                            console.log(qb)
+                            res.send(qb)
+                        }
+                    )
+                })
     }
 
-    
 
-      /**
-     * @method addNewGroupPermission
-     * @param app 
-     * 
-     */
+
+    /**
+   * @method addNewGroupPermission
+   * @param app 
+   * 
+   */
     // addMoreGroupIntoDepartment(app){
     //     app
     //     .post(this.controllerName+"addMoreGroupIntoDepartment",
diff --git a/lib/controller/document.controller.ts b/lib/controller/document.controller.ts
index b838fea..ac747b1 100644
--- a/lib/controller/document.controller.ts
+++ b/lib/controller/document.controller.ts
@@ -2,7 +2,6 @@ import { baseController } from './base.controller';
 import { getCustomRepository, createConnection } from 'typeorm';
 import { Request, Response } from 'express';
 import { DocumentRepository } from '../orm/repository/document.repository';
-import passport = require('passport');
 export class DocumentController extends baseController {
     constructor(){
         super()
@@ -17,7 +16,9 @@ export class DocumentController extends baseController {
     addDocuments(app){
         app
         .post(this.controllerName+"addDocuments",
-           // passport.authenticate('bearer', { session: false }),
+        (req, res, next) => {
+            this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
             (req: Request, res: Response) => {  
             let doc = req.body
             getCustomRepository(DocumentRepository).addDocuments(doc).then(
@@ -35,7 +36,9 @@ export class DocumentController extends baseController {
     getListDocuments(app){
         app
         .post(this.controllerName+"getListDocuments",
-          // passport.authenticate('bearer', { session: false }),
+        (req, res, next) => {
+            this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
             (req: Request, res: Response) => {  
             let bookingID = req.body.bookingID
             getCustomRepository(DocumentRepository).getListDocuments(bookingID).then(
@@ -53,7 +56,9 @@ export class DocumentController extends baseController {
     deleteDocument(app){
         app
         .post(this.controllerName+"deleteDocument",
-          // passport.authenticate('bearer', { session: false }),
+        (req, res, next) => {
+            this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
             (req: Request, res: Response) => {  
             let IDGenerate = req.body.IDGenerate
             getCustomRepository(DocumentRepository).deleteDocument(IDGenerate).then(
diff --git a/lib/controller/group.controller.ts b/lib/controller/group.controller.ts
index 19a7114..b217eea 100644
--- a/lib/controller/group.controller.ts
+++ b/lib/controller/group.controller.ts
@@ -2,43 +2,46 @@ import { baseController } from './base.controller';
 import { getCustomRepository, createConnection } from 'typeorm';
 import { Request, Response } from 'express';
 import { GroupRepository } from '../orm/repository/group.repository';
-import passport = require('passport');
 export class GroupController extends baseController {
-    constructor(){
+    constructor() {
         super()
-        this.controllerName="/group/"
+        this.controllerName = "/group/"
     }
 
     /**
      * @method getListGroups
      */
-    getListGroups(app):void{
+    getListGroups(app): void {
         app.
-            post(this.controllerName+"getListGroups"
-             //   ,passport.authenticate('bearer', { session: false })
-                ,(req:Request,res:Response)=>{
+            post(this.controllerName + "getListGroups",
+                (req, res, next) => {
+                    this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+                }
+                , (req: Request, res: Response) => {
                     let pageIndex = req.body.pageIndex
                     let pageSize = req.body.pageSize
-                    getCustomRepository(GroupRepository).getListGroups(pageIndex,pageSize)
-                    .then(qb=>{
-                        res.send(qb)
-                    })
-            })
+                    getCustomRepository(GroupRepository).getListGroups(pageIndex, pageSize)
+                        .then(qb => {
+                            res.send(qb)
+                        })
+                })
     }
 
-     /**
-     * @method getCountGroups
-     */
-    getCountGroups(app):void{
+    /**
+    * @method getCountGroups
+    */
+    getCountGroups(app): void {
         app.
-            post(this.controllerName+"getCountGroups"   
-          //  ,passport.authenticate('bearer', { session: false })
-            ,(req:Request,res:Response)=>{
+            post(this.controllerName + "getCountGroups",
+                (req, res, next) => {
+                    this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+                }
+                , (req: Request, res: Response) => {
                     getCustomRepository(GroupRepository).getCountGroups()
-                    .then(qb=>{
-                        res.send(qb)
-                    })
-            })
+                        .then(qb => {
+                            res.send(qb)
+                        })
+                })
     }
 
 
@@ -47,16 +50,18 @@ export class GroupController extends baseController {
      * @param app 
      * 
      */
-    getPermissionByGroupID(app){
+    getPermissionByGroupID(app) {
         app
-        .post(this.controllerName+"getPermissionByGroupID",
-         //   passport.authenticate('bearer', { session: false }),
-            (req: Request, res: Response) => {  
-            let groupID = req.body.groupID
-            getCustomRepository(GroupRepository).getPermissionByGroupID(groupID).then(
-                qb =>{res.send(qb)}
-            ) 
-         })  
+            .post(this.controllerName + "getPermissionByGroupID",
+                (req, res, next) => {
+                    this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+                },
+                (req: Request, res: Response) => {
+                    let groupID = req.body.groupID
+                    getCustomRepository(GroupRepository).getPermissionByGroupID(groupID).then(
+                        qb => { res.send(qb) }
+                    )
+                })
     }
 
 
@@ -65,33 +70,37 @@ export class GroupController extends baseController {
      * @param app 
      * 
      */
-    addGroup(app){
+    addGroup(app) {
         app
-        .post(this.controllerName+"addGroup",
-      //     passport.authenticate('bearer', { session: false }),
-            (req: Request, res: Response) => {  
-            let groupPersmissions = req.body
-            getCustomRepository(GroupRepository).addGroup(groupPersmissions).then(
-                qb =>{res.send(qb)}
-            ) 
-         })  
+            .post(this.controllerName + "addGroup",
+                (req, res, next) => {
+                    this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+                },
+                (req: Request, res: Response) => {
+                    let groupPersmissions = req.body
+                    getCustomRepository(GroupRepository).addGroup(groupPersmissions).then(
+                        qb => { res.send(qb) }
+                    )
+                })
     }
 
-     /**
-     * @method getGroupByDepartmentID
-     * @param app 
-     * 
-     */
-    getGroupByDepartmentID(app){
+    /**
+    * @method getGroupByDepartmentID
+    * @param app 
+    * 
+    */
+    getGroupByDepartmentID(app) {
         app
-        .post(this.controllerName+"getGroupByDepartmentID",
-     //      passport.authenticate('bearer', { session: false }),
-            (req: Request, res: Response) => {  
-                let departmentID = req.body.departmentID
-            getCustomRepository(GroupRepository).getGroupByDepartmentID(departmentID).then(
-                qb =>{res.send(qb)}
-            ) 
-         })  
+            .post(this.controllerName + "getGroupByDepartmentID",
+                (req, res, next) => {
+                    this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+                },
+                (req: Request, res: Response) => {
+                    let departmentID = req.body.departmentID
+                    getCustomRepository(GroupRepository).getGroupByDepartmentID(departmentID).then(
+                        qb => { res.send(qb) }
+                    )
+                })
     }
 
 
@@ -100,16 +109,18 @@ export class GroupController extends baseController {
      * @param app 
      * 
      */
-    updateGroupPermission(app){
+    updateGroupPermission(app) {
         app
-        .post(this.controllerName+"updateGroupPermission",
-   //         passport.authenticate('bearer', { session: false }),
-            (req: Request, res: Response) => {  
-            let groupPersmissions = req.body
-            getCustomRepository(GroupRepository).updateGroupPermission(groupPersmissions).then(
-                qb =>{res.send(qb)}
-            ) 
-         })  
+            .post(this.controllerName + "updateGroupPermission",
+                (req, res, next) => {
+                    this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+                },
+                (req: Request, res: Response) => {
+                    let groupPersmissions = req.body
+                    getCustomRepository(GroupRepository).updateGroupPermission(groupPersmissions).then(
+                        qb => { res.send(qb) }
+                    )
+                })
     }
 
 
diff --git a/lib/controller/mail.cotroller.ts b/lib/controller/mail.cotroller.ts
index 8358dc8..40fae4f 100644
--- a/lib/controller/mail.cotroller.ts
+++ b/lib/controller/mail.cotroller.ts
@@ -1,11 +1,6 @@
 import { baseController } from './base.controller';
 import { Request, Response} from "express";
-import { getCustomRepository } from 'typeorm';
-import passport = require('passport');
-import * as oauth2 from 'authorization/oauth2';
-import { PageRepository } from '../orm/repository/page.repository';
 import { EmailModel } from 'model/EmailModel';
-import { Utils } from 'authorization/utils';
 import { Mailing } from '../utilities';
 
 export class MailController extends baseController{
@@ -21,7 +16,9 @@ export class MailController extends baseController{
    public sendMail(app):void{
     app
     .post(this.controllerName+"sendMail",
-    //     passport.authenticate('bearer', { session: false }),
+    (req, res, next) => {
+        this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+      },
         (req: Request, res: Response) => {
             let body = req.body as EmailModel
         
diff --git a/lib/controller/page.controller.ts b/lib/controller/page.controller.ts
index d21f41e..7c65b0b 100644
--- a/lib/controller/page.controller.ts
+++ b/lib/controller/page.controller.ts
@@ -1,8 +1,6 @@
 import { baseController } from './base.controller';
 import { Request, Response} from "express";
 import { getCustomRepository } from 'typeorm';
-import passport = require('passport');
-import * as oauth2 from 'authorization/oauth2';
 import { PageRepository } from '../orm/repository/page.repository';
 
 export class PageController extends baseController{
@@ -18,7 +16,9 @@ export class PageController extends baseController{
    public getAllPages(app):void{
     app
     .post(this.controllerName+"getAllPages",
-       //  passport.authenticate('bearer', { session: false }),
+    (req, res, next) => {
+        this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+      },
         (req: Request, res: Response) => {
         getCustomRepository(PageRepository).getAllPages().then(
             qb =>{res.send(qb)}
diff --git a/lib/controller/port.controller.ts b/lib/controller/port.controller.ts
index cf3b981..59c85be 100644
--- a/lib/controller/port.controller.ts
+++ b/lib/controller/port.controller.ts
@@ -1,10 +1,7 @@
 import { baseController } from './base.controller';
 import { Request, Response} from "express";
 import { getCustomRepository } from 'typeorm';
-import passport = require('passport');
-import * as oauth2 from 'authorization/oauth2';
 import { PortRepository } from '../orm/repository/port.repositoty';
-import { Port } from '../orm/entity/port.entity';
 
 export class PortController extends baseController{
 
@@ -19,7 +16,9 @@ export class PortController extends baseController{
    public getPortList(app):void{
     app
     .post(this.controllerName+"getPortList",
-       //  passport.authenticate('bearer', { session: false }),
+    (req, res, next) => {
+        this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+      },
         (req: Request, res: Response) => {  
             let portType = req.body.portType
         getCustomRepository(PortRepository).getPortList(portType).then(
@@ -32,7 +31,9 @@ export class PortController extends baseController{
    public getPortListWithSize(app):void{
     app
     .post(this.controllerName+"getPortListWithSize",
-       //  passport.authenticate('bearer', { session: false }),
+    (req, res, next) => {
+        this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+      },
         (req: Request, res: Response) => {  
             let pageSize = req.body.pageSize
             let pageIndex = req.body.pageIndex
@@ -45,7 +46,9 @@ export class PortController extends baseController{
    public getPortByID(app):void{
     app
     .post(this.controllerName+"getPortByID",
-       //  passport.authenticate('bearer', { session: false }),
+    (req, res, next) => {
+        this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+      },
         (req: Request, res: Response) => {  
             let ID = req.body.ID
         getCustomRepository(PortRepository).getPortByID(ID).then(
@@ -57,7 +60,9 @@ export class PortController extends baseController{
    public addPort(app):void{
     app
     .post(this.controllerName+"addPort",
-       //  passport.authenticate('bearer', { session: false }),
+    (req, res, next) => {
+        this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+      },
         (req: Request, res: Response) => {  
             let port = req.body
         getCustomRepository(PortRepository).addPort(port).then(
@@ -69,7 +74,9 @@ export class PortController extends baseController{
    public getCountPorts(app):void{
     app
     .post(this.controllerName+"getCountPorts",
-       //  passport.authenticate('bearer', { session: false }),
+    (req, res, next) => {
+        this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+      },
         (req: Request, res: Response) => {  
         getCustomRepository(PortRepository).getCountPorts().then(
             qb =>{res.send(qb)}
diff --git a/lib/controller/pre_defined.controller.ts b/lib/controller/pre_defined.controller.ts
index 0216cea..631f5af 100644
--- a/lib/controller/pre_defined.controller.ts
+++ b/lib/controller/pre_defined.controller.ts
@@ -1,98 +1,108 @@
 import { baseController } from './base.controller';
 import { getCustomRepository } from 'typeorm';
-import { Request,Response } from 'express';
+import { Request, Response } from 'express';
 import { PreDefinedFieldRepository } from '../orm/repository/preDefined.repository';
 /**
  * @Controller
  */
-export class PreDefinedFieldController  extends baseController{
-  
-    constructor(){ 
+export class PreDefinedFieldController extends baseController {
+
+    constructor() {
         super()
-        this.controllerName="/predata/"
+        this.controllerName = "/predata/"
+    }
+    /**
+   * @method getListPreDefinedsByCriterial
+   * @param app 
+   */
+    public getPredataByCriterial(app): void {
+        app
+            .post(this.controllerName + "getPredataByCriterial",
+                (req, res, next) => {
+                    this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+                },
+                (req: Request, res: Response) => {
+                    let criterial = req.body.criterial
+                    getCustomRepository(PreDefinedFieldRepository).getPreDefinedsByCriterial(criterial).then(
+                        qb => { res.send(qb) }
+                    )
+                })
     }
-     /**
-    * @method getListPreDefinedsByCriterial
-    * @param app 
-    */
-   public getPredataByCriterial(app):void{
-    app
-    .post(this.controllerName+"getPredataByCriterial",
-       //  passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        let criterial = req.body.criterial
-        getCustomRepository(PreDefinedFieldRepository).getPreDefinedsByCriterial(criterial).then(
-            qb =>{res.send(qb)}
-        )
-     })
-   }
 
- /**
-    * @method addPreData
-    * @param app 
-    */
-   public addPreData(app):void{
-    app
-    .post(this.controllerName+"addPreData",
-       // passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        let criterial = req.body.predata;
-        getCustomRepository(PreDefinedFieldRepository).addPreData(criterial).then(
-            qb =>{res.send(qb)}
-        )
-     })
-   }
+    /**
+       * @method addPreData
+       * @param app 
+       */
+    public addPreData(app): void {
+        app
+            .post(this.controllerName + "addPreData",
+                (req, res, next) => {
+                    this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+                },
+                (req: Request, res: Response) => {
+                    let criterial = req.body.predata;
+                    getCustomRepository(PreDefinedFieldRepository).addPreData(criterial).then(
+                        qb => { res.send(qb) }
+                    )
+                })
+    }
 
-   /**
-    * @method getListPredatas
-    * @param app 
-    */
-   public getListPredatas(app):void{
-    app
-    .post(this.controllerName+"getListPredatas",
-       // passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        let criterial = req.body.criterial;
-        let pageIndex = req.body.pageIndex
-        let pageSize = req.body.pageSize
+    /**
+     * @method getListPredatas
+     * @param app 
+     */
+    public getListPredatas(app): void {
+        app
+            .post(this.controllerName + "getListPredatas",
+                (req, res, next) => {
+                    this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+                },
+                (req: Request, res: Response) => {
+                    let criterial = req.body.criterial;
+                    let pageIndex = req.body.pageIndex
+                    let pageSize = req.body.pageSize
 
-        getCustomRepository(PreDefinedFieldRepository).getListPredatas(criterial,pageIndex,pageSize).then(
-            qb =>{res.send(qb)}
-        )
-     })
-   }
+                    getCustomRepository(PreDefinedFieldRepository).getListPredatas(criterial, pageIndex, pageSize).then(
+                        qb => { res.send(qb) }
+                    )
+                })
+    }
 
 
-   /**
-    * @method getListCriterial
-    * @param app 
-    */
-   public getListCriterial(app):void{
-    app
-    .post(this.controllerName+"getListCriterial",
-       // passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        getCustomRepository(PreDefinedFieldRepository).getListCriterial().then(
-            qb =>{res.send(qb)}
-        )
-     })
-   }
+    /**
+     * @method getListCriterial
+     * @param app 
+     */
+    public getListCriterial(app): void {
+        app
+            .post(this.controllerName + "getListCriterial",
+                (req, res, next) => {
+                    this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+                },
+                (req: Request, res: Response) => {
+                    getCustomRepository(PreDefinedFieldRepository).getListCriterial().then(
+                        qb => { res.send(qb) }
+                    )
+                })
+    }
 
     /**
     * @method getCountPredatas
     * @param app 
     */
-   public getCountPredatas(app):void{
-    app
-    .post(this.controllerName+"getCountPredatas",
-       // passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-            let criterial = req.body.criterial
-        getCustomRepository(PreDefinedFieldRepository).getCountPredatas(criterial).then(
-            qb =>{res.send(qb)}
-        )
-     })
-   }
+    public getCountPredatas(app): void {
+        app
+            .post(this.controllerName + "getCountPredatas",
+                (req, res, next) => {
+                    this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+                },
+                (req: Request, res: Response) => {
+                    let criterial = req.body.criterial
+                    getCustomRepository(PreDefinedFieldRepository).getCountPredatas(criterial).then(
+                        qb => { res.send(qb) }
+                    )
+                })
+    }
 
 
 }
\ No newline at end of file
diff --git a/lib/controller/report.controller.ts b/lib/controller/report.controller.ts
index 5433576..9a0b31d 100644
--- a/lib/controller/report.controller.ts
+++ b/lib/controller/report.controller.ts
@@ -1,8 +1,5 @@
 import { Request, Response} from "express";
 import { baseController } from './base.controller';
-import { getCustomRepository } from 'typeorm';
-import passport = require('passport');
-import * as oauth2 from 'authorization/oauth2';
 import { ReportRepository } from "../orm/repository/report.repository";
 
 
@@ -19,6 +16,9 @@ export class ReportController extends baseController{
    public getEmptyReport(app):void{
     app
     .post(this.controllerName+"getEmptyReport",
+    (req, res, next) => {
+      this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+    },
         (req: Request, res: Response) => {  
         let filterModel = req.body as FilterReportModel
         console.log(this.repo.getEmptyReport(filterModel))
@@ -29,6 +29,9 @@ export class ReportController extends baseController{
    public getConsoleReport(app):void{
     app
     .post(this.controllerName+"getConsoleReport",
+    (req, res, next) => {
+      this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+    },
         (req: Request, res: Response) => {  
         let filterModel = req.body as FilterReportModel
         return this.repo.getConsoleReport(filterModel).then(   qb => { res.send(qb) })
diff --git a/lib/controller/truck.controller.ts b/lib/controller/truck.controller.ts
index 3b10af8..cfeeb9d 100644
--- a/lib/controller/truck.controller.ts
+++ b/lib/controller/truck.controller.ts
@@ -1,8 +1,6 @@
 import { baseController } from './base.controller';
 import { getCustomRepository } from 'typeorm';
 import { Request, Response } from 'express';
-import passport = require('passport');
-import * as oauth2 from 'authorization/oauth2';
 import { TruckRepository } from '../orm/repository/truck.repository';
 export class TruckController extends baseController {
     constructor() {
@@ -17,7 +15,9 @@ export class TruckController extends baseController {
     public getListTruckByDriver(app): void {
         app
             .post(this.controllerName + "getListTruckByDriver",
-                // passport.authenticate('bearer', { session: false }),
+                (req, res, next) => {
+                    this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+                },
                 (req: Request, res: Response) => {
                     getCustomRepository(TruckRepository).getListTruckByDriver().then(
                         qb => { res.send(qb) }
@@ -28,11 +28,13 @@ export class TruckController extends baseController {
     public getAllTrucks(app) {
         app
             .post(this.controllerName + "getAllTrucks",
-                //    passport.authenticate('bearer', { session: false }),
+                (req, res, next) => {
+                    this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+                },
                 (req: Request, res: Response) => {
                     let pageIndex = req.body.pageIndex
                     let pageSize = req.body.pageSize
-                    getCustomRepository(TruckRepository).getAllTrucks(pageSize,pageIndex).then(
+                    getCustomRepository(TruckRepository).getAllTrucks(pageSize, pageIndex).then(
                         qb => { res.send(qb) }
                     )
                 })
@@ -41,7 +43,9 @@ export class TruckController extends baseController {
     public getCountTrucks(app) {
         app
             .post(this.controllerName + "getCountTrucks",
-                //    passport.authenticate('bearer', { session: false }),
+                (req, res, next) => {
+                    this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+                },
                 (req: Request, res: Response) => {
                     getCustomRepository(TruckRepository).getCountTrucks().then(
                         qb => { res.send(qb) }
@@ -56,7 +60,9 @@ export class TruckController extends baseController {
     public getAllTruck(app) {
         app
             .post(this.controllerName + "getAllTruck",
-                //    passport.authenticate('bearer', { session: false }),
+                (req, res, next) => {
+                    this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+                },
                 (req: Request, res: Response) => {
                     getCustomRepository(TruckRepository).getAllTruck().then(
                         qb => { res.send(qb) }
@@ -71,7 +77,9 @@ export class TruckController extends baseController {
     public saveTruck(app) {
         app
             .post(this.controllerName + "saveTruck",
-                //    passport.authenticate('bearer', { session: false }),
+                (req, res, next) => {
+                    this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+                },
                 (req: Request, res: Response) => {
                     getCustomRepository(TruckRepository).saveTruck(req.body).then(
                         qb => { res.send(qb) }
diff --git a/lib/controller/user.controller.ts b/lib/controller/user.controller.ts
index 8e682d0..7f4503c 100644
--- a/lib/controller/user.controller.ts
+++ b/lib/controller/user.controller.ts
@@ -1,211 +1,234 @@
-import { Request, Response} from "express";
+import { Request, Response } from "express";
 import { baseController } from './base.controller';
 import { getCustomRepository } from 'typeorm';
-import passport = require('passport');
-import * as oauth2 from '../authorization/oauth2';
 import { UserRepository } from '../orm/repository/user.repository';
-import { ClientOAuth2Repository } from '../orm/repository/Oauth2Repository';
-
-export class UserController extends baseController{
-  
-    constructor(){
-        super()
-        this.controllerName="/User/"
-    }
-
-
-    /**
-    * @method getListUsers
-    * @param app 
-    */
-   public logIn(app):void{
-     app.post('/user/login',oauth2.token);
-   }
-
-    /**
-    * @method addUsers
-    * @param app 
-    */
-   public addUsers(app):void{
+import { AuthenticationHandler } from "../authorization/AuthenticationHandler";
+
+export class UserController extends baseController {
+
+  constructor() {
+    super()
+    this.controllerName = "/User/"
+  }
+
+
+  /**
+  * @method getListUsers
+  * @param app 
+  */
+  public logIn(app): void {
+    app.post('/user/login', new AuthenticationHandler().token);
+  }
+
+
+
+
+  /**
+  * @method addUsers
+  * @param app 
+  */
+  public addUsers(app): void {
     app
-    .post(this.controllerName+"addUsers",
-    //    passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        let user = req.body
-        getCustomRepository(UserRepository).addUser(user).then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
-
-    /**
-    * @method updateUser
-    * @param app 
-    */
-   public updateUser(app):void{
+      .post(this.controllerName + "addUsers",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let user = req.body
+          getCustomRepository(UserRepository).addUser(user).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
+
+  /**
+  * @method updateUser
+  * @param app 
+  */
+  public updateUser(app): void {
     app
-    .post(this.controllerName+"updateUser",
-     //   passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        let user = req.body
-        getCustomRepository(UserRepository).updateUser(user).then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
-
-   /**
-    * @method getUserByGroups
-    * @param app 
-    */
-   public getUserByGroups(app):void{
+      .post(this.controllerName + "updateUser",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let user = req.body
+          getCustomRepository(UserRepository).updateUser(user).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
+
+  /**
+   * @method getUserByGroups
+   * @param app 
+   */
+  public getUserByGroups(app): void {
     app
-    .post(this.controllerName+"getUserByGroups",
-      //  passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        let groupID = req.body.groupID
-        getCustomRepository(UserRepository).getUserByGroups(groupID).then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
-
-   /**
-    * @method getListUserByPosition
-    * @param app 
-    */
-   public getListUserByPosition(app):void{
+      .post(this.controllerName + "getUserByGroups",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let groupID = req.body.groupID
+          getCustomRepository(UserRepository).getUserByGroups(groupID).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
+
+  /**
+   * @method getListUserByPosition
+   * @param app 
+   */
+  public getListUserByPosition(app): void {
     app
-    .post(this.controllerName+"getListUserByPosition",
-      //  passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        let positionID = req.body.positionID
-        getCustomRepository(UserRepository).getListUserByPosition(positionID).then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
-
-   public getListUserOperation(app):void{
+      .post(this.controllerName + "getListUserByPosition",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let positionID = req.body.positionID
+          getCustomRepository(UserRepository).getListUserByPosition(positionID).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
+
+  public getListUserOperation(app): void {
     app
-    .post(this.controllerName+"getListUserOperation",
-      //  passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        getCustomRepository(UserRepository).getListUserOperation().then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
-   
-   /**
-    * @method getListUsers
-    * @param app 
-    */
-   public getListUsers(app):void{
+      .post(this.controllerName + "getListUserOperation",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          getCustomRepository(UserRepository).getListUserOperation().then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
+
+  /**
+   * @method getListUsers
+   * @param app 
+   */
+  public getListUsers(app): void {
     app
-    .post(this.controllerName+"getListUsers",
-      //   passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        let pageIndex = req.body.pageIndex
-        let pageSize = req.body.pageSize
-        getCustomRepository(UserRepository).getListUsers(pageIndex,pageSize).then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
-
-
-   
-   /**
-    * @method : getListUsersByType
-    * @param app 
-    */
-   public getListUsersByType(app):void{
+      .post(this.controllerName + "getListUsers",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let pageIndex = req.body.pageIndex
+          let pageSize = req.body.pageSize
+          getCustomRepository(UserRepository).getListUsers(pageIndex, pageSize).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
+
+
+
+  /**
+   * @method : getListUsersByType
+   * @param app 
+   */
+  public getListUsersByType(app): void {
     app
-    .post(this.controllerName+"getListUsersByType",
-     //   passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        let userType = req.body.userType
-        console.log(userType)
-        getCustomRepository(UserRepository).getListUsersByType(userType).then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
-
-
-
-
-   /**
-    * @method getCountUser
-    * @param app 
-    */
-   public getCountUsers(app):void{
+      .post(this.controllerName + "getListUsersByType",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let userType = req.body.userType
+          console.log(userType)
+          getCustomRepository(UserRepository).getListUsersByType(userType).then(
+            qb => { res.send(qb) }
+          )
+        })
+  }
+
+
+
+
+  /**
+   * @method getCountUser
+   * @param app 
+   */
+  public getCountUsers(app): void {
     app
-    .post(this.controllerName+"getCountUsers",
-      //  passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-        getCustomRepository(UserRepository).getCountUsers()
-        .then(
-            qb =>{ res.send(qb)}
-        ) 
-     })
-   }
-
-   /**
-    * @method 
-    */
-   public findUserByID(app):void{
+      .post(this.controllerName + "getCountUsers",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          getCustomRepository(UserRepository).getCountUsers()
+            .then(
+              qb => { res.send(qb) }
+            )
+        })
+  }
+
+  /**
+   * @method 
+   */
+  public findUserByID(app): void {
     app
-    .post(this.controllerName+"findUserByID",
-     //   passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-            let ID = req.body.ID;
-        getCustomRepository(UserRepository).findUserByID(ID)
-        .then(
-            qb =>{
+      .post(this.controllerName + "findUserByID",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let ID = req.body.ID;
+          getCustomRepository(UserRepository).findUserByID(ID)
+            .then(
+              qb => {
                 res.send(qb)
-            }
-        ) 
-     })
-   }
-
-   /**
-    * @method removeUserByID
-    * @param userID
-    */
-   public removeUserByID(app):void{
-    app
-    .post(this.controllerName+"removeUserByID",
-        passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-            let ID = req.body.ID;
-        getCustomRepository(UserRepository).removeUserByID(ID)
-        .then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
-
-
-
-   // outhorization setting
-   /**
-    * @method removeUserByID
-    * @param userID
-    */
-   public addClientAuhtorization(app):void{
+              }
+            )
+        })
+  }
+
+  /**
+   * @method removeUserByID
+   * @param userID
+   */
+  public removeUserByID(app): void {
     app
-    .post(this.controllerName+"addClientAuhtorization",
-       // passport.authenticate('bearer', { session: false }),
-        (req: Request, res: Response) => {  
-            let u = req.body;
-        getCustomRepository(ClientOAuth2Repository).addClientAuhtorization(u)
-        .then(
-            qb =>{res.send(qb)}
-        ) 
-     })
-   }
+      .post(this.controllerName + "removeUserByID",
+        (req, res, next) => {
+          this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+        },
+        (req: Request, res: Response) => {
+          let ID = req.body.ID;
+          getCustomRepository(UserRepository).removeUserByID(ID)
+            .then(
+              qb => { res.send(qb) }
+            )
+        })
+  }
+
+
+
+  // // outhorization setting
+  // /**
+  //  * @method removeUserByID
+  //  * @param userID
+  //  */
+  // public addClientAuhtorization(app): void {
+  //   app
+  //     .post(this.controllerName + "addClientAuhtorization",
+  //       (req, res, next) => {
+  //         this.mddileWare.authori_attr(req, res, next, [this.roles_all],)
+  //       },
+  //       (req: Request, res: Response) => {
+  //         let u = req.body;
+  //         getCustomRepository(ClientOAuth2Repository).addClientAuhtorization(u)
+  //           .then(
+  //             qb => { res.send(qb) }
+  //           )
+  //       })
+  // }
 
 
 }
\ No newline at end of file
diff --git a/lib/helper/crypto.helper.ts b/lib/helper/crypto.helper.ts
new file mode 100644
index 0000000..33b3d24
--- /dev/null
+++ b/lib/helper/crypto.helper.ts
@@ -0,0 +1,48 @@
+const crypto = require('crypto');
+const JSEncrypt = require('node-jsencrypt');
+const fs = require("fs"); 
+const CryptoJS = require("crypto-js");
+
+// const { privateKey, publicKey } = crypto.generateKeyPairSync('rsa', {
+//   modulusLength: 2048,
+//   publicKeyEncoding: {
+//     type: 'spki',
+//     format: 'pem'
+//   },
+//   privateKeyEncoding: {
+//     type: 'pkcs8',
+//     format: 'pem'
+//   }
+// }); 
+
+export class CryptoHelper {
+  static crypt = new JSEncrypt();
+  static encrypt_req(text) {
+   let public_key = fs.readFileSync(__dirname+"/public.pem", 'utf8' )
+  
+    this.crypt.setKey(public_key);
+    return this.crypt.encrypt(text);
+  }
+
+
+ static decrypt_req(encrypted) {
+   let privateKey = fs.readFileSync(__dirname+"/private.pem", 'utf8' )
+    this.crypt.setPrivateKey(privateKey);
+    return this.crypt.decrypt(encrypted);
+}
+
+
+static encrypt_db(text) {
+  var ciphertext = CryptoJS.AES.encrypt(text, '1').toString();
+   return ciphertext;
+ }
+
+
+static decrypt_db(ciphertext) {
+  var bytes  = CryptoJS.AES.decrypt(ciphertext, '1');
+  var originalText = bytes.toString(CryptoJS.enc.Utf8);
+  return originalText;
+}
+
+ 
+}
\ No newline at end of file
diff --git a/lib/helper/private.pem b/lib/helper/private.pem
new file mode 100644
index 0000000..abdacaf
--- /dev/null
+++ b/lib/helper/private.pem
@@ -0,0 +1,28 @@
+-----BEGIN PRIVATE KEY-----
+MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDIopWgdqlw6RnP
+WCsjl5g7J8zo5vw5ORJMIgJih82OnvRoNzWKgf1zOewg0P/AJ9E7juUcpqLwa78f
+9dq0VVeTQrldbGtIbIjK74qG5cs56ptJeJWiXS4ckWAi9dBswqbT1Gzn4zBsTimq
+goWwccK8lyAA1bL92vEFuF490DEiwuPmpXoA7/GH8hz5XZiDdnjo0Z9vmGU2sm1C
+7VA2OLExi0RKrF3Ol2Tjk4/Hd4FSI96L5UagJcSgKscEyoFyVX72DxzfVfb7bcv0
+DAJXURwzjqn8nH9tVMs08rgAsL1RD/SYWl/kf+1pwI7+MCE8XrITmo15fVdzgGXd
+WzK+R1CFAgMBAAECggEAeYTv92anrfmhZlJSnpYc4Ad1NsNglRAaIv6eTytNt0pT
+YiO+TAv7hKTafe3YWXxEYDxmTHopSlEYS7VPJ9Zg2pKZTxpxyEXkfHWlg5r/Ai80
+qsVcbCDf4vGyNrqH6Lfk73xEEhcqpw6YcevoKTxd5HfsLFVCujq3rO1EN1A30oL/
+2+aWoOzU3kpvRDdvRmGb1785TIWsQd4DNJKl9E1XFV+ua7Kxmu7N9twB4bPaxSWD
+hnWGwRQmdjmgzLKVxoNotvlVXR+zJQYckIri14Ika2lx2Wv/ylv6nahq2vMmPNT6
+lHwwuycnU+/khMYu8Kxwpt75GOlbfEmZ1MIgfgfq6QKBgQD9nd485CXYbNSPy5EZ
+Lfe7nCwYrN4iRlAjXmRGptc7H/7TpmVyzBb34+fsTd0YTzioaqPLY88Su2Dqe0uO
+ZdZmbfQzwmzWfneO/FI/vAt2x3ptiMLmGKe9lF4rS1SqhPqVbvzeJ1Xxb97U9HFC
+vP/oiospeC9f9ds6Rnukg4isZwKBgQDKhUHc7iAiMTch5Xv8tdRfT5fv9sErjoHO
+W7ufXz9V1IUgtm5hKf6oyUblKCzvpC0bP85TvG33kearpiXXoc3Lrctz3Gxeg2CX
+I1o8j5r1XvzeVpV5JXFJkdsxP33Vob3/+Qq3Gt+lZ/N/hn8950yDoQc9J7AmHy5i
+t0m0H/BIMwKBgDoAPK8YTj9sxEAOgiSMCrfxQ3RxNGwKQJGWKMCvr1FqQ9ELoO/c
+FPSkPoogVIwWshJyMPt23Aigqc12XRU33QyX4N1lfZagXZ9pvTWuP8DuZeVe/ZO5
+18LXh6HHHJnSx6wdMd9sh48r0n5JWQ22Q6Be7uyQ++SqSXTOYcCCBGPJAoGAA2yF
+VIriGDHk0Lnkgr1APexGkVQGqAncv/RlE6i0lWrmZUswSow/NfNRM4aeW97WtGM7
+xcalxU2+LKC+ewrNQ+hITEkpu99UvrlmSSfUYtmcRNYJ6OZtJ+VDY23DXt1BLRa0
+y6u0pENBpqJLfGxwqrkKOkp1e++DBUA8CsOPeGkCgYEAv1mM0GcnA2CgOwMNYJ/w
+6Ur3cX0C4gLvAFSjXAlekRIc9PAinarR5syN6Yr1o/pbGxrNH/stpi+35Zb4NXLO
+IeJ1SZR0EmApDJlYmfoHDO+UvipmCw5g1RY0E9Or42D96LIaZVRI7fJR8IZHwCDi
+b3ds5iB9Q+5ePbX0aNZvhKU=
+-----END PRIVATE KEY-----
\ No newline at end of file
diff --git a/lib/helper/public.pem b/lib/helper/public.pem
new file mode 100644
index 0000000..ba97a7e
--- /dev/null
+++ b/lib/helper/public.pem
@@ -0,0 +1,9 @@
+-----BEGIN PUBLIC KEY-----
+MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyKKVoHapcOkZz1grI5eY
+OyfM6Ob8OTkSTCICYofNjp70aDc1ioH9cznsIND/wCfRO47lHKai8Gu/H/XatFVX
+k0K5XWxrSGyIyu+KhuXLOeqbSXiVol0uHJFgIvXQbMKm09Rs5+MwbE4pqoKFsHHC
+vJcgANWy/drxBbhePdAxIsLj5qV6AO/xh/Ic+V2Yg3Z46NGfb5hlNrJtQu1QNjix
+MYtESqxdzpdk45OPx3eBUiPei+VGoCXEoCrHBMqBclV+9g8c31X2+23L9AwCV1Ec
+M46p/Jx/bVTLNPK4ALC9UQ/0mFpf5H/tacCO/jAhPF6yE5qNeX1Xc4Bl3VsyvkdQ
+hQIDAQAB
+-----END PUBLIC KEY-----
\ No newline at end of file
diff --git a/lib/orm/entity/token.entity.ts b/lib/orm/entity/token.entity.ts
new file mode 100644
index 0000000..57b3b15
--- /dev/null
+++ b/lib/orm/entity/token.entity.ts
@@ -0,0 +1,25 @@
+import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';
+
+@Entity("tblToken")
+export class Token{
+    @PrimaryGeneratedColumn()
+    ID:number
+
+    @Column({type:"text"})
+    jti:String
+
+
+    @Column({type:"text"})
+    token:String
+
+    @Column({type:"nvarchar",length:50})
+    expirationDate:String
+
+    @Column()
+    userId:String
+
+    @Column({type:"int",default:1,nullable:true})
+    isActive:number
+    
+
+}
\ No newline at end of file
diff --git a/lib/orm/repository/oauth2Repository.ts b/lib/orm/repository/oauth2Repository.ts
index 36e6cd2..25ca83c 100644
--- a/lib/orm/repository/oauth2Repository.ts
+++ b/lib/orm/repository/oauth2Repository.ts
@@ -1,272 +1,271 @@
-import { Repository, EntityRepository, Code, getManager, PrimaryColumn, getConnection } from 'typeorm';
-import { ClietnOuath2 } from '../entity/client.oauth2.entity';
-import { AuthorizationCodeOauth2 } from '../entity/authorizationCode.oauth2.entity';
-import { AccessTokenOauth2 } from '../entity/AccessTokens.oauth2.entity';
-import { RefreshTokenOauth2 } from '../entity/RefreshTokens.oauth2.entity';
-
-import * as jwt from "jsonwebtoken"
-import { Utils } from '../../authorization/utils';
-import { ResponseBody } from './responseBody';
-import { Status } from '../../controller/base.controller';
-
-@EntityRepository(ClietnOuath2)
-export class ClientOAuth2Repository extends Repository<ClietnOuath2>{
-// sample data
-// const clients = [
-//     { id: '1', name: 'Samplr', clientId: 'abc123', clientSecret: 'ssh-secret', isTrusted: false },
-//     { id: '2', name: 'Samplr2', clientId: 'xyz123', clientSecret: 'ssh-password', isTrusted: true },
-//   ];
-
-
-    findOneByClientId(clientID:String){
-        return this.findOne({clientID});
-    }
-
-    findByUsername(username:String){
-        return this.findByUsername(username);
-    }
-
-    addClientAuhtorization(client:ClietnOuath2){
-        let resBody:ResponseBody<any> =new ResponseBody()
-        try {
-          return getManager().transaction(transactionalEntityManager=>{
-                   client.created = new Date()
-                   client.isActive = 1
-                  return this.save(client)
-                              .then(res=>{
-                                          resBody.status = Status.success
-                                          resBody.body = ["1"]
-                                                  return Promise.resolve(resBody)
-                                         })
-                                          .catch(err=>{
-                                                     resBody.status = Status.logic_error
-                                                     resBody.body = [err.message]
-                                                     return Promise.resolve(resBody)
-                                          })
+// import { Repository, EntityRepository, Code, getManager, PrimaryColumn, getConnection } from 'typeorm';
+// import { ClietnOuath2 } from '../entity/client.oauth2.entity';
+// import { AuthorizationCodeOauth2 } from '../entity/authorizationCode.oauth2.entity';
+// import { AccessTokenOauth2 } from '../entity/AccessTokens.oauth2.entity';
+// import { RefreshTokenOauth2 } from '../entity/RefreshTokens.oauth2.entity';
+
+// import * as jwt from "jsonwebtoken"
+// import { ResponseBody } from './responseBody';
+// import { Status } from '../../controller/base.controller';
+
+// @EntityRepository(ClietnOuath2)
+// export class ClientOAuth2Repository extends Repository<ClietnOuath2>{
+// // sample data
+// // const clients = [
+// //     { id: '1', name: 'Samplr', clientId: 'abc123', clientSecret: 'ssh-secret', isTrusted: false },
+// //     { id: '2', name: 'Samplr2', clientId: 'xyz123', clientSecret: 'ssh-password', isTrusted: true },
+// //   ];
+
+
+//     findOneByClientId(clientID:String){
+//         return this.findOne({clientID});
+//     }
+
+//     findByUsername(username:String){
+//         return this.findByUsername(username);
+//     }
+
+//     addClientAuhtorization(client:ClietnOuath2){
+//         let resBody:ResponseBody<any> =new ResponseBody()
+//         try {
+//           return getManager().transaction(transactionalEntityManager=>{
+//                    client.created = new Date()
+//                    client.isActive = 1
+//                   return this.save(client)
+//                               .then(res=>{
+//                                           resBody.status = Status.success
+//                                           resBody.body = ["1"]
+//                                                   return Promise.resolve(resBody)
+//                                          })
+//                                           .catch(err=>{
+//                                                      resBody.status = Status.logic_error
+//                                                      resBody.body = [err.message]
+//                                                      return Promise.resolve(resBody)
+//                                           })
                    
-             })
-        }
-        catch (error) 
-        {
-            resBody.status = Status.server_error
-            resBody.body = [error.message]
-            return Promise.resolve(resBody)
-       }
-    }
+//              })
+//         }
+//         catch (error) 
+//         {
+//             resBody.status = Status.server_error
+//             resBody.body = [error.message]
+//             return Promise.resolve(resBody)
+//        }
+//     }
 
 
-}
+// }
 
-/**
- * @Class AuthorizationCodeOauth2
- */
+// /**
+//  * @Class AuthorizationCodeOauth2
+//  */
 
-@EntityRepository(AuthorizationCodeOauth2)
-export class AuthorizationCodeOauth2Repository extends Repository<AuthorizationCodeOauth2>{
-    findOneById(ID:number){
-        return this.findOne({ID});
-    }
+// @EntityRepository(AuthorizationCodeOauth2)
+// export class AuthorizationCodeOauth2Repository extends Repository<AuthorizationCodeOauth2>{
+//     findOneById(ID:number){
+//         return this.findOne({ID});
+//     }
 
-    findOneByCode(code:string){
-        return this.findOne({code});
-    }
+//     findOneByCode(code:string){
+//         return this.findOne({code});
+//     }
 
-    saveAuthorization(auth:AuthorizationCodeOauth2){
-        return this.save(auth);
-    }
+//     saveAuthorization(auth:AuthorizationCodeOauth2){
+//         return this.save(auth);
+//     }
 
     
 
-    removeByCode(code:string){
-        try {
-            const id:any = jwt.decode(code);
-            const deletedToken = this.findOneById(id) //codes[id];
-           this.remove(id)
-            return Promise.resolve(deletedToken);
-          } catch (error) {
-            return Promise.resolve(undefined);
-          }
-    }
-
-
-}
-
-/**
- * @Repository Access Token
- */
-@EntityRepository(AccessTokenOauth2)
-export class AccessTokenOauth2Repository extends Repository<AccessTokenOauth2>{
-    saveToken(accessToken:AccessTokenOauth2){
-      try {
-          const jwtObject=new Utils().verifyToken(accessToken.token);
-          accessToken.jti=jwtObject.jti;
-
-        return this.save(accessToken);
-      } catch (error) {
-          console.log(error)
-          return Promise.resolve(error)
-      }
-    }
-
-    findOneByUserIdAndClientId(userId:number,clientID:string){
-        return this.findOne({ userId, clientID})
-    }
-
-    findById(id:number){
-        return this.findOne(id)
-    }
-
-    findByJti(jti:String){
-        return this.findOne({jti})
-    }
-
-    findByToken(token:String){
-        try {
-            const jwtObject=new Utils().verifyToken(token);
-            return this.findOne({jti:jwtObject.jti}) 
+//     removeByCode(code:string){
+//         try {
+//             const id:any = jwt.decode(code);
+//             const deletedToken = this.findOneById(id) //codes[id];
+//            this.remove(id)
+//             return Promise.resolve(deletedToken);
+//           } catch (error) {
+//             return Promise.resolve(undefined);
+//           }
+//     }
+
+
+// }
+
+// /**
+//  * @Repository Access Token
+//  */
+// @EntityRepository(AccessTokenOauth2)
+// export class AccessTokenOauth2Repository extends Repository<AccessTokenOauth2>{
+//     saveToken(accessToken:AccessTokenOauth2){
+//       try {
+//           const jwtObject=new Utils().verifyToken(accessToken.token);
+//           accessToken.jti=jwtObject.jti;
+
+//         return this.save(accessToken);
+//       } catch (error) {
+//           console.log(error)
+//           return Promise.resolve(error)
+//       }
+//     }
+
+//     findOneByUserIdAndClientId(userId:number,clientID:string){
+//         return this.findOne({ userId, clientID})
+//     }
+
+//     findById(id:number){
+//         return this.findOne(id)
+//     }
+
+//     findByJti(jti:String){
+//         return this.findOne({jti})
+//     }
+
+//     findByToken(token:String){
+//         try {
+//             const jwtObject=new Utils().verifyToken(token);
+//             return this.findOne({jti:jwtObject.jti}) 
             
-        } catch (error) {
-            console.log(error)
-            return Promise.resolve(error)
-        }
+//         } catch (error) {
+//             console.log(error)
+//             return Promise.resolve(error)
+//         }
         
-    }
-/**
- * Deletes/Revokes an access token by getting the ID and removing it from the storage.
- * @param   {String}  token - The token to decode to get the id of the access token to delete.
- * @returns {Promise} resolved with the deleted token
- */
-    deleteByToken(token:string): Promise<AccessTokenOauth2>{
-      //  console.log("remove token from access token")
-        try {
-            const jwt=new Utils().verifyToken(token)   //jwt.decode(token);
-            const deletedToken = this.findOne({jti:jwt.jti})
-            deletedToken.then(token=>this.remove(token))
-           // console.log("Access Token removed")
-            return deletedToken; // promise object
-          } catch (error) {
-              console.log(error)
-           // console.log("error when delete access token")
-            return Promise.resolve(undefined);
-          }
-    }
-
-
-    /**
- * Deletes/Revokes an access token by getting the ID and removing it from the storage.
- * @param   {String}  token - The token to decode to get the id of the access token to delete.
- * @returns {Promise} resolved with the deleted token
- */
-updateActiveTokenByUserID(userId:number){
-  //  console.log("update access token "+userId);
-    try {
-
-        getConnection()
-        .createQueryBuilder()
-        .update(AccessTokenOauth2)
-        .set({ 
-            isActive: "0"
-        })
-        .where("userId = :userId", { userId: userId })
-        .execute();
+//     }
+// /**
+//  * Deletes/Revokes an access token by getting the ID and removing it from the storage.
+//  * @param   {String}  token - The token to decode to get the id of the access token to delete.
+//  * @returns {Promise} resolved with the deleted token
+//  */
+//     deleteByToken(token:string): Promise<AccessTokenOauth2>{
+//       //  console.log("remove token from access token")
+//         try {
+//             const jwt=new Utils().verifyToken(token)   //jwt.decode(token);
+//             const deletedToken = this.findOne({jti:jwt.jti})
+//             deletedToken.then(token=>this.remove(token))
+//            // console.log("Access Token removed")
+//             return deletedToken; // promise object
+//           } catch (error) {
+//               console.log(error)
+//            // console.log("error when delete access token")
+//             return Promise.resolve(undefined);
+//           }
+//     }
+
+
+//     /**
+//  * Deletes/Revokes an access token by getting the ID and removing it from the storage.
+//  * @param   {String}  token - The token to decode to get the id of the access token to delete.
+//  * @returns {Promise} resolved with the deleted token
+//  */
+// updateActiveTokenByUserID(userId:number){
+//   //  console.log("update access token "+userId);
+//     try {
+
+//         getConnection()
+//         .createQueryBuilder()
+//         .update(AccessTokenOauth2)
+//         .set({ 
+//             isActive: "0"
+//         })
+//         .where("userId = :userId", { userId: userId })
+//         .execute();
         
-      } catch (error) {
-          console.log(error)
-      }
-}
-
-
-
-
-
-}
-
-/**
- * @Repository Access Token
- */
-@EntityRepository(RefreshTokenOauth2)
-export class RefreshTokenOauth2Repository extends Repository<RefreshTokenOauth2>{
-
-
-    //**  */
-    saveToken(refreshToken:RefreshTokenOauth2){
-        try {
-            this.updateActiveTokenByUserID(refreshToken.userID)
-            const jwt=new Utils().verifyToken(refreshToken.token)   //jwt.decode(token);
-            refreshToken.jti=jwt.jti
-            return this.save(refreshToken);
-        } catch (error) {
-            console.log(error)
-            return Promise.resolve(error)
-        }
-    }
-
-    findByJti(jti:String){
-        return this.findOne({jti})
-    }
-
-  /**
-   * 
-   * @param token refresh token
-   */
-    findByToken(token):Promise<RefreshTokenOauth2>{
-        try{
-            const jwt=new Utils().verifyToken(token)   //jwt.decode(token);
-            console.log(jwt)
-            return this.findByJti(jwt.jti)
-        }
-        catch(error){
-            console.log("RefreshTokenOauth2Repository - findByToken : "+error)
-        }
-        return Promise.resolve(undefined)
-    }
-
-    findOneByUserIdAndClientId(userID:number,clientID:string){
-        return this.findOne({ userID, clientID})
-    }
-
-/**
- * Deletes/Revokes an refresh token by getting the ID and removing it from the storage.
- * @param   {String}  token - The token to decode to get the id of the refresh token to delete.
- * @returns {Promise} resolved with the deleted token
- */
-    deleteByToken(token:string): Promise<any>{
-        try {
-            const jwt=new Utils().verifyToken(token)   //jwt.decode(token);
-            const deletedToken =  this.findOne({jti:jwt.jti})
-            deletedToken.then(object=>this.remove(object))
-            return deletedToken;
-          } catch (error) {
-              console.log(error)
-            return Promise.resolve(undefined);
-          }
-    }
-
-
-    /**
- * Deletes/Revokes an access token by getting the ID and removing it from the storage.
- * @param   {String}  token - The token to decode to get the id of the access token to delete.
- * @returns {Promise} resolved with the deleted token
- */
-updateActiveTokenByUserID(userID:number){
-    console.log("update old refresh token to zero by userID "+userID)
-    try {
-        getConnection()
-        .createQueryBuilder()
-        .update(RefreshTokenOauth2)
-        .set({ 
-            isActive: "0"
-        })
-        .where("userID = :userID", { userID: userID })
-        .execute();
+//       } catch (error) {
+//           console.log(error)
+//       }
+// }
+
+
+
+
+
+// }
+
+// /**
+//  * @Repository Access Token
+//  */
+// @EntityRepository(RefreshTokenOauth2)
+// export class RefreshTokenOauth2Repository extends Repository<RefreshTokenOauth2>{
+
+
+//     //**  */
+//     saveToken(refreshToken:RefreshTokenOauth2){
+//         try {
+//             this.updateActiveTokenByUserID(refreshToken.userID)
+//             const jwt=new Utils().verifyToken(refreshToken.token)   //jwt.decode(token);
+//             refreshToken.jti=jwt.jti
+//             return this.save(refreshToken);
+//         } catch (error) {
+//             console.log(error)
+//             return Promise.resolve(error)
+//         }
+//     }
+
+//     findByJti(jti:String){
+//         return this.findOne({jti})
+//     }
+
+//   /**
+//    * 
+//    * @param token refresh token
+//    */
+//     findByToken(token):Promise<RefreshTokenOauth2>{
+//         try{
+//             const jwt=new Utils().verifyToken(token)   //jwt.decode(token);
+//             console.log(jwt)
+//             return this.findByJti(jwt.jti)
+//         }
+//         catch(error){
+//             console.log("RefreshTokenOauth2Repository - findByToken : "+error)
+//         }
+//         return Promise.resolve(undefined)
+//     }
+
+//     findOneByUserIdAndClientId(userID:number,clientID:string){
+//         return this.findOne({ userID, clientID})
+//     }
+
+// /**
+//  * Deletes/Revokes an refresh token by getting the ID and removing it from the storage.
+//  * @param   {String}  token - The token to decode to get the id of the refresh token to delete.
+//  * @returns {Promise} resolved with the deleted token
+//  */
+//     deleteByToken(token:string): Promise<any>{
+//         try {
+//             const jwt=new Utils().verifyToken(token)   //jwt.decode(token);
+//             const deletedToken =  this.findOne({jti:jwt.jti})
+//             deletedToken.then(object=>this.remove(object))
+//             return deletedToken;
+//           } catch (error) {
+//               console.log(error)
+//             return Promise.resolve(undefined);
+//           }
+//     }
+
+
+//     /**
+//  * Deletes/Revokes an access token by getting the ID and removing it from the storage.
+//  * @param   {String}  token - The token to decode to get the id of the access token to delete.
+//  * @returns {Promise} resolved with the deleted token
+//  */
+// updateActiveTokenByUserID(userID:number){
+//     console.log("update old refresh token to zero by userID "+userID)
+//     try {
+//         getConnection()
+//         .createQueryBuilder()
+//         .update(RefreshTokenOauth2)
+//         .set({ 
+//             isActive: "0"
+//         })
+//         .where("userID = :userID", { userID: userID })
+//         .execute();
         
-      } catch (error) {
-          console.log(error)
-    }
+//       } catch (error) {
+//           console.log(error)
+//     }
 
-}
+// }
 
 
-}
+// }
 
 
diff --git a/lib/orm/repository/token.repository.ts b/lib/orm/repository/token.repository.ts
new file mode 100644
index 0000000..d2035a2
--- /dev/null
+++ b/lib/orm/repository/token.repository.ts
@@ -0,0 +1,74 @@
+
+import { Token } from '../entity/token.entity';
+import { ResponseBody } from './responseBody';
+import { EntityRepository, Repository } from 'typeorm';
+import { Status } from '../../controller/base.controller';
+
+@EntityRepository(Token)
+export class TokenRepository extends Repository<Token>{
+    res: ResponseBody<any> = new ResponseBody()
+    /**
+     * 
+     * @param token 
+     * @description for save new ,delete (set by status), update existing record
+     */
+    async saveToken(token: Token) {
+        try {
+            return await this.save(token)
+                .then(
+                    async x => {
+                        this.res.status = Status.success
+                        this.res.body = ["Success"]
+                        return Promise.resolve(this.res)
+                    })
+        } catch (error) {
+            this.res.status = Status.server_error
+            this.res.body = [error.message]
+            return Promise.resolve(this.res)
+        }
+    }
+
+    /**
+ * 
+ * @param jti 
+ * @description find token by jti
+ */
+    async findToken(jti: String) {
+        try {
+            return await this.createQueryBuilder("token").select().where("token.isActive=1").getMany()
+                .then(
+                    async x => {
+                        this.res.status = Status.success
+                        this.res.body = ["Success"]
+                        return Promise.resolve(this.res)
+                    })
+        } catch (error) {
+            this.res.status = Status.server_error
+            this.res.body = [error.message]
+            return Promise.resolve(this.res)
+        }
+    }
+
+
+    /**
+ * 
+ * @param token 
+ * @description find token by jti
+ */
+    async deleteToken(jti: String) {
+        try {
+            return await this.update({ 'jti': jti }, { isActive: 0 })
+                .then(
+                    async x => {
+                        this.res.status = Status.success
+                        this.res.body = ["Success"]
+                        return Promise.resolve(this.res)
+                    })
+        } catch (error) {
+            this.res.status = Status.server_error
+            this.res.body = [error.message]
+            return Promise.resolve(this.res)
+        }
+    }
+
+}
\ No newline at end of file
diff --git a/lib/orm/repository/user.repository.ts b/lib/orm/repository/user.repository.ts
index 39dd4c9..f0eca5a 100644
--- a/lib/orm/repository/user.repository.ts
+++ b/lib/orm/repository/user.repository.ts
@@ -10,87 +10,112 @@ import { Department } from '../entity/department';
  * @Rina Chen
  */
 @EntityRepository(User)
-export class UserRepository extends  Repository<User>
+export class UserRepository extends Repository<User>
 {
 
-     
-  /**
-   * @method findByUsername
-   * @param userName 
-   */
-    findByUsername(userName:String):Promise<any>{
+
+    /**
+     * @method findByUsername
+     * @param userName 
+     */
+    findByUsername(userName: String): Promise<any> {
         try {
             return this.createQueryBuilder("user")
-                        .select("user.ID")
-                        .addSelect("user.userName")
-                        .addSelect("user.password")
-                        .where("username = :username and isActive=1",{username:userName})
-                        .getOne();
+                .select("user.ID")
+                .addSelect("user.userName")
+                .addSelect("user.password")
+                .where("username = :username and isActive=1", { username: userName })
+                .getOne();
         } catch (error) {
-            console.log("UserRepository -> findByUsername "+error)
+            console.log("UserRepository -> findByUsername " + error)
             return Promise.resolve(error)
         }
     }
 
-  /**
-   * @method findUserByID
-   * @param ID 
-   */
-   async findUserByID(ID:number){
+    /**
+        * @method findUser
+        * @param userName , pasword
+        */
+    findUser(_username: String, _password: String): Promise<any> {
         try {
-          return  this.createQueryBuilder("user")
-                              .leftJoinAndSelect("user.group","group")
-                              .leftJoinAndSelect("group.department","department")
-                              .leftJoinAndSelect("group.groupPermission","permission")
-                              .leftJoinAndSelect("permission.page","page")
-                            //   .innerJoinAndSelect("tblDepartment","dp","dg.tblDepartmentID=dp.ID")
-                              .where("user.ID=:ID and user.isActive=1",{ID:ID})
-                       //       .cache(true)
-                              .getOne()
-                              .then(x=>{
-                                  console.log(x)
-                                  let res:ResponseBody<any>  = new ResponseBody()
-                                  res.body = [x]
-                                  res.status = Status.success
-                                  return Promise.resolve(res)
-                              })
-                              .catch(error=>{
-                                let  resBody:ResponseBody<any> = new ResponseBody()
-                                resBody.status = Status.server_error
-                                resBody.body=[error.message]
-                                return Promise.resolve(resBody)
-                              })
+            return this.createQueryBuilder("user")
+                .select('user.ID')
+                .addSelect('user.password')
+                .innerJoinAndSelect("user.group", "group")
+                .where("username = :username and isActive=1", { username: _username })
+                .getOne().then(q => {
+                    let res: ResponseBody<any> = new ResponseBody()
+                    res.body = [q]
+                    res.status = Status.success
+                    return Promise.resolve(res)
+                })
+        } catch (error) {
+            let resBody: ResponseBody<any> = new ResponseBody()
+            resBody.status = Status.server_error
+            resBody.body = [error.message]
+            return Promise.resolve(resBody);
+        }
+    }
+
+    /**
+     * @method findUserByID
+     * @param ID 
+     */
+    async findUserByID(ID: number) {
+        try {
+            return this.createQueryBuilder("user")
+                .leftJoinAndSelect("user.group", "group")
+                .leftJoinAndSelect("group.department", "department")
+                .leftJoinAndSelect("group.groupPermission", "permission")
+                .leftJoinAndSelect("permission.page", "page")
+                //   .innerJoinAndSelect("tblDepartment","dp","dg.tblDepartmentID=dp.ID")
+                .where("user.ID=:ID and user.isActive=1", { ID: ID })
+                //       .cache(true)
+                .getOne()
+                .then(x => {
+                    console.log(x)
+                    let res: ResponseBody<any> = new ResponseBody()
+                    res.body = [x]
+                    res.status = Status.success
+                    return Promise.resolve(res)
+                })
+                .catch(error => {
+                    let resBody: ResponseBody<any> = new ResponseBody()
+                    resBody.status = Status.server_error
+                    resBody.body = [error.message]
+                    return Promise.resolve(resBody)
+                })
         } catch (error) {
-            console.log("UserRepository->findById "+error)
-            let  resBody:ResponseBody<any> = new ResponseBody()
+            console.log("UserRepository->findById " + error)
+            let resBody: ResponseBody<any> = new ResponseBody()
             resBody.status = Status.server_error
-            resBody.body=[error.message]
+            resBody.body = [error.message]
             return Promise.resolve(resBody)
-       }
+        }
     }
 
     /**
      * @method updateUser
      * @param user 
      */
-    updateUser(user:User):Promise<any>{
-        let resBody:ResponseBody<String> = new ResponseBody()
+    updateUser(user: User): Promise<any> {
+        let resBody: ResponseBody<String> = new ResponseBody()
         try {
-          return    this.update(user.ID,user)
-            .then(res=>{
-                resBody.body=["1"]
-                resBody.status=Status.success
-                return Promise.resolve(resBody)
-            })
-            .catch(err=>{
-                resBody.body=[err.message]
-                resBody.status=Status.logic_error
-                return Promise.resolve(resBody)
-            })
+            return this.update(user.ID, user)
+                .then(res => {
+                    resBody.body = ["1"]
+                    resBody.status = Status.success
+                    return Promise.resolve(resBody)
+                })
+                .catch(err => {
+                    resBody.body = [err.message]
+                    resBody.status = Status.logic_error
+                    return Promise.resolve(resBody)
+                })
         } catch (error) {
-            resBody.body=[error]
-            resBody.status=Status.server_error
-           return Promise.resolve(resBody)
+            resBody.body = [error]
+            resBody.status = Status.server_error
+            return Promise.resolve(resBody)
         }
     }
 
@@ -98,29 +123,29 @@ export class UserRepository extends  Repository<User>
      * @method updateUsernamePassword
      * @param user : {ID:number,userName:string,password:any}
      */
-    updateUsernamePassword(user:any){
-        let resBody:ResponseBody<String> = new ResponseBody()
+    updateUsernamePassword(user: any) {
+        let resBody: ResponseBody<String> = new ResponseBody()
         try {
             this.update(
                 user.ID,
                 {
-                    userName:user.userName,
-                    password:user.password
+                    userName: user.userName,
+                    password: user.password
                 }
             )
-            .then(res=>{
-                resBody.status = Status.success
-                resBody.body = ["1"]
-                return Promise.resolve(resBody)
-            })
-            .catch(err=>{
-                resBody.status = Status.logic_error
-                resBody.body = [err.message]
-                return Promise.resolve(resBody)
-            })
-        } 
+                .then(res => {
+                    resBody.status = Status.success
+                    resBody.body = ["1"]
+                    return Promise.resolve(resBody)
+                })
+                .catch(err => {
+                    resBody.status = Status.logic_error
+                    resBody.body = [err.message]
+                    return Promise.resolve(resBody)
+                })
+        }
         catch (error) {
-            console.log("UserRepository->updateUsernamePassword "+error)
+            console.log("UserRepository->updateUsernamePassword " + error)
             resBody.body = [error]
             resBody.status = Status.server_error
             return Promise.resolve(resBody)
@@ -128,63 +153,62 @@ export class UserRepository extends  Repository<User>
     }
 
 
-/**
- * @method addUser
- * @param user 
- * 
- */
-addUser(user:User) : Promise<any>{
-    let resBody:ResponseBody<any> =new ResponseBody()
+    /**
+     * @method addUser
+     * @param user 
+     * 
+     */
+    addUser(user: User): Promise<any> {
+        let resBody: ResponseBody<any> = new ResponseBody()
         try {
-          return getManager().transaction(transactionalEntityManager=>{
-                   user.created = new Date()
-                   user.isActive = 1
-                  return this.save(user)
-                              .then(res=>{
-                                          resBody.status = Status.success
-                                          resBody.body = ["1"]
-                                                  return Promise.resolve(resBody)
-                                         })
-                                          .catch(err=>{
-                                                     resBody.status = Status.logic_error
-                                                     resBody.body = [err.message]
-                                                     return Promise.resolve(resBody)
-                                          })
-                   
-             })
+            return getManager().transaction(transactionalEntityManager => {
+                user.created = new Date()
+                user.isActive = 1
+                return this.save(user)
+                    .then(res => {
+                        resBody.status = Status.success
+                        resBody.body = ["1"]
+                        return Promise.resolve(resBody)
+                    })
+                    .catch(err => {
+                        resBody.status = Status.logic_error
+                        resBody.body = [err.message]
+                        return Promise.resolve(resBody)
+                    })
+
+            })
         }
-        catch (error) 
-        {
+        catch (error) {
             resBody.status = Status.server_error
             resBody.body = [error.message]
             return Promise.resolve(resBody)
-       }
-}
+        }
+    }
 
- /**
-     * @method getUserByGroups
-     */
-    getUserByGroups(groupID:number):Promise<any>{
-        let resBody : ResponseBody<any> = new ResponseBody()
+    /**
+        * @method getUserByGroups
+        */
+    getUserByGroups(groupID: number): Promise<any> {
+        let resBody: ResponseBody<any> = new ResponseBody()
         try {
-           resBody.status = Status.success
-          return this.createQueryBuilder("user")
-                    .select("user.ID")
-                    .addSelect("user.firstName")
-                    .addSelect("user.lastName")
-                     .where("user.isActive=1 and user.groupID = :groupID",{groupID:groupID}) 
-                     .getMany().then(x=>{
-                        let rr : ResponseBody<any> = new ResponseBody()
-                            rr.body = x
-                            rr.status = Status.success
-                            return Promise.resolve(rr)
-                     })
-                     .catch(err=>{
-                        let rr : ResponseBody<any> = new ResponseBody()
-                        rr.body = [err]
-                        rr.status = Status.success
-                        return Promise.resolve(rr)
-                     });
+            resBody.status = Status.success
+            return this.createQueryBuilder("user")
+                .select("user.ID")
+                .addSelect("user.firstName")
+                .addSelect("user.lastName")
+                .where("user.isActive=1 and user.groupID = :groupID", { groupID: groupID })
+                .getMany().then(x => {
+                    let rr: ResponseBody<any> = new ResponseBody()
+                    rr.body = x
+                    rr.status = Status.success
+                    return Promise.resolve(rr)
+                })
+                .catch(err => {
+                    let rr: ResponseBody<any> = new ResponseBody()
+                    rr.body = [err]
+                    rr.status = Status.success
+                    return Promise.resolve(rr)
+                });
         } catch (error) {
             console.log(error)
             resBody.status = Status.server_error
@@ -196,29 +220,29 @@ addUser(user:User) : Promise<any>{
     /**
      * @method getListUserByPosition
      */
-    getListUserByPosition(positionID:number):Promise<any>{
-        let resBody : ResponseBody<any> = new ResponseBody()
+    getListUserByPosition(positionID: number): Promise<any> {
+        let resBody: ResponseBody<any> = new ResponseBody()
         try {
-           resBody.status = Status.success
-          return this.createQueryBuilder("user")
-                    .select("user.ID")
-                    .addSelect("user.firstName")
-                    .addSelect("user.lastName")
-                    .addSelect("user.telephone1")
-                    .addSelect("user.telephone2")
-                     .where("user.isActive=1 and user.positionID = :positionID",{positionID:positionID}) 
-                     .getMany().then(x=>{
-                        let rr : ResponseBody<any> = new ResponseBody()
-                            rr.body = x
-                            rr.status = Status.success
-                            return Promise.resolve(rr)
-                     })
-                     .catch(err=>{
-                        let rr : ResponseBody<any> = new ResponseBody()
-                        rr.body = [err]
-                        rr.status = Status.logic_error
-                        return Promise.resolve(rr)
-                     });
+            resBody.status = Status.success
+            return this.createQueryBuilder("user")
+                .select("user.ID")
+                .addSelect("user.firstName")
+                .addSelect("user.lastName")
+                .addSelect("user.telephone1")
+                .addSelect("user.telephone2")
+                .where("user.isActive=1 and user.positionID = :positionID", { positionID: positionID })
+                .getMany().then(x => {
+                    let rr: ResponseBody<any> = new ResponseBody()
+                    rr.body = x
+                    rr.status = Status.success
+                    return Promise.resolve(rr)
+                })
+                .catch(err => {
+                    let rr: ResponseBody<any> = new ResponseBody()
+                    rr.body = [err]
+                    rr.status = Status.logic_error
+                    return Promise.resolve(rr)
+                });
         } catch (error) {
             console.log(error)
             resBody.status = Status.server_error
@@ -230,27 +254,27 @@ addUser(user:User) : Promise<any>{
     /**
      * @method getListUserByPosition
      */
-    getListUserOperation():Promise<any>{
-        let resBody : ResponseBody<any> = new ResponseBody()
+    getListUserOperation(): Promise<any> {
+        let resBody: ResponseBody<any> = new ResponseBody()
         try {
-           resBody.status = Status.success
-          return this.createQueryBuilder("user")
-                    .select("user.ID")
-                    .addSelect("user.firstName")
-                    .addSelect("user.lastName")
-                     .where("user.groupID = 1 and user.isActive=1 ") 
-                     .getMany().then(x=>{
-                        let rr : ResponseBody<any> = new ResponseBody()
-                            rr.body = x
-                            rr.status = Status.success
-                            return Promise.resolve(rr)
-                     })
-                     .catch(err=>{
-                        let rr : ResponseBody<any> = new ResponseBody()
-                        rr.body = [err]
-                        rr.status = Status.logic_error
-                        return Promise.resolve(rr)
-                     });
+            resBody.status = Status.success
+            return this.createQueryBuilder("user")
+                .select("user.ID")
+                .addSelect("user.firstName")
+                .addSelect("user.lastName")
+                .where("user.groupID = 1 and user.isActive=1 ")
+                .getMany().then(x => {
+                    let rr: ResponseBody<any> = new ResponseBody()
+                    rr.body = x
+                    rr.status = Status.success
+                    return Promise.resolve(rr)
+                })
+                .catch(err => {
+                    let rr: ResponseBody<any> = new ResponseBody()
+                    rr.body = [err]
+                    rr.status = Status.logic_error
+                    return Promise.resolve(rr)
+                });
         } catch (error) {
             console.log(error)
             resBody.status = Status.server_error
@@ -265,26 +289,26 @@ addUser(user:User) : Promise<any>{
      * @param pageIndex 
      * @param pageSize 
      */
-getListUsers(pageIndex,pageSize):Promise<any>{
-        let resBody : ResponseBody<any> = new ResponseBody()
+    getListUsers(pageIndex, pageSize): Promise<any> {
+        let resBody: ResponseBody<any> = new ResponseBody()
         try {
-           resBody.status = Status.success
-          return this.createQueryBuilder("user")
-                     .skip(pageIndex)
-                     .take(pageSize)
-                     .where("user.isActive='1'") 
-                     .getMany().then(x=>{
-                        let rr : ResponseBody<any> = new ResponseBody()
-                            rr.body = x
-                            rr.status = Status.success
-                            return Promise.resolve(rr)
-                     })
-                     .catch(err=>{
-                        let rr : ResponseBody<any> = new ResponseBody()
-                        rr.body = [err]
-                        rr.status = Status.success
-                        return Promise.resolve(rr)
-                     });
+            resBody.status = Status.success
+            return this.createQueryBuilder("user")
+                .skip(pageIndex)
+                .take(pageSize)
+                .where("user.isActive='1'")
+                .getMany().then(x => {
+                    let rr: ResponseBody<any> = new ResponseBody()
+                    rr.body = x
+                    rr.status = Status.success
+                    return Promise.resolve(rr)
+                })
+                .catch(err => {
+                    let rr: ResponseBody<any> = new ResponseBody()
+                    rr.body = [err]
+                    rr.status = Status.success
+                    return Promise.resolve(rr)
+                });
         } catch (error) {
             console.log(error)
             resBody.status = Status.server_error
@@ -293,74 +317,74 @@ getListUsers(pageIndex,pageSize):Promise<any>{
         }
     }
 
-/**
- * @method getListUsersByType
- */
-public getListUsersByType(userType:number):Promise<any>{
-    let resBody : ResponseBody<any> = new ResponseBody()
-    try {
-       resBody.status = Status.success
-      return this.createQueryBuilder("user")
-                 .select("user.ID")
-                 .addSelect("user.userName")
-                 .where("user.isActive=1 and user.userType=:userType",{"userType":userType})
-                 .getMany().then(x=>{
-                    let rr : ResponseBody<any> = new ResponseBody()
-                        rr.body = x
-                        rr.status = Status.success
-                        return Promise.resolve(rr)
-                 });
-    } catch (error) {
-        console.log(error)
-        resBody.status = Status.server_error
-        resBody.body = [error]
-        return Promise.resolve(resBody);
+    /**
+     * @method getListUsersByType
+     */
+    public getListUsersByType(userType: number): Promise<any> {
+        let resBody: ResponseBody<any> = new ResponseBody()
+        try {
+            resBody.status = Status.success
+            return this.createQueryBuilder("user")
+                .select("user.ID")
+                .addSelect("user.userName")
+                .where("user.isActive=1 and user.userType=:userType", { "userType": userType })
+                .getMany().then(x => {
+                    let rr: ResponseBody<any> = new ResponseBody()
+                    rr.body = x
+                    rr.status = Status.success
+                    return Promise.resolve(rr)
+                });
+        } catch (error) {
+            console.log(error)
+            resBody.status = Status.server_error
+            resBody.body = [error]
+            return Promise.resolve(resBody);
+        }
     }
-}
 
     /**
      * @@method getCountUsers
      */
-getCountUsers():Promise<any>{
-    
-      try {
-       return this.createQueryBuilder("user").getCount().then(
-            x =>{
-                let res:ResponseBody<any> = new ResponseBody()
-                res.status = Status.success
-                res.body = [x]
-                return Promise.resolve(res)
-            }
-        )
-      } catch (error) {
-        let res:ResponseBody<any> = new ResponseBody()
+    getCountUsers(): Promise<any> {
+
+        try {
+            return this.createQueryBuilder("user").getCount().then(
+                x => {
+                    let res: ResponseBody<any> = new ResponseBody()
+                    res.status = Status.success
+                    res.body = [x]
+                    return Promise.resolve(res)
+                }
+            )
+        } catch (error) {
+            let res: ResponseBody<any> = new ResponseBody()
             res.status = Status.server_error
             res.body = [error]
-        return Promise.resolve(res)
-      }
+            return Promise.resolve(res)
+        }
     }
 
     /**
      * @method removeUserByID
      * @param ID 
      */
-    removeUserByID(ID){
+    removeUserByID(ID) {
         try {
-            return  this.update(ID,{
-                isActive:0,
-            }).then( x =>{
-                let affectedRows:any = x.raw.affectedRows
-                
-                let res:ResponseBody<any> = new ResponseBody()
-                res.body=["Remove"]
-                res.status = affectedRows == 1? Status.success:Status.logic_error
+            return this.update(ID, {
+                isActive: 0,
+            }).then(x => {
+                let affectedRows: any = x.raw.affectedRows
+
+                let res: ResponseBody<any> = new ResponseBody()
+                res.body = ["Remove"]
+                res.status = affectedRows == 1 ? Status.success : Status.logic_error
                 return Promise.resolve(res)
             })
         } catch (error) {
-              let res:ResponseBody<any> = new ResponseBody()
-              res.status = Status.server_error
-              res.body = [error]
-             return Promise.resolve(res)
+            let res: ResponseBody<any> = new ResponseBody()
+            res.status = Status.server_error
+            res.body = [error]
+            return Promise.resolve(res)
         }
     }
 
diff --git a/package-lock.json b/package-lock.json
index 32b9c5d..8871d66 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -13,6 +13,11 @@
         "regenerator-runtime": "^0.12.0"
       }
     },
+    "@sqltools/formatter": {
+      "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/@sqltools/formatter/-/formatter-1.2.3.tgz",
+      "integrity": "sha512-O3uyB/JbkAEMZaP3YqyHH7TMnex7tWyCbCI4EfJdOCoN6HIhqdJBWTM6aCCiWQ/5f5wxjgU735QAIpJbjDvmzg=="
+    },
     "@types/body-parser": {
       "version": "1.17.0",
       "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.17.0.tgz",
@@ -81,69 +86,6 @@
       "resolved": "https://registry.npmjs.org/@types/node/-/node-13.13.12.tgz",
       "integrity": "sha512-zWz/8NEPxoXNT9YyF2osqyA9WjssZukYpgI4UYZpOjcyqwIUqWGkcCionaEb9Ki+FULyPyvNFpg/329Kd2/pbw=="
     },
-    "@types/oauth2orize": {
-      "version": "1.8.5",
-      "resolved": "https://registry.npmjs.org/@types/oauth2orize/-/oauth2orize-1.8.5.tgz",
-      "integrity": "sha512-V+Fb5qxD9jKhAKv7tzHNwHgbWrTibJZTsAitSQNqaan6VOfPUiNXf2yXf6Pdarbr1KQ4lzx/hLAoGcac5rcTbQ==",
-      "requires": {
-        "@types/express": "*",
-        "@types/node": "*"
-      }
-    },
-    "@types/passport": {
-      "version": "0.3.5",
-      "resolved": "https://registry.npmjs.org/@types/passport/-/passport-0.3.5.tgz",
-      "integrity": "sha512-J7mdY1nnhjdbkXT84S3WsyrTtDf2KqUJ9JW3Y9vxA5GuXlejIuvwHw9A2TdNklAqPG2Q0TWqlsA2a2GIeV1jYA==",
-      "requires": {
-        "@types/express": "*"
-      }
-    },
-    "@types/passport-http": {
-      "version": "0.3.7",
-      "resolved": "https://registry.npmjs.org/@types/passport-http/-/passport-http-0.3.7.tgz",
-      "integrity": "sha512-NHolBs9oooaVgVilr6poaqqSEWM44/WsLoRHCTnbbWZtKUHtoVqbLvJljinW+/o2d++FR+BkdoNYYayThYtLHQ==",
-      "requires": {
-        "@types/express": "*",
-        "@types/passport": "*"
-      }
-    },
-    "@types/passport-http-bearer": {
-      "version": "1.0.33",
-      "resolved": "https://registry.npmjs.org/@types/passport-http-bearer/-/passport-http-bearer-1.0.33.tgz",
-      "integrity": "sha512-S9VqrOx5GTcMNujuL2wXUwRCbYwNDSyaIv0B8rDAuWz8E2aM7oFCfEuNbNwV0SsVul0CcK4ftsKf63ETSprt1w==",
-      "requires": {
-        "@types/express": "*",
-        "@types/passport": "*"
-      }
-    },
-    "@types/passport-local": {
-      "version": "1.0.33",
-      "resolved": "https://registry.npmjs.org/@types/passport-local/-/passport-local-1.0.33.tgz",
-      "integrity": "sha512-+rn6ZIxje0jZ2+DAiWFI8vGG7ZFKB0hXx2cUdMmudSWsigSq6ES7Emso46r4HJk0qCgrZVfI8sJiM7HIYf4SbA==",
-      "requires": {
-        "@types/express": "*",
-        "@types/passport": "*",
-        "@types/passport-strategy": "*"
-      }
-    },
-    "@types/passport-oauth2-client-password": {
-      "version": "0.1.2",
-      "resolved": "https://registry.npmjs.org/@types/passport-oauth2-client-password/-/passport-oauth2-client-password-0.1.2.tgz",
-      "integrity": "sha512-BPbKhiJiYOy4Zr9QUg6LfWXp1aZ26yS77Aa+CtVO89U/2HUZZo5f/fDRM8+tFYTgOAGsZ9IX/HOfKsfDg6rDxw==",
-      "requires": {
-        "@types/express": "*",
-        "@types/passport": "*"
-      }
-    },
-    "@types/passport-strategy": {
-      "version": "0.2.35",
-      "resolved": "https://registry.npmjs.org/@types/passport-strategy/-/passport-strategy-0.2.35.tgz",
-      "integrity": "sha512-o5D19Jy2XPFoX2rKApykY15et3Apgax00RRLf0RUotPDUsYrQa7x4howLYr9El2mlUApHmCMv5CZ1IXqKFQ2+g==",
-      "requires": {
-        "@types/express": "*",
-        "@types/passport": "*"
-      }
-    },
     "@types/range-parser": {
       "version": "1.2.3",
       "resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.3.tgz",
@@ -166,6 +108,11 @@
         "@types/node": "*"
       }
     },
+    "@types/zen-observable": {
+      "version": "0.8.3",
+      "resolved": "https://registry.npmjs.org/@types/zen-observable/-/zen-observable-0.8.3.tgz",
+      "integrity": "sha512-fbF6oTd4sGGy0xjHPKAt+eS2CrxJ3+6gQ3FGcBoIJR2TLAyCkCyI8JqZNy+FeON0AhVgNJoUumVoZQjBFUqHkw=="
+    },
     "accepts": {
       "version": "1.3.5",
       "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.5.tgz",
@@ -176,16 +123,16 @@
       }
     },
     "ansi-regex": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-3.0.0.tgz",
-      "integrity": "sha1-7QMXwyIGT3lGbAKWa922Bas32Zg="
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
+      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ=="
     },
     "ansi-styles": {
-      "version": "3.2.1",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
-      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
       "requires": {
-        "color-convert": "^1.9.0"
+        "color-convert": "^2.0.1"
       }
     },
     "any-promise": {
@@ -194,17 +141,14 @@
       "integrity": "sha1-q8av7tzqUugJzcA3au0845Y10X8="
     },
     "app-root-path": {
-      "version": "2.1.0",
-      "resolved": "https://registry.npmjs.org/app-root-path/-/app-root-path-2.1.0.tgz",
-      "integrity": "sha1-mL9lmTJ+zqGZMJhm6BQDaP0uZGo="
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/app-root-path/-/app-root-path-3.0.0.tgz",
+      "integrity": "sha512-qMcx+Gy2UZynHjOHOIXPNvpf+9cjvk3cWrBBK7zg4gH9+clobJRb9NGzcT7mQTcV/6Gm/1WelUtqxVXnNlrwcw=="
     },
     "argparse": {
-      "version": "1.0.10",
-      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
-      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
-      "requires": {
-        "sprintf-js": "~1.0.2"
-      }
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
+      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q=="
     },
     "array-flatten": {
       "version": "1.1.1",
@@ -212,14 +156,14 @@
       "integrity": "sha1-ml9pkFGx5wczKPKgCJaLZOopVdI="
     },
     "balanced-match": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.0.tgz",
-      "integrity": "sha1-ibTRmasr7kneFk6gK4nORi1xt2c="
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
+      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw=="
     },
     "base64-js": {
-      "version": "1.3.0",
-      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.3.0.tgz",
-      "integrity": "sha512-ccav/yGvoa80BQDljCxsmmQ3Xvx60/UpBIij5QN21W3wBi/hhIC9OoO+KLpu9IJTS9j4DRVJ3aDDF9cMSoa2lw=="
+      "version": "1.5.1",
+      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
+      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA=="
     },
     "bignumber.js": {
       "version": "4.1.0",
@@ -253,12 +197,12 @@
       }
     },
     "buffer": {
-      "version": "5.2.1",
-      "resolved": "https://registry.npmjs.org/buffer/-/buffer-5.2.1.tgz",
-      "integrity": "sha512-c+Ko0loDaFfuPWiL02ls9Xd3GO3cPVmUobQ6t3rXNUk304u6hGq+8N/kFi+QEIKhzK3uwolVhLzszmfLmMLnqg==",
+      "version": "6.0.3",
+      "resolved": "https://registry.npmjs.org/buffer/-/buffer-6.0.3.tgz",
+      "integrity": "sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==",
       "requires": {
-        "base64-js": "^1.0.2",
-        "ieee754": "^1.1.4"
+        "base64-js": "^1.3.1",
+        "ieee754": "^1.2.1"
       }
     },
     "buffer-equal-constant-time": {
@@ -271,81 +215,66 @@
       "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.0.0.tgz",
       "integrity": "sha1-0ygVQE1olpn4Wk6k+odV3ROpYEg="
     },
-    "camelcase": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-4.1.0.tgz",
-      "integrity": "sha1-1UVjW+HjPFQmScaRc+Xeas+uNN0="
-    },
     "chalk": {
-      "version": "2.4.1",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.1.tgz",
-      "integrity": "sha512-ObN6h1v2fTJSmUXoS3nMQ92LbDK9be4TV+6G+omQlGJFdcUX5heKi1LZ1YnRMIgwTLEj3E24bT6tYni50rlCfQ==",
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
       "requires": {
-        "ansi-styles": "^3.2.1",
-        "escape-string-regexp": "^1.0.5",
-        "supports-color": "^5.3.0"
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
       }
     },
     "cli-highlight": {
-      "version": "1.2.3",
-      "resolved": "https://registry.npmjs.org/cli-highlight/-/cli-highlight-1.2.3.tgz",
-      "integrity": "sha512-cmc4Y2kJuEpT2KZd9pgWWskpDMMfJu2roIcY1Ya/aIItufF5FKsV/NtA6vvdhSUllR8KJfvQDNmIcskU+MKLDg==",
+      "version": "2.1.11",
+      "resolved": "https://registry.npmjs.org/cli-highlight/-/cli-highlight-2.1.11.tgz",
+      "integrity": "sha512-9KDcoEVwyUXrjcJNvHD0NFc/hiwe/WPVYIleQh2O1N2Zro5gWJZ/K+3DGn8w8P/F6FxOgzyC5bxDyHIgCSPhGg==",
       "requires": {
-        "chalk": "^2.3.0",
-        "highlight.js": "^9.6.0",
+        "chalk": "^4.0.0",
+        "highlight.js": "^10.7.1",
         "mz": "^2.4.0",
-        "parse5": "^3.0.3",
-        "yargs": "^10.0.3"
+        "parse5": "^5.1.1",
+        "parse5-htmlparser2-tree-adapter": "^6.0.0",
+        "yargs": "^16.0.0"
       },
       "dependencies": {
         "yargs": {
-          "version": "10.1.2",
-          "resolved": "https://registry.npmjs.org/yargs/-/yargs-10.1.2.tgz",
-          "integrity": "sha512-ivSoxqBGYOqQVruxD35+EyCFDYNEFL/Uo6FcOnz+9xZdZzK0Zzw4r4KhbrME1Oo2gOggwJod2MnsdamSG7H9ig==",
+          "version": "16.2.0",
+          "resolved": "https://registry.npmjs.org/yargs/-/yargs-16.2.0.tgz",
+          "integrity": "sha512-D1mvvtDG0L5ft/jGWkLpG1+m0eQxOfaBvTNELraWj22wSVUMWxZUvYgJYcKh6jGGIkJFhH4IZPQhR4TKpc8mBw==",
           "requires": {
-            "cliui": "^4.0.0",
-            "decamelize": "^1.1.1",
-            "find-up": "^2.1.0",
-            "get-caller-file": "^1.0.1",
-            "os-locale": "^2.0.0",
+            "cliui": "^7.0.2",
+            "escalade": "^3.1.1",
+            "get-caller-file": "^2.0.5",
             "require-directory": "^2.1.1",
-            "require-main-filename": "^1.0.1",
-            "set-blocking": "^2.0.0",
-            "string-width": "^2.0.0",
-            "which-module": "^2.0.0",
-            "y18n": "^3.2.1",
-            "yargs-parser": "^8.1.0"
+            "string-width": "^4.2.0",
+            "y18n": "^5.0.5",
+            "yargs-parser": "^20.2.2"
           }
         }
       }
     },
     "cliui": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/cliui/-/cliui-4.1.0.tgz",
-      "integrity": "sha512-4FG+RSG9DL7uEwRUZXZn3SS34DiDPfzP0VOiEwtUWlE+AR2EIg+hSyvrIgUUfhdgR/UkAeW2QHgeP+hWrXs7jQ==",
+      "version": "7.0.4",
+      "resolved": "https://registry.npmjs.org/cliui/-/cliui-7.0.4.tgz",
+      "integrity": "sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==",
       "requires": {
-        "string-width": "^2.1.1",
-        "strip-ansi": "^4.0.0",
-        "wrap-ansi": "^2.0.0"
+        "string-width": "^4.2.0",
+        "strip-ansi": "^6.0.0",
+        "wrap-ansi": "^7.0.0"
       }
     },
-    "code-point-at": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/code-point-at/-/code-point-at-1.1.0.tgz",
-      "integrity": "sha1-DQcLTQQ6W+ozovGkDi7bPZpMz3c="
-    },
     "color-convert": {
-      "version": "1.9.3",
-      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
-      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
+      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
       "requires": {
-        "color-name": "1.1.3"
+        "color-name": "~1.1.4"
       }
     },
     "color-name": {
-      "version": "1.1.3",
-      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
-      "integrity": "sha1-p9BVi9icQveV3UIyj3QIMcpTvCU="
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
+      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
     },
     "concat-map": {
       "version": "0.0.1",
@@ -387,15 +316,10 @@
       "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
       "integrity": "sha1-tf1UIgqivFq1eqtxQMlAdUUDwac="
     },
-    "cross-spawn": {
-      "version": "5.1.0",
-      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-5.1.0.tgz",
-      "integrity": "sha1-6L0O/uWPz/b4+UUQoKVUu/ojVEk=",
-      "requires": {
-        "lru-cache": "^4.0.1",
-        "shebang-command": "^1.2.0",
-        "which": "^1.2.9"
-      }
+    "crypto-js": {
+      "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/crypto-js/-/crypto-js-4.1.1.tgz",
+      "integrity": "sha512-o2JlM7ydqd3Qk9CA0L4NL6mTzU2sdx96a+oOfPu8Mkl/PK51vSyoi8/rQ8NknZtk44vq15lmhAj9CIAGwgeWKw=="
     },
     "debug": {
       "version": "2.6.9",
@@ -405,11 +329,6 @@
         "ms": "2.0.0"
       }
     },
-    "decamelize": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/decamelize/-/decamelize-1.2.0.tgz",
-      "integrity": "sha1-9lNNFRSCabIDUue+4m9QH5oZEpA="
-    },
     "depd": {
       "version": "1.1.2",
       "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
@@ -420,10 +339,15 @@
       "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.0.4.tgz",
       "integrity": "sha1-l4hXRCxEdJ5CBmE+N5RiBYJqvYA="
     },
+    "dom-walk": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/dom-walk/-/dom-walk-0.1.2.tgz",
+      "integrity": "sha512-6QvTW9mrGeIegrFXdtQi9pk7O/nSK6lSdXW2eqUspN5LWD7UTji2Fqw5V2YLjBpHEoU9Xl/eUWNpDeZvoyOv2w=="
+    },
     "dotenv": {
-      "version": "5.0.1",
-      "resolved": "http://registry.npmjs.org/dotenv/-/dotenv-5.0.1.tgz",
-      "integrity": "sha512-4As8uPrjfwb7VXC+WnLCbXK7y+Ueb2B3zgNCePYfhxS1PYeaO1YTeplffTEcbfLhvFNGLAz90VvJs9yomG7bow=="
+      "version": "8.6.0",
+      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-8.6.0.tgz",
+      "integrity": "sha512-IrPdXQsk2BbzvCBGBOTmmSH5SodmqZNt4ERAZDmW4CT+tL8VtvinqywuANaFu4bOMWki16nqf0e4oC0QIaDr/g=="
     },
     "ecdsa-sig-formatter": {
       "version": "1.0.10",
@@ -438,45 +362,31 @@
       "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
       "integrity": "sha1-WQxhFWsK4vTwJVcyoViyZrxWsh0="
     },
+    "emoji-regex": {
+      "version": "8.0.0",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
+      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
+    },
     "encodeurl": {
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
       "integrity": "sha1-rT/0yG7C0CkyL1oCw6mmBslbP1k="
     },
+    "escalade": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
+      "integrity": "sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw=="
+    },
     "escape-html": {
       "version": "1.0.3",
       "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
       "integrity": "sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg="
     },
-    "escape-string-regexp": {
-      "version": "1.0.5",
-      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
-      "integrity": "sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ="
-    },
-    "esprima": {
-      "version": "4.0.1",
-      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
-      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A=="
-    },
     "etag": {
       "version": "1.8.1",
       "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
       "integrity": "sha1-Qa4u62XvpiJorr/qg6x9eSmbCIc="
     },
-    "execa": {
-      "version": "0.7.0",
-      "resolved": "https://registry.npmjs.org/execa/-/execa-0.7.0.tgz",
-      "integrity": "sha1-lEvs00zEHuMqY6n68nrVpl/Fl3c=",
-      "requires": {
-        "cross-spawn": "^5.0.1",
-        "get-stream": "^3.0.0",
-        "is-stream": "^1.1.0",
-        "npm-run-path": "^2.0.0",
-        "p-finally": "^1.0.0",
-        "signal-exit": "^3.0.0",
-        "strip-eof": "^1.0.0"
-      }
-    },
     "express": {
       "version": "4.16.4",
       "resolved": "https://registry.npmjs.org/express/-/express-4.16.4.tgz",
@@ -548,11 +458,6 @@
         }
       }
     },
-    "figlet": {
-      "version": "1.2.1",
-      "resolved": "https://registry.npmjs.org/figlet/-/figlet-1.2.1.tgz",
-      "integrity": "sha512-qc8gycfnnfOmfvPl7Fi3JeTbcvdmbZkckyUVGGAM02je7Ookvu+bBfKy1I4FKqTsQHCs3ARJ76ip/k98r+OQuQ=="
-    },
     "finalhandler": {
       "version": "1.1.1",
       "resolved": "http://registry.npmjs.org/finalhandler/-/finalhandler-1.1.1.tgz",
@@ -574,14 +479,6 @@
         }
       }
     },
-    "find-up": {
-      "version": "2.1.0",
-      "resolved": "https://registry.npmjs.org/find-up/-/find-up-2.1.0.tgz",
-      "integrity": "sha1-RdG35QbHF93UgndaK3eSCjwMV6c=",
-      "requires": {
-        "locate-path": "^2.0.0"
-      }
-    },
     "forwarded": {
       "version": "0.1.2",
       "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.1.2.tgz",
@@ -598,19 +495,22 @@
       "integrity": "sha1-FQStJSMVjKpA20onh8sBQRmU6k8="
     },
     "get-caller-file": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-1.0.3.tgz",
-      "integrity": "sha512-3t6rVToeoZfYSGd8YoLFR2DJkiQrIiUrGcjvFX2mDw3bn6k2OtwHN0TNCLbBO+w8qTvimhDkv+LSscbJY1vE6w=="
+      "version": "2.0.5",
+      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
+      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg=="
     },
-    "get-stream": {
-      "version": "3.0.0",
-      "resolved": "http://registry.npmjs.org/get-stream/-/get-stream-3.0.0.tgz",
-      "integrity": "sha1-jpQ9E1jcN1VQVOy+LtsFqhdO3hQ="
+    "get-random-values": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/get-random-values/-/get-random-values-1.2.2.tgz",
+      "integrity": "sha512-lMyPjQyl0cNNdDf2oR+IQ/fM3itDvpoHy45Ymo2r0L1EjazeSl13SfbKZs7KtZ/3MDCeueiaJiuOEfKqRTsSgA==",
+      "requires": {
+        "global": "^4.4.0"
+      }
     },
     "glob": {
-      "version": "7.1.3",
-      "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.3.tgz",
-      "integrity": "sha512-vcfuiIxogLV4DlGBHIUOwI0IbrJ8HWPc4MU7HzviGeNho/UJDfi6B5p3sHeWIQ0KGIU0Jpxi5ZHxemQfLkkAwQ==",
+      "version": "7.2.0",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.0.tgz",
+      "integrity": "sha512-lmLf6gtyrPq8tTjSmrO94wBeQbFR3HbLHbuyD69wuyQkImp2hWqMGB47OX65FBkPffO641IP9jWa1z4ivqG26Q==",
       "requires": {
         "fs.realpath": "^1.0.0",
         "inflight": "^1.0.4",
@@ -620,30 +520,24 @@
         "path-is-absolute": "^1.0.0"
       }
     },
-    "has-ansi": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/has-ansi/-/has-ansi-2.0.0.tgz",
-      "integrity": "sha1-NPUEnOHs3ysGSa8+8k5F7TVBbZE=",
+    "global": {
+      "version": "4.4.0",
+      "resolved": "https://registry.npmjs.org/global/-/global-4.4.0.tgz",
+      "integrity": "sha512-wv/LAoHdRE3BeTGz53FAamhGlPLhlssK45usmGFThIi4XqnBmjKQ16u+RNbP7WvigRZDxUsM0J3gcQ5yicaL0w==",
       "requires": {
-        "ansi-regex": "^2.0.0"
-      },
-      "dependencies": {
-        "ansi-regex": {
-          "version": "2.1.1",
-          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-2.1.1.tgz",
-          "integrity": "sha1-w7M6te42DYbg5ijwRorn7yfWVN8="
-        }
+        "min-document": "^2.19.0",
+        "process": "^0.11.10"
       }
     },
     "has-flag": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
-      "integrity": "sha1-tdRU3CGZriJWmfNGfloH87lVuv0="
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
+      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ=="
     },
     "highlight.js": {
-      "version": "9.13.1",
-      "resolved": "https://registry.npmjs.org/highlight.js/-/highlight.js-9.13.1.tgz",
-      "integrity": "sha512-Sc28JNQNDzaH6PORtRLMvif9RSn1mYuOoX3omVjnb0+HbpPygU2ALBI0R/wsiqCb4/fcp07Gdo8g+fhtFrQl6A=="
+      "version": "10.7.3",
+      "resolved": "https://registry.npmjs.org/highlight.js/-/highlight.js-10.7.3.tgz",
+      "integrity": "sha512-tzcUFauisWKNHaRkN4Wjl/ZA07gENAjFl3J/c480dprkGTg5EQstgaNFqBfUqCq54kZRIEcreTsAgF/m2quD7A=="
     },
     "http-errors": {
       "version": "1.6.3",
@@ -665,9 +559,9 @@
       }
     },
     "ieee754": {
-      "version": "1.1.12",
-      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.1.12.tgz",
-      "integrity": "sha512-GguP+DRY+pJ3soyIiGPTvdiVXjZ+DbXOxGpXn3eMvNW4x4irjqXm4wHKscC+TfxSJ0yw/S1F24tqdMNsMZTiLA=="
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
+      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA=="
     },
     "inflight": {
       "version": "1.0.6",
@@ -683,43 +577,27 @@
       "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz",
       "integrity": "sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4="
     },
-    "invert-kv": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/invert-kv/-/invert-kv-1.0.0.tgz",
-      "integrity": "sha1-EEqOSqym09jNFXqO+L+rLXo//bY="
-    },
     "ipaddr.js": {
       "version": "1.8.0",
       "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.8.0.tgz",
       "integrity": "sha1-6qM9bd16zo9/b+DJygRA5wZzix4="
     },
     "is-fullwidth-code-point": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz",
-      "integrity": "sha1-o7MKXE8ZkYMWeqq5O+764937ZU8="
-    },
-    "is-stream": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-1.1.0.tgz",
-      "integrity": "sha1-EtSj3U5o4Lec6428hBc66A2RykQ="
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
+      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg=="
     },
     "isarray": {
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
       "integrity": "sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE="
     },
-    "isexe": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
-      "integrity": "sha1-6PvzdNxVb/iUehDcsFctYz8s+hA="
-    },
     "js-yaml": {
-      "version": "3.13.1",
-      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.13.1.tgz",
-      "integrity": "sha512-YfbcO7jXDdyj0DGxYVSlSeQNHbD7XPWvrVWeVUujrQEoZzWJIRrCPoyk6kL6IAjAG2IolMK4T0hNUe0HOUs5Jw==",
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
+      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
       "requires": {
-        "argparse": "^1.0.7",
-        "esprima": "^4.0.0"
+        "argparse": "^2.0.1"
       }
     },
     "jsonwebtoken": {
@@ -764,22 +642,10 @@
         "safe-buffer": "^5.0.1"
       }
     },
-    "lcid": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/lcid/-/lcid-1.0.0.tgz",
-      "integrity": "sha1-MIrMr6C8SDo4Z7S28rlQYlHRuDU=",
-      "requires": {
-        "invert-kv": "^1.0.0"
-      }
-    },
-    "locate-path": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-2.0.0.tgz",
-      "integrity": "sha1-K1aLJl7slExtnA3pw9u7ygNUzY4=",
-      "requires": {
-        "p-locate": "^2.0.0",
-        "path-exists": "^3.0.0"
-      }
+    "jwt-decode": {
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/jwt-decode/-/jwt-decode-2.2.0.tgz",
+      "integrity": "sha1-fYa9VmefWM5qhHBKZX3TkruoGnk="
     },
     "lodash.includes": {
       "version": "4.3.0",
@@ -816,28 +682,11 @@
       "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
       "integrity": "sha1-DdOXEhPHxW34gJd9UEyI+0cal6w="
     },
-    "lru-cache": {
-      "version": "4.1.5",
-      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-4.1.5.tgz",
-      "integrity": "sha512-sWZlbEP2OsHNkXrMl5GYk/jKk70MBng6UU4YI/qGDYbgf6YbP4EvmqISbXCoJiRKs+1bSpFHVgQxvJ17F2li5g==",
-      "requires": {
-        "pseudomap": "^1.0.2",
-        "yallist": "^2.1.2"
-      }
-    },
     "media-typer": {
       "version": "0.3.0",
       "resolved": "http://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
       "integrity": "sha1-hxDXrwqmJvj/+hzgAWhUUmMlV0g="
     },
-    "mem": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/mem/-/mem-1.1.0.tgz",
-      "integrity": "sha1-Xt1StIXKHZAP5kiVUFOZoN+kX3Y=",
-      "requires": {
-        "mimic-fn": "^1.0.0"
-      }
-    },
     "merge-descriptors": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
@@ -866,10 +715,13 @@
         "mime-db": "~1.37.0"
       }
     },
-    "mimic-fn": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-1.2.0.tgz",
-      "integrity": "sha512-jf84uxzwiuiIVKiOLpfYk7N46TSy8ubTonmneY9vrpHNAnp0QBt2BxWV9dO3/j+BoVAb+a5G6YDPW3M5HOdMWQ=="
+    "min-document": {
+      "version": "2.19.0",
+      "resolved": "https://registry.npmjs.org/min-document/-/min-document-2.19.0.tgz",
+      "integrity": "sha1-e9KC4/WELtKVu3SM3Z8f+iyCRoU=",
+      "requires": {
+        "dom-walk": "^0.1.0"
+      }
     },
     "minimatch": {
       "version": "3.0.4",
@@ -880,19 +732,9 @@
       }
     },
     "mkdirp": {
-      "version": "0.5.1",
-      "resolved": "http://registry.npmjs.org/mkdirp/-/mkdirp-0.5.1.tgz",
-      "integrity": "sha1-MAV0OOrGz3+MR2fzhkjWaX11yQM=",
-      "requires": {
-        "minimist": "0.0.8"
-      },
-      "dependencies": {
-        "minimist": {
-          "version": "0.0.8",
-          "resolved": "http://registry.npmjs.org/minimist/-/minimist-0.0.8.tgz",
-          "integrity": "sha1-hX/Kv8M5fSYluCKCYuhqp6ARsF0="
-        }
-      }
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
+      "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw=="
     },
     "ms": {
       "version": "2.0.0",
@@ -925,33 +767,18 @@
       "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.1.tgz",
       "integrity": "sha1-KzJxhOiZIQEXeyhWP7XnECrNDKk="
     },
-    "nodemailer": {
-      "version": "6.3.0",
-      "resolved": "https://registry.npmjs.org/nodemailer/-/nodemailer-6.3.0.tgz",
-      "integrity": "sha512-TEHBNBPHv7Ie/0o3HXnb7xrPSSQmH1dXwQKRaMKDBGt/ZN54lvDVujP6hKkO/vjkIYL9rK8kHSG11+G42Nhxuw=="
-    },
-    "npm-run-path": {
-      "version": "2.0.2",
-      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-2.0.2.tgz",
-      "integrity": "sha1-NakjLfo11wZ7TLLd8jV7GHFTbF8=",
+    "node-jsencrypt": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/node-jsencrypt/-/node-jsencrypt-1.0.0.tgz",
+      "integrity": "sha1-g//O1BTsvhL+oBfGxYXJv8Sa0Zs=",
       "requires": {
-        "path-key": "^2.0.0"
+        "get-random-values": "^1.2.0"
       }
     },
-    "number-is-nan": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/number-is-nan/-/number-is-nan-1.0.1.tgz",
-      "integrity": "sha1-CXtgK1NCKlIsGvuHkDGDNpQaAR0="
-    },
-    "oauth2orize": {
-      "version": "1.11.0",
-      "resolved": "https://registry.npmjs.org/oauth2orize/-/oauth2orize-1.11.0.tgz",
-      "integrity": "sha1-eTzvJR1F696sMq5AqLaBT6qx1IM=",
-      "requires": {
-        "debug": "2.x.x",
-        "uid2": "0.0.x",
-        "utils-merge": "1.x.x"
-      }
+    "nodemailer": {
+      "version": "6.7.2",
+      "resolved": "https://registry.npmjs.org/nodemailer/-/nodemailer-6.7.2.tgz",
+      "integrity": "sha512-Dz7zVwlef4k5R71fdmxwR8Q39fiboGbu3xgswkzGwczUfjp873rVxt1O46+Fh0j1ORnAC6L9+heI8uUpO6DT7Q=="
     },
     "object-assign": {
       "version": "4.1.1",
@@ -979,53 +806,24 @@
         "wrappy": "1"
       }
     },
-    "os-locale": {
-      "version": "2.1.0",
-      "resolved": "https://registry.npmjs.org/os-locale/-/os-locale-2.1.0.tgz",
-      "integrity": "sha512-3sslG3zJbEYcaC4YVAvDorjGxc7tv6KVATnLPZONiljsUncvihe9BQoVCEs0RZ1kmf4Hk9OBqlZfJZWI4GanKA==",
-      "requires": {
-        "execa": "^0.7.0",
-        "lcid": "^1.0.0",
-        "mem": "^1.1.0"
-      }
-    },
-    "p-finally": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/p-finally/-/p-finally-1.0.0.tgz",
-      "integrity": "sha1-P7z7FbiZpEEjs0ttzBi3JDNqLK4="
-    },
-    "p-limit": {
-      "version": "1.3.0",
-      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-1.3.0.tgz",
-      "integrity": "sha512-vvcXsLAJ9Dr5rQOPk7toZQZJApBl2K4J6dANSsEuh6QI41JYcsS/qhTGa9ErIUUgK3WNQoJYvylxvjqmiqEA9Q==",
-      "requires": {
-        "p-try": "^1.0.0"
-      }
-    },
-    "p-locate": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-2.0.0.tgz",
-      "integrity": "sha1-IKAQOyIqcMj9OcwuWAaA893l7EM=",
-      "requires": {
-        "p-limit": "^1.1.0"
-      }
-    },
-    "p-try": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/p-try/-/p-try-1.0.0.tgz",
-      "integrity": "sha1-y8ec26+P1CKOE/Yh8rGiN8GyB7M="
-    },
-    "parent-require": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/parent-require/-/parent-require-1.0.0.tgz",
-      "integrity": "sha1-dGoWdjgIOoYLDu9nMssn7UbDKXc="
-    },
     "parse5": {
-      "version": "3.0.3",
-      "resolved": "https://registry.npmjs.org/parse5/-/parse5-3.0.3.tgz",
-      "integrity": "sha512-rgO9Zg5LLLkfJF9E6CCmXlSE4UVceloys8JrFqCcHloC3usd/kJCyPDwH2SOlzix2j3xaP9sUX3e8+kvkuleAA==",
+      "version": "5.1.1",
+      "resolved": "https://registry.npmjs.org/parse5/-/parse5-5.1.1.tgz",
+      "integrity": "sha512-ugq4DFI0Ptb+WWjAdOK16+u/nHfiIrcE+sh8kZMaM0WllQKLI9rOUq6c2b7cwPkXdzfQESqvoqK6ug7U/Yyzug=="
+    },
+    "parse5-htmlparser2-tree-adapter": {
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/parse5-htmlparser2-tree-adapter/-/parse5-htmlparser2-tree-adapter-6.0.1.tgz",
+      "integrity": "sha512-qPuWvbLgvDGilKc5BoicRovlT4MtYT6JfJyBOMDsKoiT+GiuP5qyrPCnR9HcPECIJJmZh5jRndyNThnhhb/vlA==",
       "requires": {
-        "@types/node": "*"
+        "parse5": "^6.0.1"
+      },
+      "dependencies": {
+        "parse5": {
+          "version": "6.0.1",
+          "resolved": "https://registry.npmjs.org/parse5/-/parse5-6.0.1.tgz",
+          "integrity": "sha512-Ofn/CTFzRGTTxwpNEs9PP93gXShHcTq255nzRYSKe8AkVpZY7e1fpmTfOyoIvjP5HG7Z2ZM7VS9PPhQGW2pOpw=="
+        }
       }
     },
     "parseurl": {
@@ -1033,76 +831,20 @@
       "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.2.tgz",
       "integrity": "sha1-/CidTtiZMRlGDBViUyYs3I3mW/M="
     },
-    "passport": {
-      "version": "0.4.0",
-      "resolved": "https://registry.npmjs.org/passport/-/passport-0.4.0.tgz",
-      "integrity": "sha1-xQlWkTR71a07XhgCOMORTRbwWBE=",
-      "requires": {
-        "passport-strategy": "1.x.x",
-        "pause": "0.0.1"
-      }
-    },
-    "passport-http": {
-      "version": "0.3.0",
-      "resolved": "https://registry.npmjs.org/passport-http/-/passport-http-0.3.0.tgz",
-      "integrity": "sha1-juU9Q4C+nGDfIVGSUCmCb3cRVgM=",
-      "requires": {
-        "passport-strategy": "1.x.x"
-      }
-    },
-    "passport-http-bearer": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/passport-http-bearer/-/passport-http-bearer-1.0.1.tgz",
-      "integrity": "sha1-FHRp6jZp4qhMYWfvmdu3fh8AmKg=",
-      "requires": {
-        "passport-strategy": "1.x.x"
-      }
-    },
-    "passport-local": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/passport-local/-/passport-local-1.0.0.tgz",
-      "integrity": "sha1-H+YyaMkudWBmJkN+O5BmYsFbpu4=",
-      "requires": {
-        "passport-strategy": "1.x.x"
-      }
-    },
-    "passport-oauth2-client-password": {
-      "version": "0.1.2",
-      "resolved": "https://registry.npmjs.org/passport-oauth2-client-password/-/passport-oauth2-client-password-0.1.2.tgz",
-      "integrity": "sha1-TzeLZ4uS0W270jOmxwZSAJPlYbo=",
-      "requires": {
-        "passport-strategy": "1.x.x"
-      }
-    },
-    "passport-strategy": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/passport-strategy/-/passport-strategy-1.0.0.tgz",
-      "integrity": "sha1-tVOaqPwiWj0a0XlHbd8ja0QPUuQ="
-    },
-    "path-exists": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-3.0.0.tgz",
-      "integrity": "sha1-zg6+ql94yxiSXqfYENe1mwEP1RU="
-    },
     "path-is-absolute": {
       "version": "1.0.1",
       "resolved": "http://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
       "integrity": "sha1-F0uSaHNVNP+8es5r9TpanhtcX18="
     },
-    "path-key": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/path-key/-/path-key-2.0.1.tgz",
-      "integrity": "sha1-QRyttXTFoUDTpLGRDUDYDMn0C0A="
-    },
     "path-to-regexp": {
       "version": "0.1.7",
       "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
       "integrity": "sha1-32BBeABfUi8V60SQ5yR6G/qmf4w="
     },
-    "pause": {
-      "version": "0.0.1",
-      "resolved": "https://registry.npmjs.org/pause/-/pause-0.0.1.tgz",
-      "integrity": "sha1-HUCLP9t2kjuVQ9lvtMnf1TXZy10="
+    "process": {
+      "version": "0.11.10",
+      "resolved": "https://registry.npmjs.org/process/-/process-0.11.10.tgz",
+      "integrity": "sha1-czIwDoQBYb2j5podHZGn1LwW8YI="
     },
     "process-nextick-args": {
       "version": "2.0.0",
@@ -1118,11 +860,6 @@
         "ipaddr.js": "1.8.0"
       }
     },
-    "pseudomap": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/pseudomap/-/pseudomap-1.0.2.tgz",
-      "integrity": "sha1-8FKijacOYYkX7wqKw0wa5aaChrM="
-    },
     "qs": {
       "version": "6.5.2",
       "resolved": "https://registry.npmjs.org/qs/-/qs-6.5.2.tgz",
@@ -1178,11 +915,6 @@
       "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
       "integrity": "sha1-jGStX9MNqxyXbiNE/+f3kqam30I="
     },
-    "require-main-filename": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/require-main-filename/-/require-main-filename-1.0.1.tgz",
-      "integrity": "sha1-l/cXtp1IeE9fUmpsWqj/3aBVpNE="
-    },
     "safe-buffer": {
       "version": "5.1.2",
       "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
@@ -1236,39 +968,20 @@
         "send": "0.16.2"
       }
     },
-    "set-blocking": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
-      "integrity": "sha1-BF+XgtARrppoA93TgrJDkrPYkPc="
-    },
     "setprototypeof": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.1.0.tgz",
       "integrity": "sha512-BvE/TwpZX4FXExxOxZyRGQQv651MSwmWKZGqvmPcRIjDqWub67kTKuIMx43cZZrS/cBBzwBcNDWoFxt2XEFIpQ=="
     },
-    "shebang-command": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-1.2.0.tgz",
-      "integrity": "sha1-RKrGW2lbAzmJaMOfNj/uXer98eo=",
+    "sha.js": {
+      "version": "2.4.11",
+      "resolved": "https://registry.npmjs.org/sha.js/-/sha.js-2.4.11.tgz",
+      "integrity": "sha512-QMEp5B7cftE7APOjk5Y6xgrbWu+WkLVQwk8JNjZ8nKRciZaByEW6MubieAiToS7+dwvrjGhH8jRXz3MVd0AYqQ==",
       "requires": {
-        "shebang-regex": "^1.0.0"
+        "inherits": "^2.0.1",
+        "safe-buffer": "^5.0.1"
       }
     },
-    "shebang-regex": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-1.0.0.tgz",
-      "integrity": "sha1-2kL0l0DAtC2yypcoVxyxkMmO/qM="
-    },
-    "signal-exit": {
-      "version": "3.0.2",
-      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.2.tgz",
-      "integrity": "sha1-tf3AjxKH6hF4Yo5BXiUTK3NkbG0="
-    },
-    "sprintf-js": {
-      "version": "1.0.3",
-      "resolved": "http://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
-      "integrity": "sha1-BOaSb2YolTVPPdAVIDYzuFcpfiw="
-    },
     "sqlstring": {
       "version": "2.3.1",
       "resolved": "https://registry.npmjs.org/sqlstring/-/sqlstring-2.3.1.tgz",
@@ -1280,12 +993,13 @@
       "integrity": "sha1-Fhx9rBd2Wf2YEfQ3cfqZOBR4Yow="
     },
     "string-width": {
-      "version": "2.1.1",
-      "resolved": "https://registry.npmjs.org/string-width/-/string-width-2.1.1.tgz",
-      "integrity": "sha512-nOqH59deCq9SRHlxq1Aw85Jnt4w6KvLKqWVik6oA9ZklXLNIOlqg4F2yrT1MVaTjAqvVwdfeZ7w7aCvJD7ugkw==",
+      "version": "4.2.3",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
+      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
       "requires": {
-        "is-fullwidth-code-point": "^2.0.0",
-        "strip-ansi": "^4.0.0"
+        "emoji-regex": "^8.0.0",
+        "is-fullwidth-code-point": "^3.0.0",
+        "strip-ansi": "^6.0.1"
       }
     },
     "string_decoder": {
@@ -1297,30 +1011,25 @@
       }
     },
     "strip-ansi": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-4.0.0.tgz",
-      "integrity": "sha1-qEeQIusaw2iocTibY1JixQXuNo8=",
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
+      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
       "requires": {
-        "ansi-regex": "^3.0.0"
+        "ansi-regex": "^5.0.1"
       }
     },
-    "strip-eof": {
-      "version": "1.0.0",
-      "resolved": "http://registry.npmjs.org/strip-eof/-/strip-eof-1.0.0.tgz",
-      "integrity": "sha1-u0P/VZim6wXYm1n80SnJgzE2Br8="
-    },
     "supports-color": {
-      "version": "5.5.0",
-      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
-      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
+      "version": "7.2.0",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
+      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
       "requires": {
-        "has-flag": "^3.0.0"
+        "has-flag": "^4.0.0"
       }
     },
     "thenify": {
-      "version": "3.3.0",
-      "resolved": "https://registry.npmjs.org/thenify/-/thenify-3.3.0.tgz",
-      "integrity": "sha1-5p44obq+lpsBCCB5eLn2K4hgSDk=",
+      "version": "3.3.1",
+      "resolved": "https://registry.npmjs.org/thenify/-/thenify-3.3.1.tgz",
+      "integrity": "sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==",
       "requires": {
         "any-promise": "^1.0.0"
       }
@@ -1333,6 +1042,11 @@
         "thenify": ">= 3.1.0 < 4"
       }
     },
+    "tslib": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.3.1.tgz",
+      "integrity": "sha512-77EbyPPpMz+FRFRuAFlWMtmgUWGe9UOG2Z25NqCwiIjRhOf5iKGuzSe5P2w1laq+FkRy4p+PCuVkJSGkzTEKVw=="
+    },
     "type-is": {
       "version": "1.6.16",
       "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.16.tgz",
@@ -1343,37 +1057,45 @@
       }
     },
     "typeorm": {
-      "version": "0.2.9",
-      "resolved": "https://registry.npmjs.org/typeorm/-/typeorm-0.2.9.tgz",
-      "integrity": "sha512-guvrl5TH85N0y1AdPRuCrs2OTRQqs1wVgM+GrMfaiAGF8X+EoHDTUg2SPmcGtoAOSg7CnrCPxxwKOH4VvBr5Tw==",
-      "requires": {
-        "app-root-path": "^2.0.1",
-        "buffer": "^5.1.0",
-        "chalk": "^2.3.2",
-        "cli-highlight": "^1.2.3",
-        "debug": "^3.1.0",
-        "dotenv": "^5.0.1",
-        "glob": "^7.1.2",
-        "js-yaml": "^3.11.0",
-        "mkdirp": "^0.5.1",
-        "reflect-metadata": "^0.1.12",
-        "xml2js": "^0.4.17",
-        "yargonaut": "^1.1.2",
-        "yargs": "^11.1.0"
+      "version": "0.2.41",
+      "resolved": "https://registry.npmjs.org/typeorm/-/typeorm-0.2.41.tgz",
+      "integrity": "sha512-/d8CLJJxKPgsnrZWiMyPI0rz2MFZnBQrnQ5XP3Vu3mswv2WPexb58QM6BEtmRmlTMYN5KFWUz8SKluze+wS9xw==",
+      "requires": {
+        "@sqltools/formatter": "^1.2.2",
+        "app-root-path": "^3.0.0",
+        "buffer": "^6.0.3",
+        "chalk": "^4.1.0",
+        "cli-highlight": "^2.1.11",
+        "debug": "^4.3.1",
+        "dotenv": "^8.2.0",
+        "glob": "^7.1.6",
+        "js-yaml": "^4.0.0",
+        "mkdirp": "^1.0.4",
+        "reflect-metadata": "^0.1.13",
+        "sha.js": "^2.4.11",
+        "tslib": "^2.1.0",
+        "xml2js": "^0.4.23",
+        "yargs": "^17.0.1",
+        "zen-observable-ts": "^1.0.0"
       },
       "dependencies": {
         "debug": {
-          "version": "3.2.6",
-          "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.6.tgz",
-          "integrity": "sha512-mel+jf7nrtEl5Pn1Qx46zARXKDpBbvzezse7p7LqINmdoIk8PYP5SySaxEmYv6TZ0JyEKA1hsCId6DIhgITtWQ==",
+          "version": "4.3.3",
+          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.3.tgz",
+          "integrity": "sha512-/zxw5+vh1Tfv+4Qn7a5nsbcJKPaSvCDhojn6FEl9vupwK2VCSDtEiEtqr8DFtzYFOdz63LBkxec7DYuc2jon6Q==",
           "requires": {
-            "ms": "^2.1.1"
+            "ms": "2.1.2"
           }
         },
         "ms": {
-          "version": "2.1.1",
-          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.1.tgz",
-          "integrity": "sha512-tgp+dl5cGk28utYktBsrFqA7HKgrhgPsg6Z/EfhWI4gl1Hwq8B/GmY/0oXZ6nF8hDVesS/FpnYaD/kOWhYQvyg=="
+          "version": "2.1.2",
+          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
+          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
+        },
+        "reflect-metadata": {
+          "version": "0.1.13",
+          "resolved": "https://registry.npmjs.org/reflect-metadata/-/reflect-metadata-0.1.13.tgz",
+          "integrity": "sha512-Ts1Y/anZELhSsjMcU605fU9RE4Oi3p5ORujwbIKXfWa+0Zxs510Qrmrce5/Jowq3cHSZSJqBjypxmHarc+vEWg=="
         }
       }
     },
@@ -1385,11 +1107,6 @@
         "random-bytes": "~1.0.0"
       }
     },
-    "uid2": {
-      "version": "0.0.3",
-      "resolved": "https://registry.npmjs.org/uid2/-/uid2-0.0.3.tgz",
-      "integrity": "sha1-SDEm4Rd03y9xuLY53NeZw3YWK4I="
-    },
     "unpipe": {
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
@@ -1415,59 +1132,14 @@
       "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
       "integrity": "sha1-IpnwLG3tMNSllhsLn3RSShj2NPw="
     },
-    "which": {
-      "version": "1.3.1",
-      "resolved": "https://registry.npmjs.org/which/-/which-1.3.1.tgz",
-      "integrity": "sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==",
-      "requires": {
-        "isexe": "^2.0.0"
-      }
-    },
-    "which-module": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/which-module/-/which-module-2.0.0.tgz",
-      "integrity": "sha1-2e8H3Od7mQK4o6j6SzHD4/fm6Ho="
-    },
     "wrap-ansi": {
-      "version": "2.1.0",
-      "resolved": "http://registry.npmjs.org/wrap-ansi/-/wrap-ansi-2.1.0.tgz",
-      "integrity": "sha1-2Pw9KE3QV5T+hJc8rs3Rz4JP3YU=",
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
+      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
       "requires": {
-        "string-width": "^1.0.1",
-        "strip-ansi": "^3.0.1"
-      },
-      "dependencies": {
-        "ansi-regex": {
-          "version": "2.1.1",
-          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-2.1.1.tgz",
-          "integrity": "sha1-w7M6te42DYbg5ijwRorn7yfWVN8="
-        },
-        "is-fullwidth-code-point": {
-          "version": "1.0.0",
-          "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-1.0.0.tgz",
-          "integrity": "sha1-754xOG8DGn8NZDr4L95QxFfvAMs=",
-          "requires": {
-            "number-is-nan": "^1.0.0"
-          }
-        },
-        "string-width": {
-          "version": "1.0.2",
-          "resolved": "http://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz",
-          "integrity": "sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M=",
-          "requires": {
-            "code-point-at": "^1.0.0",
-            "is-fullwidth-code-point": "^1.0.0",
-            "strip-ansi": "^3.0.0"
-          }
-        },
-        "strip-ansi": {
-          "version": "3.0.1",
-          "resolved": "http://registry.npmjs.org/strip-ansi/-/strip-ansi-3.0.1.tgz",
-          "integrity": "sha1-ajhfuIU9lS1f8F0Oiq+UJ43GPc8=",
-          "requires": {
-            "ansi-regex": "^2.0.0"
-          }
-        }
+        "ansi-styles": "^4.0.0",
+        "string-width": "^4.1.0",
+        "strip-ansi": "^6.0.0"
       }
     },
     "wrappy": {
@@ -1476,111 +1148,62 @@
       "integrity": "sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8="
     },
     "xml2js": {
-      "version": "0.4.19",
-      "resolved": "https://registry.npmjs.org/xml2js/-/xml2js-0.4.19.tgz",
-      "integrity": "sha512-esZnJZJOiJR9wWKMyuvSE1y6Dq5LCuJanqhxslH2bxM6duahNZ+HMpCLhBQGZkbX6xRf8x1Y2eJlgt2q3qo49Q==",
+      "version": "0.4.23",
+      "resolved": "https://registry.npmjs.org/xml2js/-/xml2js-0.4.23.tgz",
+      "integrity": "sha512-ySPiMjM0+pLDftHgXY4By0uswI3SPKLDw/i3UXbnO8M/p28zqexCUoPmQFrYD+/1BzhGJSs2i1ERWKJAtiLrug==",
       "requires": {
         "sax": ">=0.6.0",
-        "xmlbuilder": "~9.0.1"
+        "xmlbuilder": "~11.0.0"
       }
     },
     "xmlbuilder": {
-      "version": "9.0.7",
-      "resolved": "http://registry.npmjs.org/xmlbuilder/-/xmlbuilder-9.0.7.tgz",
-      "integrity": "sha1-Ey7mPS7FVlxVfiD0wi35rKaGsQ0="
+      "version": "11.0.1",
+      "resolved": "https://registry.npmjs.org/xmlbuilder/-/xmlbuilder-11.0.1.tgz",
+      "integrity": "sha512-fDlsI/kFEx7gLvbecc0/ohLG50fugQp8ryHzMTuW9vSa1GJ0XYWKnhsUx7oie3G98+r56aTQIUB4kht42R3JvA=="
     },
     "y18n": {
-      "version": "3.2.1",
-      "resolved": "https://registry.npmjs.org/y18n/-/y18n-3.2.1.tgz",
-      "integrity": "sha1-bRX7qITAhnnA136I53WegR4H+kE="
-    },
-    "yallist": {
-      "version": "2.1.2",
-      "resolved": "https://registry.npmjs.org/yallist/-/yallist-2.1.2.tgz",
-      "integrity": "sha1-HBH5IY8HYImkfdUS+TxmmaaoHVI="
-    },
-    "yargonaut": {
-      "version": "1.1.4",
-      "resolved": "https://registry.npmjs.org/yargonaut/-/yargonaut-1.1.4.tgz",
-      "integrity": "sha512-rHgFmbgXAAzl+1nngqOcwEljqHGG9uUZoPjsdZEs1w5JW9RXYzrSvH/u70C1JE5qFi0qjsdhnUX/dJRpWqitSA==",
-      "requires": {
-        "chalk": "^1.1.1",
-        "figlet": "^1.1.1",
-        "parent-require": "^1.0.0"
-      },
-      "dependencies": {
-        "ansi-regex": {
-          "version": "2.1.1",
-          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-2.1.1.tgz",
-          "integrity": "sha1-w7M6te42DYbg5ijwRorn7yfWVN8="
-        },
-        "ansi-styles": {
-          "version": "2.2.1",
-          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-2.2.1.tgz",
-          "integrity": "sha1-tDLdM1i2NM914eRmQ2gkBTPB3b4="
-        },
-        "chalk": {
-          "version": "1.1.3",
-          "resolved": "https://registry.npmjs.org/chalk/-/chalk-1.1.3.tgz",
-          "integrity": "sha1-qBFcVeSnAv5NFQq9OHKCKn4J/Jg=",
-          "requires": {
-            "ansi-styles": "^2.2.1",
-            "escape-string-regexp": "^1.0.2",
-            "has-ansi": "^2.0.0",
-            "strip-ansi": "^3.0.0",
-            "supports-color": "^2.0.0"
-          }
-        },
-        "strip-ansi": {
-          "version": "3.0.1",
-          "resolved": "http://registry.npmjs.org/strip-ansi/-/strip-ansi-3.0.1.tgz",
-          "integrity": "sha1-ajhfuIU9lS1f8F0Oiq+UJ43GPc8=",
-          "requires": {
-            "ansi-regex": "^2.0.0"
-          }
-        },
-        "supports-color": {
-          "version": "2.0.0",
-          "resolved": "http://registry.npmjs.org/supports-color/-/supports-color-2.0.0.tgz",
-          "integrity": "sha1-U10EXOa2Nj+kARcIRimZXp3zJMc="
-        }
-      }
+      "version": "5.0.8",
+      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
+      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA=="
     },
     "yargs": {
-      "version": "11.1.0",
-      "resolved": "http://registry.npmjs.org/yargs/-/yargs-11.1.0.tgz",
-      "integrity": "sha512-NwW69J42EsCSanF8kyn5upxvjp5ds+t3+udGBeTbFnERA+lF541DDpMawzo4z6W/QrzNM18D+BPMiOBibnFV5A==",
+      "version": "17.3.0",
+      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.3.0.tgz",
+      "integrity": "sha512-GQl1pWyDoGptFPJx9b9L6kmR33TGusZvXIZUT+BOz9f7X2L94oeAskFYLEg/FkhV06zZPBYLvLZRWeYId29lew==",
       "requires": {
-        "cliui": "^4.0.0",
-        "decamelize": "^1.1.1",
-        "find-up": "^2.1.0",
-        "get-caller-file": "^1.0.1",
-        "os-locale": "^2.0.0",
+        "cliui": "^7.0.2",
+        "escalade": "^3.1.1",
+        "get-caller-file": "^2.0.5",
         "require-directory": "^2.1.1",
-        "require-main-filename": "^1.0.1",
-        "set-blocking": "^2.0.0",
-        "string-width": "^2.0.0",
-        "which-module": "^2.0.0",
-        "y18n": "^3.2.1",
-        "yargs-parser": "^9.0.2"
+        "string-width": "^4.2.3",
+        "y18n": "^5.0.5",
+        "yargs-parser": "^21.0.0"
       },
       "dependencies": {
         "yargs-parser": {
-          "version": "9.0.2",
-          "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-9.0.2.tgz",
-          "integrity": "sha1-nM9qQ0YP5O1Aqbto9I1DuKaMwHc=",
-          "requires": {
-            "camelcase": "^4.1.0"
-          }
+          "version": "21.0.0",
+          "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.0.0.tgz",
+          "integrity": "sha512-z9kApYUOCwoeZ78rfRYYWdiU/iNL6mwwYlkkZfJoyMR1xps+NEBX5X7XmRpxkZHhXJ6+Ey00IwKxBBSW9FIjyA=="
         }
       }
     },
     "yargs-parser": {
-      "version": "8.1.0",
-      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-8.1.0.tgz",
-      "integrity": "sha512-yP+6QqN8BmrgW2ggLtTbdrOyBNSI7zBa4IykmiV5R1wl1JWNxQvWhMfMdmzIYtKU7oP3OOInY/tl2ov3BDjnJQ==",
+      "version": "20.2.9",
+      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-20.2.9.tgz",
+      "integrity": "sha512-y11nGElTIV+CT3Zv9t7VKl+Q3hTQoT9a1Qzezhhl6Rp21gJ/IVTW7Z3y9EWXhuUBC2Shnf+DX0antecpAwSP8w=="
+    },
+    "zen-observable": {
+      "version": "0.8.15",
+      "resolved": "https://registry.npmjs.org/zen-observable/-/zen-observable-0.8.15.tgz",
+      "integrity": "sha512-PQ2PC7R9rslx84ndNBZB/Dkv8V8fZEpk83RLgXtYd0fwUgEjseMn1Dgajh2x6S8QbZAFa9p2qVCEuYZNgve0dQ=="
+    },
+    "zen-observable-ts": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/zen-observable-ts/-/zen-observable-ts-1.1.0.tgz",
+      "integrity": "sha512-1h4zlLSqI2cRLPJUHJFL8bCWHhkpuXkF+dbGkRaWjgDIG26DmzyshUMrdV/rL3UnR+mhaX4fRq8LPouq0MYYIA==",
       "requires": {
-        "camelcase": "^4.1.0"
+        "@types/zen-observable": "0.8.3",
+        "zen-observable": "0.8.15"
       }
     }
   }
diff --git a/package.json b/package.json
index c8f12d1..1be4408 100644
--- a/package.json
+++ b/package.json
@@ -28,28 +28,19 @@
     "@types/connect-ensure-login": "^0.1.4",
     "@types/express": "^4.16.0",
     "@types/jsonwebtoken": "^8.3.0",
-    "@types/oauth2orize": "^1.8.5",
-    "@types/passport": "^0.3.2",
-    "@types/passport-http": "^0.3.7",
-    "@types/passport-http-bearer": "^1.0.33",
-    "@types/passport-local": "^1.0.33",
-    "@types/passport-oauth2-client-password": "^0.1.2",
     "@types/uuid": "^3.4.4",
     "body-parser": "^1.18.3",
     "connect-ensure-login": "^0.1.1",
     "express": "^4.16.4",
     "express-session": "^1.16.2",
     "jsonwebtoken": "^8.4.0",
+    "jwt-decode": "^2.2.0",
     "mysql": "^2.16.0",
-    "nodemailer": "^6.3.0",
-    "oauth2orize": "^1.11.0",
-    "passport": "^0.4.0",
-    "passport-http": "^0.3.0",
-    "passport-http-bearer": "^1.0.1",
-    "passport-local": "^1.0.0",
-    "passport-oauth2-client-password": "^0.1.2",
+    "nodemailer": "^6.7.2",
+    "node-jsencrypt": "^1.0.0",
+    "crypto-js": "^4.1.1",
     "reflect-metadata": "^0.1.12",
-    "typeorm": "^0.2.9",
+    "typeorm": "^0.2.41",
     "uuid": "^3.3.2"
   },
   "devDependencies": {
-- 
2.24.2 (Apple Git-127)

