From c3270c94dd71e774c783c86c2f50fb0f89c46de1 Mon Sep 17 00:00:00 2001
From: Chhen Rina <chhenrina@gmail.com>
Date: Thu, 23 Dec 2021 22:27:52 +0700
Subject: [PATCH] change auth

---
 package-lock.json                      | 137 ++++++++++--------
 package.json                           |  10 +-
 src/app/pages/login/login.component.ts |  43 +++---
 src/app/services/base.service.ts       |  22 +--
 src/app/services/user/user.service.ts  | 184 ++++++++++++-------------
 src/app/utilities/crypto.helper.ts     |  55 ++++++++
 src/app/utilities/private.pem          |  28 ++++
 src/app/utilities/public.pem           |   9 ++
 8 files changed, 310 insertions(+), 178 deletions(-)
 create mode 100644 src/app/utilities/crypto.helper.ts
 create mode 100644 src/app/utilities/private.pem
 create mode 100644 src/app/utilities/public.pem

diff --git a/package-lock.json b/package-lock.json
index f9005ad..0dbb576 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -4675,6 +4675,11 @@
         }
       }
     },
+    "crypto-js": {
+      "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/crypto-js/-/crypto-js-4.1.1.tgz",
+      "integrity": "sha512-o2JlM7ydqd3Qk9CA0L4NL6mTzU2sdx96a+oOfPu8Mkl/PK51vSyoi8/rQ8NknZtk44vq15lmhAj9CIAGwgeWKw=="
+    },
     "css": {
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/css/-/css-3.0.0.tgz",
@@ -5083,20 +5088,30 @@
       }
     },
     "datatables.net": {
-      "version": "1.10.19",
-      "resolved": "https://registry.npmjs.org/datatables.net/-/datatables.net-1.10.19.tgz",
-      "integrity": "sha512-+ljXcI6Pj3PTGy5pesp3E5Dr3x3AV45EZe0o1r0gKENN2gafBKXodVnk2ypKwl2tTmivjxbkiqoWnipTefyBTA==",
+      "version": "1.11.3",
+      "resolved": "https://registry.npmjs.org/datatables.net/-/datatables.net-1.11.3.tgz",
+      "integrity": "sha512-VMj5qEaTebpNurySkM6jy6sGpl+s6onPK8xJhYr296R/vUBnz1+id16NVqNf9z5aR076OGcpGHCuiTuy4E05oQ==",
       "requires": {
         "jquery": ">=1.7"
       }
     },
     "datatables.net-bs4": {
-      "version": "1.10.19",
-      "resolved": "https://registry.npmjs.org/datatables.net-bs4/-/datatables.net-bs4-1.10.19.tgz",
-      "integrity": "sha512-pgeP17w4aPR7HIxIwuJghfqXULjdg1K6xMUUKDyCERJRSNNK4MRToFfELtIsluLNN555YBK4Kx8nihX5/ZT1Fw==",
+      "version": "1.11.3",
+      "resolved": "https://registry.npmjs.org/datatables.net-bs4/-/datatables.net-bs4-1.11.3.tgz",
+      "integrity": "sha512-UPT2F1nvZZzKJSSHb+3+bTeQy1ULLMT1BexBHCkh5PhMnAZNPbTEZD+6To1RCBfUF1rtPwIJTwJ+Jjjxy86xRw==",
       "requires": {
-        "datatables.net": "1.10.19",
+        "datatables.net": ">=1.10.25",
         "jquery": ">=1.7"
+      },
+      "dependencies": {
+        "datatables.net": {
+          "version": "1.11.3",
+          "resolved": "https://registry.npmjs.org/datatables.net/-/datatables.net-1.11.3.tgz",
+          "integrity": "sha512-VMj5qEaTebpNurySkM6jy6sGpl+s6onPK8xJhYr296R/vUBnz1+id16NVqNf9z5aR076OGcpGHCuiTuy4E05oQ==",
+          "requires": {
+            "jquery": ">=1.7"
+          }
+        }
       }
     },
     "datatables.net-responsive": {
@@ -5119,7 +5134,7 @@
       "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.2.tgz",
       "integrity": "sha512-mOp8wKcvj7XxC78zLgw/ZA+6TSgkoE2C/ienthhRD298T7UNwAg9diBpLRxC0mOezLl4B0xV7M0cCO6P/O0Xhw==",
       "requires": {
-        "ms": "^2.1.1"
+        "ms": "2.1.2"
       }
     },
     "decamelize": {
@@ -5390,6 +5405,11 @@
         "entities": "^2.0.0"
       }
     },
+    "dom-walk": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/dom-walk/-/dom-walk-0.1.2.tgz",
+      "integrity": "sha512-6QvTW9mrGeIegrFXdtQi9pk7O/nSK6lSdXW2eqUspN5LWD7UTji2Fqw5V2YLjBpHEoU9Xl/eUWNpDeZvoyOv2w=="
+    },
     "domelementtype": {
       "version": "2.2.0",
       "resolved": "https://registry.npmjs.org/domelementtype/-/domelementtype-2.2.0.tgz",
@@ -6436,6 +6456,14 @@
         "has-symbols": "^1.0.1"
       }
     },
+    "get-random-values": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/get-random-values/-/get-random-values-1.2.2.tgz",
+      "integrity": "sha512-lMyPjQyl0cNNdDf2oR+IQ/fM3itDvpoHy45Ymo2r0L1EjazeSl13SfbKZs7KtZ/3MDCeueiaJiuOEfKqRTsSgA==",
+      "requires": {
+        "global": "^4.4.0"
+      }
+    },
     "get-stream": {
       "version": "4.1.0",
       "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-4.1.0.tgz",
@@ -6489,6 +6517,15 @@
       "integrity": "sha512-lkX1HJXwyMcprw/5YUZc2s7DrpAiHB21/V+E1rHUrVNokkvB6bqMzT0VfV6/86ZNabt1k14YOIaT7nDvOX3Iiw==",
       "dev": true
     },
+    "global": {
+      "version": "4.4.0",
+      "resolved": "https://registry.npmjs.org/global/-/global-4.4.0.tgz",
+      "integrity": "sha512-wv/LAoHdRE3BeTGz53FAamhGlPLhlssK45usmGFThIi4XqnBmjKQ16u+RNbP7WvigRZDxUsM0J3gcQ5yicaL0w==",
+      "requires": {
+        "min-document": "^2.19.0",
+        "process": "^0.11.10"
+      }
+    },
     "globals": {
       "version": "11.12.0",
       "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
@@ -7914,12 +7951,6 @@
       "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
       "dev": true
     },
-    "json-schema": {
-      "version": "0.2.3",
-      "resolved": "https://registry.npmjs.org/json-schema/-/json-schema-0.2.3.tgz",
-      "integrity": "sha1-tIDIkuWaLwWVTOcnvT8qTogvnhM=",
-      "dev": true
-    },
     "json-schema-traverse": {
       "version": "0.4.1",
       "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
@@ -7968,15 +7999,23 @@
       "dev": true
     },
     "jsprim": {
-      "version": "1.4.1",
-      "resolved": "https://registry.npmjs.org/jsprim/-/jsprim-1.4.1.tgz",
-      "integrity": "sha1-MT5mvB5cwG5Di8G3SZwuXFastqI=",
+      "version": "1.4.2",
+      "resolved": "https://registry.npmjs.org/jsprim/-/jsprim-1.4.2.tgz",
+      "integrity": "sha512-P2bSOMAc/ciLz6DzgjVlGJP9+BrJWu5UDGK70C2iweC5QBIeFf0ZXRvGjEj2uYgrY2MkAAhsSWHDWlFtEroZWw==",
       "dev": true,
       "requires": {
         "assert-plus": "1.0.0",
         "extsprintf": "1.3.0",
-        "json-schema": "0.2.3",
+        "json-schema": "0.4.0",
         "verror": "1.10.0"
+      },
+      "dependencies": {
+        "json-schema": {
+          "version": "0.4.0",
+          "resolved": "https://registry.npmjs.org/json-schema/-/json-schema-0.4.0.tgz",
+          "integrity": "sha512-es94M3nTIfsEPisRafak+HDLfHXnKBhV3vU5eqPcS3flIWqcxJWgXHXiey3YrpaNsanY5ei1VoYEbOzijuq9BA==",
+          "dev": true
+        }
       }
     },
     "jszip": {
@@ -8762,6 +8801,14 @@
       "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
       "dev": true
     },
+    "min-document": {
+      "version": "2.19.0",
+      "resolved": "https://registry.npmjs.org/min-document/-/min-document-2.19.0.tgz",
+      "integrity": "sha1-e9KC4/WELtKVu3SM3Z8f+iyCRoU=",
+      "requires": {
+        "dom-walk": "^0.1.0"
+      }
+    },
     "mini-css-extract-plugin": {
       "version": "2.2.1",
       "resolved": "https://registry.npmjs.org/mini-css-extract-plugin/-/mini-css-extract-plugin-2.2.1.tgz",
@@ -9275,6 +9322,14 @@
       "dev": true,
       "optional": true
     },
+    "node-jsencrypt": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/node-jsencrypt/-/node-jsencrypt-1.0.0.tgz",
+      "integrity": "sha1-g//O1BTsvhL+oBfGxYXJv8Sa0Zs=",
+      "requires": {
+        "get-random-values": "^1.2.0"
+      }
+    },
     "node-releases": {
       "version": "1.1.76",
       "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-1.1.76.tgz",
@@ -11556,6 +11611,11 @@
       "resolved": "https://registry.npmjs.org/printj/-/printj-1.1.2.tgz",
       "integrity": "sha512-zA2SmoLaxZyArQTOPj5LXecR+RagfPSU5Kw1qP+jkWeNlrq+eJZyY2oS68SU1Z/7/myXM4lo9716laOFAVStCQ=="
     },
+    "process": {
+      "version": "0.11.10",
+      "resolved": "https://registry.npmjs.org/process/-/process-0.11.10.tgz",
+      "integrity": "sha1-czIwDoQBYb2j5podHZGn1LwW8YI="
+    },
     "process-nextick-args": {
       "version": "2.0.1",
       "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
@@ -14567,45 +14627,12 @@
       "dev": true
     },
     "wide-align": {
-      "version": "1.1.3",
-      "resolved": "https://registry.npmjs.org/wide-align/-/wide-align-1.1.3.tgz",
-      "integrity": "sha512-QGkOQc8XL6Bt5PwnsExKBPuMKBxnGxWWW3fU55Xt4feHozMUhdUMaBCk290qpm/wG5u/RSKzwdAC4i51YigihA==",
+      "version": "1.1.5",
+      "resolved": "https://registry.npmjs.org/wide-align/-/wide-align-1.1.5.tgz",
+      "integrity": "sha512-eDMORYaPNZ4sQIuuYPDHdQvf4gyCF9rEEV/yPxGfwPkRodwEgiMUUXTx/dex+Me0wxx53S+NgUHaP7y3MGlDmg==",
       "dev": true,
       "requires": {
-        "string-width": "^1.0.2 || 2"
-      },
-      "dependencies": {
-        "ansi-regex": {
-          "version": "3.0.0",
-          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-3.0.0.tgz",
-          "integrity": "sha1-7QMXwyIGT3lGbAKWa922Bas32Zg=",
-          "dev": true
-        },
-        "is-fullwidth-code-point": {
-          "version": "2.0.0",
-          "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz",
-          "integrity": "sha1-o7MKXE8ZkYMWeqq5O+764937ZU8=",
-          "dev": true
-        },
-        "string-width": {
-          "version": "2.1.1",
-          "resolved": "https://registry.npmjs.org/string-width/-/string-width-2.1.1.tgz",
-          "integrity": "sha512-nOqH59deCq9SRHlxq1Aw85Jnt4w6KvLKqWVik6oA9ZklXLNIOlqg4F2yrT1MVaTjAqvVwdfeZ7w7aCvJD7ugkw==",
-          "dev": true,
-          "requires": {
-            "is-fullwidth-code-point": "^2.0.0",
-            "strip-ansi": "^4.0.0"
-          }
-        },
-        "strip-ansi": {
-          "version": "4.0.0",
-          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-4.0.0.tgz",
-          "integrity": "sha1-qEeQIusaw2iocTibY1JixQXuNo8=",
-          "dev": true,
-          "requires": {
-            "ansi-regex": "^3.0.0"
-          }
-        }
+        "string-width": "^1.0.2 || 2 || 3 || 4"
       }
     },
     "wildcard": {
diff --git a/package.json b/package.json
index 22be980..5035b0f 100644
--- a/package.json
+++ b/package.json
@@ -49,7 +49,7 @@
     "chartist-plugin-zoom": "0.4.1",
     "core-js": "3.1.3",
     "datatables": "1.10.18",
-    "datatables.net-bs4": "1.10.19",
+    "datatables.net-bs4": "^1.11.3",
     "datatables.net-responsive": "2.2.3",
     "fullcalendar": "3.4.0",
     "google-libphonenumber": "^3.2.3",
@@ -70,6 +70,8 @@
     "ng2-select": "2.0.0",
     "ngx-chips": "2.2.2",
     "ngx-pica": "^1.1.4",
+    "node-jsencrypt": "^1.0.0",
+    "crypto-js": "^4.1.1",
     "nouislider": "9.2.0",
     "pdfjs-dist": "2.5.207",
     "perfect-scrollbar": "1.1.0",
@@ -109,5 +111,11 @@
     "ts-node": "8.2.0",
     "tslint": "5.17.0",
     "typescript": "~4.3.5"
+  },
+  "browser": {
+    "fs": false,
+    "crypto": false,
+    "path": false,
+    "os": false
   }
 }
diff --git a/src/app/pages/login/login.component.ts b/src/app/pages/login/login.component.ts
index ca83e79..aae4157 100644
--- a/src/app/pages/login/login.component.ts
+++ b/src/app/pages/login/login.component.ts
@@ -8,6 +8,7 @@ import { MatSnackBar } from '@angular/material/snack-bar';
 import { FormGroup, FormBuilder, FormControl } from '@angular/forms';
 import { MessageBusService, Messages, Channel } from '../../services/notification/notification.service';
 import { Message } from '@angular/compiler/src/i18n/i18n_ast';
+import { CryptoHelper } from 'src/app/utilities/crypto.helper';
 
 declare var $: any;
 
@@ -80,7 +81,8 @@ export class LoginComponent implements OnInit, OnDestroy {
 
     onClick_Login(){
         this.invisbleLoading = false;
-        let user = {userName:this.userName,password:this.password} as UserModel
+        let user = {userName:this.userName,password: CryptoHelper.encrypt_req(this.password)} as UserModel
+        console.log(user)
         this.userService.
           login(user)
           .subscribe(res=>{
@@ -89,31 +91,32 @@ export class LoginComponent implements OnInit, OnDestroy {
             let decoder = new JWTHelper(res.refresh_token)
             this.session.setUID(decoder.getID())
             this.userService.findUserByID(this.session.getUID()).subscribe(res=>{
-                  let resUser = res.body[0] as UserModel
-                   let user = new UserModel()
-                       user.ID = resUser.ID
-                       user.firstName = resUser.firstName 
-                       user.lastName = resUser.lastName
-                       user.group = resUser.group
-                       user.group.groupPermission = user.group.groupPermission.filter(res=>res.isView==true) 
-                       user.userName = resUser.userName
-                    this.session.setLoginSession(user)
-                    let message = new Messages();
-                        message.channel = Channel.login
-                    this.messageBus.sendMessage([message])
-                    if(user.group.ID==3){
-                        this.router.navigate(["/dashboard"])
-                    }
-                    else{
-                        this.router.navigate(["/"])
-                    }
+                console.log(res)
+                //   let resUser = res.body[0] as UserModel
+                //    let user = new UserModel()
+                //        user.ID = resUser.ID
+                //        user.firstName = resUser.firstName 
+                //        user.lastName = resUser.lastName
+                //        user.group = resUser.group
+                //        user.group.groupPermission = user.group.groupPermission.filter(res=>res.isView==true) 
+                //        user.userName = resUser.userName
+                //     this.session.setLoginSession(user)
+                //     let message = new Messages();
+                //         message.channel = Channel.login
+                //     this.messageBus.sendMessage([message])
+                //     if(user.group.ID==3){
+                //         this.router.navigate(["/dashboard"])
+                //     }
+                //     else{
+                //         this.router.navigate(["/"])
+                //     }
             })
             this.invisbleLoading = true
             //this.router.navigate(["/"])
             return res.access_token;
        },
        error=>{
-           console.log(error)
+           //console.log(error)
             this.matSnackbar.open("Invalid Username/Password","Failed", {
                 duration: 2000,
              });
diff --git a/src/app/services/base.service.ts b/src/app/services/base.service.ts
index 40aab3c..8e2fb37 100644
--- a/src/app/services/base.service.ts
+++ b/src/app/services/base.service.ts
@@ -1,22 +1,24 @@
 import { HttpClient, HttpHeaders } from '@angular/common/http';
-export class BaseService{
+export class BaseService {
 
     //abc123
-     client_id = "abc123"
-     client_secret = "ssh-secret"
-     static  basic = "Basic YWJjMTIzOnNzaC1zZWNyZXQ=";
-     
+    client_id = "abc123"
+    client_secret = "ssh-secret"
+    static basic = "Basic YWJjMTIzOnNzaC1zZWNyZXQ=";
 
-    getHeader(){
+
+    getHeader() {
         let headers = new HttpHeaders({
             'Content-Type': 'application/json',
-            'Authorization': BaseService.basic });
+            "client_id": "CK9999",
+            "key": "99596168-f64f-489a-8679-c02eaf7b3d49"
+        });
         return headers;
     }
 
 }
 
-export enum ResponseCode{
-    invalid_grant=403,
-    unathorize=401
+export enum ResponseCode {
+    invalid_grant = 403,
+    unathorize = 401
 }
\ No newline at end of file
diff --git a/src/app/services/user/user.service.ts b/src/app/services/user/user.service.ts
index af4f646..504bf86 100644
--- a/src/app/services/user/user.service.ts
+++ b/src/app/services/user/user.service.ts
@@ -14,43 +14,43 @@ import { JWTHelper } from '../../utilities/jwt';
 })
 export class UserService extends BaseService {
 
-  constructor(private http:HttpClient,private router:Router) {super(); }
+  constructor(private http: HttpClient, private router: Router) { super(); }
 
-  addUsers(user:UserModel){
-     return this.http.post<ResponseBody<any>>(Api.addUser,user)
+  addUsers(user: UserModel) {
+    return this.http.post<ResponseBody<any>>(Api.addUser, user)
   }
 
 
   // return token , refresh token , expire of token
-  login(user:UserModel){
+  login(user: UserModel) {
     let session = new SessionManagement();
-        session.removeAcToken();
-        session.removeRefreshToken();
+    session.removeAcToken();
+    session.removeRefreshToken();
     const options = {
       headers: this.getHeader()
     };
 
-    let json = {"username":user.userName,
-                "password":user.password,
-                "scope": 'offline_access',
-                "grant_type": 'password'
-              }
+    let json = {
+      "username": user.userName,
+      "password": user.password
+    }
+    console.log(json)
     return this.http.post<any>
-          (Api.Login,
-            json,
-            options
-          )
+      (Api.Login,
+        json,
+        options
+      )
   }
 
   /**
    * method : findUserByID
    * @param ID 
    */
-  findUserByID(ID:any){
+  findUserByID(ID: any) {
     // let session = new SessionManagement();
     // session.getUID()
-     let json = {ID:ID}
-      return  this.http.post<ResponseBody<UserModel>>(Api.findUserByID,json)
+    let json = { ID: ID }
+    return this.http.post<ResponseBody<UserModel>>(Api.findUserByID, json)
   }
 
   /**
@@ -58,11 +58,11 @@ export class UserService extends BaseService {
    * @param ID 
    * @method remove
    */
-  removeUserByID(ID:any){
+  removeUserByID(ID: any) {
     // let session = new SessionManagement();
     // session.getUID()
-     let json = {ID:ID}
-      return  this.http.post<ResponseBody<any>>(Api.removeUserByID,json)
+    let json = { ID: ID }
+    return this.http.post<ResponseBody<any>>(Api.removeUserByID, json)
   }
 
 
@@ -70,11 +70,11 @@ export class UserService extends BaseService {
    * method : getUserByGroups
    * @param groupID 
    */
-  getUserByGroups(groupID:any){
+  getUserByGroups(groupID: any) {
     // let session = new SessionManagement();
     // session.getUID()
-     let json = {groupID:groupID}
-      return  this.http.post<ResponseBody<UserModel>>(Api.getUserByGroups,json)
+    let json = { groupID: groupID }
+    return this.http.post<ResponseBody<UserModel>>(Api.getUserByGroups, json)
   }
 
 
@@ -82,107 +82,107 @@ export class UserService extends BaseService {
    * method : getListUserByPosition
    * @param positionID 
    */
-  getListUserByPosition(positionID:any){
+  getListUserByPosition(positionID: any) {
     // let session = new SessionManagement();
     // session.getUID()
-     let json = {positionID:positionID}
-      return  this.http.post<ResponseBody<UserModel>>(Api.getListUserByPosition,json)
+    let json = { positionID: positionID }
+    return this.http.post<ResponseBody<UserModel>>(Api.getListUserByPosition, json)
   }
 
-/**
- * 
- * @param pageIndex 
- * @param pageSize 
- */
-  getListUsers(pageIndex:any,pageSize:any){
-    let json = {"pageIndex":pageIndex,"pageSize":pageSize}
-      return  this.http.post<ResponseBody<UserModel>>(Api.getListUsers,json)
+  /**
+   * 
+   * @param pageIndex 
+   * @param pageSize 
+   */
+  getListUsers(pageIndex: any, pageSize: any) {
+    let json = { "pageIndex": pageIndex, "pageSize": pageSize }
+    return this.http.post<ResponseBody<UserModel>>(Api.getListUsers, json)
   }
 
   /**
    * 
    */
-  getListUserOperation(){
-    return  this.http.post<ResponseBody<UserModel>>(Api.getListUserOperation,{})
+  getListUserOperation() {
+    return this.http.post<ResponseBody<UserModel>>(Api.getListUserOperation, {})
   }
 
 
-  getCountUsers(){
-      return  this.http.post<ResponseBody<any>>(Api.getCountUsers,{})
+  getCountUsers() {
+    return this.http.post<ResponseBody<any>>(Api.getCountUsers, {})
   }
 
-  
 
- getAccessToken() {
-    let  session = new SessionManagement()
+
+  getAccessToken() {
+    let session = new SessionManagement()
     let json = {
-          "refresh_token":session.getRefreshToken(),
-          "client_id":this.client_id,
-          "client_secret": this.client_secret,
-          "grant_type": 'refresh_token'
-     }
+      "refresh_token": session.getRefreshToken(),
+      "client_id": this.client_id,
+      "client_secret": this.client_secret,
+      "grant_type": 'refresh_token'
+    }
     const options = {
       headers: this.getHeader()
     };
-    
-   return this.http.post<any>(Api.getAccessToken,json);
- }
 
+    return this.http.post<any>(Api.getAccessToken, json);
+  }
 
 
- isValidRefreshToken(){
 
-     try {
-      let  session = new SessionManagement()
+  isValidRefreshToken() {
+
+    try {
+      let session = new SessionManagement()
       let decode = new JWTHelper(session.getRefreshToken()).decode()
-          
-      var currentTimeStamp = Date.parse(new Date().toLocaleString())/1000;
+
+      var currentTimeStamp = Date.parse(new Date().toLocaleString()) / 1000;
+      // if current date  > token date
+      if (currentTimeStamp >= decode.exp) {
+        return false;
+      }
+      else {
+        return true;
+      }
+    } catch (error) {
+      return false;
+    }
+
+  }
+
+  isValidAccessToken() {
+
+    try {
+      let session = new SessionManagement()
+      let decode = new JWTHelper(session.getAcToken()).decode()
+
+      var currentTimeStamp = Date.parse(new Date().toLocaleString()) / 1000;
       // if current date  > token date
-        if(currentTimeStamp>=decode.exp){
-             return false;
-        }
-        else{
-          return true;
-        }
-     } catch (error) {
-       return false;
-     }
- 
- }
-
- isValidAccessToken(){
-
-   try {
-    let  session = new SessionManagement()
-    let decode = new JWTHelper(session.getAcToken()).decode()
-        
-    var currentTimeStamp = Date.parse(new Date().toLocaleString())/1000;
-    // if current date  > token date
-      if(currentTimeStamp>=decode.exp){
-           console.log("token expire")
-           return false;
+      if (currentTimeStamp >= decode.exp) {
+        console.log("token expire")
+        return false;
       }
-      else{
+      else {
         console.log("token valid")
         return true;
       }
-   } catch (error) {
-       return false;
-   }
-  
- }
+    } catch (error) {
+      return false;
+    }
 
+  }
 
- getToken(){
-  let session = new SessionManagement();
-  return session.getAcToken();
- }
 
- logout(){
-   console.log("logout")
-   localStorage.clear();
+  getToken() {
+    let session = new SessionManagement();
+    return session.getAcToken();
+  }
+
+  logout() {
+    console.log("logout")
+    localStorage.clear();
     this.router.navigate(['pages/login'])
- }
+  }
 
 
 
diff --git a/src/app/utilities/crypto.helper.ts b/src/app/utilities/crypto.helper.ts
new file mode 100644
index 0000000..dd4b9f1
--- /dev/null
+++ b/src/app/utilities/crypto.helper.ts
@@ -0,0 +1,55 @@
+const crypto = require('crypto');
+const JSEncrypt = require('node-jsencrypt');
+const fs = require("fs"); 
+const CryptoJS = require("crypto-js");
+// const { privateKey, publicKey } = crypto.generateKeyPairSync('rsa', {
+//   modulusLength: 2048,
+//   publicKeyEncoding: {
+//     type: 'spki',
+//     format: 'pem'
+//   },
+//   privateKeyEncoding: {
+//     type: 'pkcs8',
+//     format: 'pem'
+//   }
+// }); 
+
+export class CryptoHelper {
+  static crypt = new JSEncrypt();
+  static encrypt_req(text) {
+  // let public_key = fs.readFileSync(__dirname+"/public.pem", 'utf8' )
+  
+    this.crypt.setKey(`-----BEGIN PUBLIC KEY-----
+    MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyKKVoHapcOkZz1grI5eY
+    OyfM6Ob8OTkSTCICYofNjp70aDc1ioH9cznsIND/wCfRO47lHKai8Gu/H/XatFVX
+    k0K5XWxrSGyIyu+KhuXLOeqbSXiVol0uHJFgIvXQbMKm09Rs5+MwbE4pqoKFsHHC
+    vJcgANWy/drxBbhePdAxIsLj5qV6AO/xh/Ic+V2Yg3Z46NGfb5hlNrJtQu1QNjix
+    MYtESqxdzpdk45OPx3eBUiPei+VGoCXEoCrHBMqBclV+9g8c31X2+23L9AwCV1Ec
+    M46p/Jx/bVTLNPK4ALC9UQ/0mFpf5H/tacCO/jAhPF6yE5qNeX1Xc4Bl3VsyvkdQ
+    hQIDAQAB
+    -----END PUBLIC KEY-----`);
+    return this.crypt.encrypt(text);
+  }
+
+
+//  static decrypt_req(encrypted) {
+//    let privateKey = fs.readFileSync(__dirname+"/private.pem", 'utf8' )
+//     this.crypt.setPrivateKey(privateKey);
+//     return this.crypt.decrypt(encrypted);
+// }
+
+
+static encrypt_db(text) {
+  var ciphertext = CryptoJS.AES.encrypt(text, '1').toString();
+   return ciphertext;
+ }
+
+
+static decrypt_db(ciphertext) {
+  var bytes  = CryptoJS.AES.decrypt(ciphertext, '1');
+  var originalText = bytes.toString(CryptoJS.enc.Utf8);
+  return originalText;
+}
+
+ 
+}
\ No newline at end of file
diff --git a/src/app/utilities/private.pem b/src/app/utilities/private.pem
new file mode 100644
index 0000000..abdacaf
--- /dev/null
+++ b/src/app/utilities/private.pem
@@ -0,0 +1,28 @@
+-----BEGIN PRIVATE KEY-----
+MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDIopWgdqlw6RnP
+WCsjl5g7J8zo5vw5ORJMIgJih82OnvRoNzWKgf1zOewg0P/AJ9E7juUcpqLwa78f
+9dq0VVeTQrldbGtIbIjK74qG5cs56ptJeJWiXS4ckWAi9dBswqbT1Gzn4zBsTimq
+goWwccK8lyAA1bL92vEFuF490DEiwuPmpXoA7/GH8hz5XZiDdnjo0Z9vmGU2sm1C
+7VA2OLExi0RKrF3Ol2Tjk4/Hd4FSI96L5UagJcSgKscEyoFyVX72DxzfVfb7bcv0
+DAJXURwzjqn8nH9tVMs08rgAsL1RD/SYWl/kf+1pwI7+MCE8XrITmo15fVdzgGXd
+WzK+R1CFAgMBAAECggEAeYTv92anrfmhZlJSnpYc4Ad1NsNglRAaIv6eTytNt0pT
+YiO+TAv7hKTafe3YWXxEYDxmTHopSlEYS7VPJ9Zg2pKZTxpxyEXkfHWlg5r/Ai80
+qsVcbCDf4vGyNrqH6Lfk73xEEhcqpw6YcevoKTxd5HfsLFVCujq3rO1EN1A30oL/
+2+aWoOzU3kpvRDdvRmGb1785TIWsQd4DNJKl9E1XFV+ua7Kxmu7N9twB4bPaxSWD
+hnWGwRQmdjmgzLKVxoNotvlVXR+zJQYckIri14Ika2lx2Wv/ylv6nahq2vMmPNT6
+lHwwuycnU+/khMYu8Kxwpt75GOlbfEmZ1MIgfgfq6QKBgQD9nd485CXYbNSPy5EZ
+Lfe7nCwYrN4iRlAjXmRGptc7H/7TpmVyzBb34+fsTd0YTzioaqPLY88Su2Dqe0uO
+ZdZmbfQzwmzWfneO/FI/vAt2x3ptiMLmGKe9lF4rS1SqhPqVbvzeJ1Xxb97U9HFC
+vP/oiospeC9f9ds6Rnukg4isZwKBgQDKhUHc7iAiMTch5Xv8tdRfT5fv9sErjoHO
+W7ufXz9V1IUgtm5hKf6oyUblKCzvpC0bP85TvG33kearpiXXoc3Lrctz3Gxeg2CX
+I1o8j5r1XvzeVpV5JXFJkdsxP33Vob3/+Qq3Gt+lZ/N/hn8950yDoQc9J7AmHy5i
+t0m0H/BIMwKBgDoAPK8YTj9sxEAOgiSMCrfxQ3RxNGwKQJGWKMCvr1FqQ9ELoO/c
+FPSkPoogVIwWshJyMPt23Aigqc12XRU33QyX4N1lfZagXZ9pvTWuP8DuZeVe/ZO5
+18LXh6HHHJnSx6wdMd9sh48r0n5JWQ22Q6Be7uyQ++SqSXTOYcCCBGPJAoGAA2yF
+VIriGDHk0Lnkgr1APexGkVQGqAncv/RlE6i0lWrmZUswSow/NfNRM4aeW97WtGM7
+xcalxU2+LKC+ewrNQ+hITEkpu99UvrlmSSfUYtmcRNYJ6OZtJ+VDY23DXt1BLRa0
+y6u0pENBpqJLfGxwqrkKOkp1e++DBUA8CsOPeGkCgYEAv1mM0GcnA2CgOwMNYJ/w
+6Ur3cX0C4gLvAFSjXAlekRIc9PAinarR5syN6Yr1o/pbGxrNH/stpi+35Zb4NXLO
+IeJ1SZR0EmApDJlYmfoHDO+UvipmCw5g1RY0E9Or42D96LIaZVRI7fJR8IZHwCDi
+b3ds5iB9Q+5ePbX0aNZvhKU=
+-----END PRIVATE KEY-----
\ No newline at end of file
diff --git a/src/app/utilities/public.pem b/src/app/utilities/public.pem
new file mode 100644
index 0000000..ba97a7e
--- /dev/null
+++ b/src/app/utilities/public.pem
@@ -0,0 +1,9 @@
+-----BEGIN PUBLIC KEY-----
+MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyKKVoHapcOkZz1grI5eY
+OyfM6Ob8OTkSTCICYofNjp70aDc1ioH9cznsIND/wCfRO47lHKai8Gu/H/XatFVX
+k0K5XWxrSGyIyu+KhuXLOeqbSXiVol0uHJFgIvXQbMKm09Rs5+MwbE4pqoKFsHHC
+vJcgANWy/drxBbhePdAxIsLj5qV6AO/xh/Ic+V2Yg3Z46NGfb5hlNrJtQu1QNjix
+MYtESqxdzpdk45OPx3eBUiPei+VGoCXEoCrHBMqBclV+9g8c31X2+23L9AwCV1Ec
+M46p/Jx/bVTLNPK4ALC9UQ/0mFpf5H/tacCO/jAhPF6yE5qNeX1Xc4Bl3VsyvkdQ
+hQIDAQAB
+-----END PUBLIC KEY-----
\ No newline at end of file
-- 
2.24.2 (Apple Git-127)

